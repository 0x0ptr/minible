
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003398  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000018  20000000  00003398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000254  20000020  000033c0  00020020  2**4
                  ALLOC
  3 .stack        00002004  20000274  00003614  00020020  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003348d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000363d  00000000  00000000  00053526  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000fe54  00000000  00000000  00056b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008d0  00000000  00000000  000669b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008d8  00000000  00000000  00067287  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000652c  00000000  00000000  00067b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c028  00000000  00000000  0006e08b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090356  00000000  00000000  0007a0b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001690  00000000  00000000  0010a40c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 22 00 20 51 27 00 00 4d 27 00 00 4d 27 00 00     x". Q'..M'..M'..
	...
      2c:	4d 27 00 00 00 00 00 00 00 00 00 00 4d 27 00 00     M'..........M'..
      3c:	95 26 00 00 4d 27 00 00 4d 27 00 00 4d 27 00 00     .&..M'..M'..M'..
      4c:	4d 27 00 00 81 22 00 00 4d 27 00 00 81 19 00 00     M'..."..M'......
      5c:	4d 27 00 00 4d 27 00 00 4d 27 00 00 4d 27 00 00     M'..M'..M'..M'..
      6c:	4d 27 00 00 4d 27 00 00 4d 27 00 00 c5 24 00 00     M'..M'..M'...$..
      7c:	91 26 00 00 4d 27 00 00 93 26 00 00 4d 27 00 00     .&..M'...&..M'..
      8c:	4d 27 00 00 4d 27 00 00 00 00 00 00 00 00 00 00     M'..M'..........
      9c:	41 23 00 00 4d 27 00 00 4d 27 00 00 4d 27 00 00     A#..M'..M'..M'..
      ac:	4d 27 00 00 00 00 00 00                             M'......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000020 	.word	0x20000020
      d4:	00000000 	.word	0x00000000
      d8:	00003398 	.word	0x00003398

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000024 	.word	0x20000024
     108:	00003398 	.word	0x00003398
     10c:	00003398 	.word	0x00003398
     110:	00000000 	.word	0x00000000

00000114 <br_aes_ct_bitslice_Sbox>:
#include "inner.h"

/* see inner.h */
void
br_aes_ct_bitslice_Sbox(uint32_t *q)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46de      	mov	lr, fp
     118:	4657      	mov	r7, sl
     11a:	464e      	mov	r6, r9
     11c:	4645      	mov	r5, r8
     11e:	b5e0      	push	{r5, r6, r7, lr}
     120:	b093      	sub	sp, #76	; 0x4c
     122:	0006      	movs	r6, r0
	uint32_t t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
	uint32_t t50, t51, t52, t53, t54, t55, t56, t57, t58, t59;
	uint32_t t60, t61, t62, t63, t64, t65, t66, t67;
	uint32_t s0, s1, s2, s3, s4, s5, s6, s7;

	x0 = q[7];
     124:	69c3      	ldr	r3, [r0, #28]
     126:	4698      	mov	r8, r3
	x1 = q[6];
     128:	6983      	ldr	r3, [r0, #24]
	x2 = q[5];
	x3 = q[4];
     12a:	6902      	ldr	r2, [r0, #16]
	x4 = q[3];
	x5 = q[2];
     12c:	6887      	ldr	r7, [r0, #8]
	x6 = q[1];
     12e:	6845      	ldr	r5, [r0, #4]
	x7 = q[0];

	/*
	 * Top linear transformation.
	 */
	y14 = x3 ^ x5;
     130:	0011      	movs	r1, r2
     132:	4079      	eors	r1, r7
     134:	0008      	movs	r0, r1
	y13 = x0 ^ x6;
     136:	4641      	mov	r1, r8
     138:	4069      	eors	r1, r5
     13a:	468a      	mov	sl, r1
	y9 = x0 ^ x3;
     13c:	4641      	mov	r1, r8
     13e:	4051      	eors	r1, r2
     140:	9102      	str	r1, [sp, #8]
	y8 = x0 ^ x5;
     142:	4641      	mov	r1, r8
     144:	4079      	eors	r1, r7
     146:	000c      	movs	r4, r1
	t0 = x1 ^ x2;
     148:	0031      	movs	r1, r6
     14a:	6976      	ldr	r6, [r6, #20]
     14c:	405e      	eors	r6, r3
	y1 = t0 ^ x7;
     14e:	9100      	str	r1, [sp, #0]
     150:	6809      	ldr	r1, [r1, #0]
     152:	4071      	eors	r1, r6
	y4 = y1 ^ x3;
     154:	9101      	str	r1, [sp, #4]
     156:	404a      	eors	r2, r1
     158:	9205      	str	r2, [sp, #20]
	y12 = y13 ^ y14;
     15a:	9004      	str	r0, [sp, #16]
     15c:	0002      	movs	r2, r0
     15e:	4651      	mov	r1, sl
     160:	404a      	eors	r2, r1
     162:	0010      	movs	r0, r2
	y2 = y1 ^ x0;
     164:	4642      	mov	r2, r8
     166:	9901      	ldr	r1, [sp, #4]
     168:	404a      	eors	r2, r1
     16a:	9207      	str	r2, [sp, #28]
	y5 = y1 ^ x6;
     16c:	404d      	eors	r5, r1
	y3 = y5 ^ y8;
     16e:	0022      	movs	r2, r4
     170:	9508      	str	r5, [sp, #32]
     172:	406a      	eors	r2, r5
     174:	9209      	str	r2, [sp, #36]	; 0x24
	t1 = x4 ^ y12;
     176:	9a00      	ldr	r2, [sp, #0]
     178:	68d5      	ldr	r5, [r2, #12]
     17a:	9006      	str	r0, [sp, #24]
     17c:	4045      	eors	r5, r0
	y15 = t1 ^ x5;
     17e:	406f      	eors	r7, r5
	y20 = t1 ^ x1;
     180:	406b      	eors	r3, r5
     182:	0019      	movs	r1, r3
	y6 = y15 ^ x7;
     184:	9800      	ldr	r0, [sp, #0]
     186:	6803      	ldr	r3, [r0, #0]
     188:	407b      	eors	r3, r7
     18a:	930a      	str	r3, [sp, #40]	; 0x28
	y10 = y15 ^ t0;
     18c:	003a      	movs	r2, r7
     18e:	4072      	eors	r2, r6
     190:	0015      	movs	r5, r2
	y11 = y20 ^ y9;
     192:	9b02      	ldr	r3, [sp, #8]
     194:	404b      	eors	r3, r1
	y7 = x7 ^ y11;
     196:	6800      	ldr	r0, [r0, #0]
     198:	4058      	eors	r0, r3
     19a:	4683      	mov	fp, r0
	y17 = y10 ^ y11;
     19c:	9503      	str	r5, [sp, #12]
     19e:	405d      	eors	r5, r3
     1a0:	0028      	movs	r0, r5
	y19 = y10 ^ y8;
	y16 = t0 ^ y11;
     1a2:	930b      	str	r3, [sp, #44]	; 0x2c
     1a4:	405e      	eors	r6, r3
	y18 = x0 ^ y16;

	/*
	 * Non-linear section.
	 */
	t2 = y12 & y15;
     1a6:	9b06      	ldr	r3, [sp, #24]
     1a8:	9710      	str	r7, [sp, #64]	; 0x40
     1aa:	403b      	ands	r3, r7
     1ac:	001a      	movs	r2, r3
	t3 = y3 & y6;
	t4 = t3 ^ t2;
	t5 = y4 & x7;
	t6 = t5 ^ t2;
	t7 = y13 & y16;
     1ae:	4657      	mov	r7, sl
     1b0:	4037      	ands	r7, r6
     1b2:	46bc      	mov	ip, r7
	t8 = y5 & y1;
	t9 = t8 ^ t7;
	t10 = y2 & y7;
	t11 = t10 ^ t7;
	t12 = y9 & y11;
     1b4:	9d02      	ldr	r5, [sp, #8]
     1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     1b8:	401d      	ands	r5, r3
	t13 = y14 & y17;
     1ba:	9b04      	ldr	r3, [sp, #16]
     1bc:	9011      	str	r0, [sp, #68]	; 0x44
     1be:	4003      	ands	r3, r0
     1c0:	001f      	movs	r7, r3
	t14 = t13 ^ t12;
     1c2:	406f      	eors	r7, r5
     1c4:	46b9      	mov	r9, r7
	t15 = y8 & y10;
     1c6:	0023      	movs	r3, r4
     1c8:	9803      	ldr	r0, [sp, #12]
     1ca:	4003      	ands	r3, r0
	t16 = t15 ^ t12;
     1cc:	405d      	eors	r5, r3
	t3 = y3 & y6;
     1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
     1d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
     1d2:	403b      	ands	r3, r7
     1d4:	001f      	movs	r7, r3
	t17 = t4 ^ t14;
	t18 = t6 ^ t16;
	t19 = t9 ^ t14;
	t20 = t11 ^ t16;
	t21 = t17 ^ y20;
     1d6:	000b      	movs	r3, r1
     1d8:	4053      	eors	r3, r2
     1da:	405f      	eors	r7, r3
     1dc:	4649      	mov	r1, r9
     1de:	404f      	eors	r7, r1
	t5 = y4 & x7;
     1e0:	9900      	ldr	r1, [sp, #0]
     1e2:	6809      	ldr	r1, [r1, #0]
     1e4:	9b05      	ldr	r3, [sp, #20]
     1e6:	4019      	ands	r1, r3
     1e8:	000b      	movs	r3, r1
	t22 = t18 ^ y19;
     1ea:	940f      	str	r4, [sp, #60]	; 0x3c
     1ec:	4063      	eors	r3, r4
     1ee:	4043      	eors	r3, r0
     1f0:	4053      	eors	r3, r2
     1f2:	406b      	eors	r3, r5
	t8 = y5 & y1;
     1f4:	9a08      	ldr	r2, [sp, #32]
     1f6:	9801      	ldr	r0, [sp, #4]
     1f8:	4002      	ands	r2, r0
	t23 = t19 ^ y21;
     1fa:	4651      	mov	r1, sl
     1fc:	404a      	eors	r2, r1
     1fe:	4072      	eors	r2, r6
     200:	4661      	mov	r1, ip
     202:	404a      	eors	r2, r1
     204:	4649      	mov	r1, r9
     206:	404a      	eors	r2, r1
	t24 = t20 ^ y18;
     208:	4644      	mov	r4, r8
     20a:	4074      	eors	r4, r6
     20c:	4661      	mov	r1, ip
     20e:	404c      	eors	r4, r1
	t10 = y2 & y7;
     210:	9807      	ldr	r0, [sp, #28]
     212:	4659      	mov	r1, fp
     214:	4008      	ands	r0, r1
	t24 = t20 ^ y18;
     216:	4044      	eors	r4, r0
     218:	4065      	eors	r5, r4

	t25 = t21 ^ t22;
     21a:	0039      	movs	r1, r7
     21c:	4059      	eors	r1, r3
     21e:	468c      	mov	ip, r1
	t26 = t21 & t23;
     220:	0039      	movs	r1, r7
     222:	4011      	ands	r1, r2
     224:	4688      	mov	r8, r1
	t27 = t24 ^ t26;
     226:	4069      	eors	r1, r5
     228:	000f      	movs	r7, r1
	t28 = t25 & t27;
     22a:	4661      	mov	r1, ip
     22c:	4039      	ands	r1, r7
     22e:	000c      	movs	r4, r1
	t29 = t28 ^ t22;
     230:	405c      	eors	r4, r3
	t30 = t23 ^ t24;
     232:	0011      	movs	r1, r2
     234:	4069      	eors	r1, r5
     236:	4689      	mov	r9, r1
	t31 = t22 ^ t26;
     238:	4641      	mov	r1, r8
     23a:	404b      	eors	r3, r1
	t32 = t31 & t30;
     23c:	4649      	mov	r1, r9
     23e:	400b      	ands	r3, r1
	t33 = t32 ^ t24;
     240:	406b      	eors	r3, r5
	t34 = t23 ^ t33;
	t35 = t27 ^ t33;
     242:	0039      	movs	r1, r7
     244:	4059      	eors	r1, r3
	t36 = t24 & t35;
     246:	400d      	ands	r5, r1
	t34 = t23 ^ t33;
     248:	405a      	eors	r2, r3
	t37 = t36 ^ t34;
     24a:	406a      	eors	r2, r5
	t38 = t27 ^ t36;
     24c:	406f      	eors	r7, r5
	t39 = t29 & t38;
     24e:	4027      	ands	r7, r4
	t40 = t25 ^ t39;
     250:	4661      	mov	r1, ip
     252:	404f      	eors	r7, r1

	t41 = t40 ^ t37;
     254:	0015      	movs	r5, r2
     256:	407d      	eors	r5, r7
     258:	0028      	movs	r0, r5
	t42 = t29 ^ t33;
     25a:	0021      	movs	r1, r4
     25c:	4059      	eors	r1, r3
     25e:	000d      	movs	r5, r1
	t43 = t29 ^ t40;
     260:	0021      	movs	r1, r4
     262:	4079      	eors	r1, r7
     264:	4689      	mov	r9, r1
	t44 = t33 ^ t37;
     266:	0019      	movs	r1, r3
     268:	4051      	eors	r1, r2
     26a:	468c      	mov	ip, r1
	t45 = t42 ^ t41;
     26c:	900c      	str	r0, [sp, #48]	; 0x30
     26e:	4068      	eors	r0, r5
     270:	4680      	mov	r8, r0
	z0 = t44 & y15;
	z1 = t37 & y6;
	z2 = t33 & x7;
     272:	9900      	ldr	r1, [sp, #0]
     274:	6808      	ldr	r0, [r1, #0]
     276:	4018      	ands	r0, r3
     278:	900d      	str	r0, [sp, #52]	; 0x34
	z3 = t43 & y16;
     27a:	4649      	mov	r1, r9
     27c:	400e      	ands	r6, r1
     27e:	960e      	str	r6, [sp, #56]	; 0x38
	z4 = t40 & y1;
     280:	9801      	ldr	r0, [sp, #4]
     282:	4038      	ands	r0, r7
     284:	9001      	str	r0, [sp, #4]
	z5 = t29 & y7;
     286:	4659      	mov	r1, fp
     288:	4021      	ands	r1, r4
     28a:	468b      	mov	fp, r1
	z6 = t42 & y11;
	z7 = t45 & y17;
     28c:	9811      	ldr	r0, [sp, #68]	; 0x44
     28e:	4641      	mov	r1, r8
     290:	4008      	ands	r0, r1
	z8 = t41 & y10;
	z9 = t44 & y12;
	z10 = t37 & y3;
     292:	9e09      	ldr	r6, [sp, #36]	; 0x24
     294:	4016      	ands	r6, r2
     296:	9609      	str	r6, [sp, #36]	; 0x24
	z11 = t33 & y4;
	z12 = t43 & y13;
     298:	4651      	mov	r1, sl
     29a:	464e      	mov	r6, r9
     29c:	4031      	ands	r1, r6
     29e:	468a      	mov	sl, r1
	z13 = t40 & y5;
	z14 = t29 & y2;
	z15 = t42 & y9;
	z16 = t45 & y14;
     2a0:	9e04      	ldr	r6, [sp, #16]
     2a2:	4641      	mov	r1, r8
     2a4:	400e      	ands	r6, r1
     2a6:	46b0      	mov	r8, r6
	z15 = t42 & y9;
     2a8:	9e02      	ldr	r6, [sp, #8]
     2aa:	402e      	ands	r6, r5
	z17 = t41 & y8;

	/*
	 * Bottom linear transformation.
	 */
	t46 = z15 ^ z16;
     2ac:	4641      	mov	r1, r8
     2ae:	404e      	eors	r6, r1
	z13 = t40 & y5;
     2b0:	9908      	ldr	r1, [sp, #32]
     2b2:	400f      	ands	r7, r1
	t47 = z10 ^ z11;
	t48 = z5 ^ z13;
     2b4:	4659      	mov	r1, fp
     2b6:	4079      	eors	r1, r7
     2b8:	9108      	str	r1, [sp, #32]
	z0 = t44 & y15;
     2ba:	9f10      	ldr	r7, [sp, #64]	; 0x40
     2bc:	4661      	mov	r1, ip
     2be:	400f      	ands	r7, r1
	t49 = z9 ^ z10;
	t50 = z2 ^ z12;
	t51 = z2 ^ z5;
	t52 = z7 ^ z8;
	t53 = z0 ^ z3;
     2c0:	990e      	ldr	r1, [sp, #56]	; 0x38
     2c2:	4079      	eors	r1, r7
     2c4:	9102      	str	r1, [sp, #8]
	t50 = z2 ^ z12;
     2c6:	990d      	ldr	r1, [sp, #52]	; 0x34
     2c8:	4657      	mov	r7, sl
     2ca:	4079      	eors	r1, r7
	t54 = z6 ^ z7;
	t55 = z16 ^ z17;
	t56 = z12 ^ t48;
	t57 = t50 ^ t53;
     2cc:	9f02      	ldr	r7, [sp, #8]
     2ce:	4079      	eors	r1, r7
     2d0:	4689      	mov	r9, r1
	t58 = z4 ^ t46;
     2d2:	9604      	str	r6, [sp, #16]
     2d4:	9f01      	ldr	r7, [sp, #4]
     2d6:	407e      	eors	r6, r7
     2d8:	0037      	movs	r7, r6
	z6 = t42 & y11;
     2da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
     2dc:	4035      	ands	r5, r6
	t59 = z3 ^ t54;
     2de:	9e0e      	ldr	r6, [sp, #56]	; 0x38
     2e0:	406e      	eors	r6, r5
     2e2:	4046      	eors	r6, r0
	z8 = t41 & y10;
     2e4:	9d03      	ldr	r5, [sp, #12]
     2e6:	990c      	ldr	r1, [sp, #48]	; 0x30
     2e8:	400d      	ands	r5, r1
	t52 = z7 ^ z8;
     2ea:	4045      	eors	r5, r0
	t60 = t46 ^ t57;
	t61 = z14 ^ t57;
	t62 = t52 ^ t58;
     2ec:	0039      	movs	r1, r7
     2ee:	407d      	eors	r5, r7
     2f0:	9503      	str	r5, [sp, #12]
	z9 = t44 & y12;
     2f2:	9806      	ldr	r0, [sp, #24]
     2f4:	4667      	mov	r7, ip
     2f6:	4038      	ands	r0, r7
	t49 = z9 ^ z10;
     2f8:	0005      	movs	r5, r0
     2fa:	9809      	ldr	r0, [sp, #36]	; 0x24
     2fc:	4045      	eors	r5, r0
     2fe:	46ac      	mov	ip, r5
	t63 = t49 ^ t58;
     300:	000d      	movs	r5, r1
     302:	4667      	mov	r7, ip
     304:	407d      	eors	r5, r7
     306:	46ac      	mov	ip, r5
	t64 = z4 ^ t59;
     308:	9f01      	ldr	r7, [sp, #4]
     30a:	4077      	eors	r7, r6
     30c:	0039      	movs	r1, r7
	z14 = t29 & y2;
     30e:	9d07      	ldr	r5, [sp, #28]
     310:	402c      	ands	r4, r5
	t61 = z14 ^ t57;
     312:	464f      	mov	r7, r9
     314:	407c      	eors	r4, r7
	t65 = t61 ^ t62;
     316:	9d03      	ldr	r5, [sp, #12]
     318:	406c      	eors	r4, r5
	z1 = t37 & y6;
     31a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
     31c:	402a      	ands	r2, r5
	t66 = z1 ^ t63;
     31e:	4667      	mov	r7, ip
     320:	407a      	eors	r2, r7
	s0 = t59 ^ t63;
	s6 = t56 ^ ~t62;
	s7 = t48 ^ ~t60;
	t67 = t64 ^ t65;
	s3 = t53 ^ t66;
     322:	9f02      	ldr	r7, [sp, #8]
     324:	4057      	eors	r7, r2
	s0 = t59 ^ t63;
     326:	4665      	mov	r5, ip
     328:	406e      	eors	r6, r5
	s4 = t51 ^ t66;
	s5 = t47 ^ t65;
	s1 = t64 ^ ~s3;
	s2 = t55 ^ ~t67;

	q[7] = s0;
     32a:	9d00      	ldr	r5, [sp, #0]
     32c:	61ee      	str	r6, [r5, #28]
	s1 = t64 ^ ~s3;
     32e:	43fe      	mvns	r6, r7
     330:	404e      	eors	r6, r1
	q[6] = s1;
     332:	61ae      	str	r6, [r5, #24]
	z17 = t41 & y8;
     334:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
     338:	402e      	ands	r6, r5
	t55 = z16 ^ z17;
     33a:	4645      	mov	r5, r8
     33c:	406e      	eors	r6, r5
	t67 = t64 ^ t65;
     33e:	4061      	eors	r1, r4
	s2 = t55 ^ ~t67;
     340:	43c9      	mvns	r1, r1
     342:	404e      	eors	r6, r1
	q[5] = s2;
     344:	9900      	ldr	r1, [sp, #0]
     346:	614e      	str	r6, [r1, #20]
	q[4] = s3;
     348:	000e      	movs	r6, r1
     34a:	610f      	str	r7, [r1, #16]
	t51 = z2 ^ z5;
     34c:	990d      	ldr	r1, [sp, #52]	; 0x34
     34e:	465d      	mov	r5, fp
     350:	4069      	eors	r1, r5
	s4 = t51 ^ t66;
     352:	404a      	eors	r2, r1
	q[3] = s4;
     354:	60f2      	str	r2, [r6, #12]
	z11 = t33 & y4;
     356:	9a05      	ldr	r2, [sp, #20]
     358:	4013      	ands	r3, r2
	t47 = z10 ^ z11;
     35a:	4043      	eors	r3, r0
	s5 = t47 ^ t65;
     35c:	405c      	eors	r4, r3
	q[2] = s5;
     35e:	60b4      	str	r4, [r6, #8]
	t56 = z12 ^ t48;
     360:	4653      	mov	r3, sl
     362:	9908      	ldr	r1, [sp, #32]
     364:	404b      	eors	r3, r1
	s6 = t56 ^ ~t62;
     366:	9803      	ldr	r0, [sp, #12]
     368:	43c5      	mvns	r5, r0
     36a:	405d      	eors	r5, r3
	q[1] = s6;
     36c:	6075      	str	r5, [r6, #4]
	t60 = t46 ^ t57;
     36e:	9b04      	ldr	r3, [sp, #16]
     370:	464a      	mov	r2, r9
     372:	4053      	eors	r3, r2
	s7 = t48 ^ ~t60;
     374:	43db      	mvns	r3, r3
     376:	404b      	eors	r3, r1
	q[0] = s7;
     378:	6033      	str	r3, [r6, #0]
}
     37a:	b013      	add	sp, #76	; 0x4c
     37c:	bc3c      	pop	{r2, r3, r4, r5}
     37e:	4690      	mov	r8, r2
     380:	4699      	mov	r9, r3
     382:	46a2      	mov	sl, r4
     384:	46ab      	mov	fp, r5
     386:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000388 <br_aes_ct_ortho>:

/* see inner.h */
void
br_aes_ct_ortho(uint32_t *q)
{
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	46de      	mov	lr, fp
     38c:	4657      	mov	r7, sl
     38e:	464e      	mov	r6, r9
     390:	4645      	mov	r5, r8
     392:	b5e0      	push	{r5, r6, r7, lr}
     394:	b083      	sub	sp, #12

#define SWAP2(x, y)   SWAPN(0x55555555, 0xAAAAAAAA, 1, x, y)
#define SWAP4(x, y)   SWAPN(0x33333333, 0xCCCCCCCC, 2, x, y)
#define SWAP8(x, y)   SWAPN(0x0F0F0F0F, 0xF0F0F0F0, 4, x, y)

	SWAP2(q[0], q[1]);
     396:	6803      	ldr	r3, [r0, #0]
     398:	6842      	ldr	r2, [r0, #4]
     39a:	0054      	lsls	r4, r2, #1
     39c:	495f      	ldr	r1, [pc, #380]	; (51c <br_aes_ct_ortho+0x194>)
     39e:	4688      	mov	r8, r1
     3a0:	400c      	ands	r4, r1
     3a2:	495f      	ldr	r1, [pc, #380]	; (520 <br_aes_ct_ortho+0x198>)
     3a4:	4689      	mov	r9, r1
     3a6:	4019      	ands	r1, r3
     3a8:	430c      	orrs	r4, r1
     3aa:	0859      	lsrs	r1, r3, #1
     3ac:	464b      	mov	r3, r9
     3ae:	4019      	ands	r1, r3
     3b0:	4643      	mov	r3, r8
     3b2:	401a      	ands	r2, r3
     3b4:	4311      	orrs	r1, r2
	SWAP2(q[2], q[3]);
     3b6:	6883      	ldr	r3, [r0, #8]
     3b8:	9000      	str	r0, [sp, #0]
     3ba:	68c5      	ldr	r5, [r0, #12]
     3bc:	006a      	lsls	r2, r5, #1
     3be:	4640      	mov	r0, r8
     3c0:	4002      	ands	r2, r0
     3c2:	464e      	mov	r6, r9
     3c4:	401e      	ands	r6, r3
     3c6:	4332      	orrs	r2, r6
     3c8:	4694      	mov	ip, r2
     3ca:	085f      	lsrs	r7, r3, #1
     3cc:	464b      	mov	r3, r9
     3ce:	401f      	ands	r7, r3
     3d0:	4643      	mov	r3, r8
     3d2:	4005      	ands	r5, r0
     3d4:	432f      	orrs	r7, r5
	SWAP2(q[4], q[5]);
     3d6:	9800      	ldr	r0, [sp, #0]
     3d8:	6905      	ldr	r5, [r0, #16]
     3da:	6942      	ldr	r2, [r0, #20]
     3dc:	0056      	lsls	r6, r2, #1
     3de:	401e      	ands	r6, r3
     3e0:	464b      	mov	r3, r9
     3e2:	402b      	ands	r3, r5
     3e4:	431e      	orrs	r6, r3
     3e6:	086b      	lsrs	r3, r5, #1
     3e8:	4648      	mov	r0, r9
     3ea:	4003      	ands	r3, r0
     3ec:	4640      	mov	r0, r8
     3ee:	4002      	ands	r2, r0
     3f0:	4313      	orrs	r3, r2
	SWAP2(q[6], q[7]);
     3f2:	9800      	ldr	r0, [sp, #0]
     3f4:	6985      	ldr	r5, [r0, #24]
     3f6:	69c2      	ldr	r2, [r0, #28]
     3f8:	0052      	lsls	r2, r2, #1
     3fa:	4640      	mov	r0, r8
     3fc:	4010      	ands	r0, r2
     3fe:	464a      	mov	r2, r9
     400:	402a      	ands	r2, r5
     402:	4310      	orrs	r0, r2
     404:	4682      	mov	sl, r0
     406:	086d      	lsrs	r5, r5, #1
     408:	464a      	mov	r2, r9
     40a:	4015      	ands	r5, r2
     40c:	4642      	mov	r2, r8
     40e:	9800      	ldr	r0, [sp, #0]
     410:	69c0      	ldr	r0, [r0, #28]
     412:	4002      	ands	r2, r0
     414:	4315      	orrs	r5, r2
     416:	46a8      	mov	r8, r5

	SWAP4(q[0], q[2]);
     418:	4662      	mov	r2, ip
     41a:	0095      	lsls	r5, r2, #2
     41c:	4a41      	ldr	r2, [pc, #260]	; (524 <br_aes_ct_ortho+0x19c>)
     41e:	4691      	mov	r9, r2
     420:	4015      	ands	r5, r2
     422:	4a41      	ldr	r2, [pc, #260]	; (528 <br_aes_ct_ortho+0x1a0>)
     424:	4693      	mov	fp, r2
     426:	4022      	ands	r2, r4
     428:	4315      	orrs	r5, r2
     42a:	08a4      	lsrs	r4, r4, #2
     42c:	465a      	mov	r2, fp
     42e:	4014      	ands	r4, r2
     430:	4662      	mov	r2, ip
     432:	4648      	mov	r0, r9
     434:	4002      	ands	r2, r0
     436:	4314      	orrs	r4, r2
	SWAP4(q[1], q[3]);
     438:	00ba      	lsls	r2, r7, #2
     43a:	4002      	ands	r2, r0
     43c:	4658      	mov	r0, fp
     43e:	4008      	ands	r0, r1
     440:	4310      	orrs	r0, r2
     442:	4684      	mov	ip, r0
     444:	088a      	lsrs	r2, r1, #2
     446:	4659      	mov	r1, fp
     448:	400a      	ands	r2, r1
     44a:	4649      	mov	r1, r9
     44c:	400f      	ands	r7, r1
     44e:	433a      	orrs	r2, r7
     450:	9201      	str	r2, [sp, #4]
	SWAP4(q[4], q[6]);
     452:	4651      	mov	r1, sl
     454:	0089      	lsls	r1, r1, #2
     456:	4648      	mov	r0, r9
     458:	4001      	ands	r1, r0
     45a:	465f      	mov	r7, fp
     45c:	4037      	ands	r7, r6
     45e:	4339      	orrs	r1, r7
     460:	08b6      	lsrs	r6, r6, #2
     462:	4658      	mov	r0, fp
     464:	4006      	ands	r6, r0
     466:	4657      	mov	r7, sl
     468:	4648      	mov	r0, r9
     46a:	4007      	ands	r7, r0
     46c:	433e      	orrs	r6, r7
	SWAP4(q[5], q[7]);
     46e:	4640      	mov	r0, r8
     470:	0087      	lsls	r7, r0, #2
     472:	4648      	mov	r0, r9
     474:	4007      	ands	r7, r0
     476:	4658      	mov	r0, fp
     478:	4018      	ands	r0, r3
     47a:	4307      	orrs	r7, r0
     47c:	089b      	lsrs	r3, r3, #2
     47e:	4658      	mov	r0, fp
     480:	4003      	ands	r3, r0
     482:	4640      	mov	r0, r8
     484:	464a      	mov	r2, r9
     486:	4010      	ands	r0, r2
     488:	4318      	orrs	r0, r3
     48a:	4683      	mov	fp, r0

	SWAP8(q[0], q[4]);
     48c:	010b      	lsls	r3, r1, #4
     48e:	4699      	mov	r9, r3
     490:	4b26      	ldr	r3, [pc, #152]	; (52c <br_aes_ct_ortho+0x1a4>)
     492:	4648      	mov	r0, r9
     494:	4018      	ands	r0, r3
     496:	4681      	mov	r9, r0
     498:	4a25      	ldr	r2, [pc, #148]	; (530 <br_aes_ct_ortho+0x1a8>)
     49a:	4690      	mov	r8, r2
     49c:	0010      	movs	r0, r2
     49e:	4028      	ands	r0, r5
     4a0:	4682      	mov	sl, r0
     4a2:	4648      	mov	r0, r9
     4a4:	4652      	mov	r2, sl
     4a6:	4310      	orrs	r0, r2
     4a8:	0002      	movs	r2, r0
     4aa:	9800      	ldr	r0, [sp, #0]
     4ac:	6002      	str	r2, [r0, #0]
     4ae:	092d      	lsrs	r5, r5, #4
     4b0:	4642      	mov	r2, r8
     4b2:	4015      	ands	r5, r2
     4b4:	4019      	ands	r1, r3
     4b6:	4329      	orrs	r1, r5
     4b8:	6101      	str	r1, [r0, #16]
	SWAP8(q[1], q[5]);
     4ba:	0139      	lsls	r1, r7, #4
     4bc:	4019      	ands	r1, r3
     4be:	4665      	mov	r5, ip
     4c0:	4642      	mov	r2, r8
     4c2:	4015      	ands	r5, r2
     4c4:	4329      	orrs	r1, r5
     4c6:	6041      	str	r1, [r0, #4]
     4c8:	4662      	mov	r2, ip
     4ca:	0911      	lsrs	r1, r2, #4
     4cc:	4642      	mov	r2, r8
     4ce:	4011      	ands	r1, r2
     4d0:	401f      	ands	r7, r3
     4d2:	430f      	orrs	r7, r1
     4d4:	6147      	str	r7, [r0, #20]
	SWAP8(q[2], q[6]);
     4d6:	0131      	lsls	r1, r6, #4
     4d8:	4019      	ands	r1, r3
     4da:	4645      	mov	r5, r8
     4dc:	4025      	ands	r5, r4
     4de:	4329      	orrs	r1, r5
     4e0:	6081      	str	r1, [r0, #8]
     4e2:	0924      	lsrs	r4, r4, #4
     4e4:	4642      	mov	r2, r8
     4e6:	4014      	ands	r4, r2
     4e8:	401e      	ands	r6, r3
     4ea:	4326      	orrs	r6, r4
     4ec:	6186      	str	r6, [r0, #24]
	SWAP8(q[3], q[7]);
     4ee:	465a      	mov	r2, fp
     4f0:	0111      	lsls	r1, r2, #4
     4f2:	4019      	ands	r1, r3
     4f4:	4644      	mov	r4, r8
     4f6:	9d01      	ldr	r5, [sp, #4]
     4f8:	402c      	ands	r4, r5
     4fa:	4321      	orrs	r1, r4
     4fc:	60c1      	str	r1, [r0, #12]
     4fe:	092a      	lsrs	r2, r5, #4
     500:	4641      	mov	r1, r8
     502:	400a      	ands	r2, r1
     504:	4659      	mov	r1, fp
     506:	400b      	ands	r3, r1
     508:	4313      	orrs	r3, r2
     50a:	61c3      	str	r3, [r0, #28]
}
     50c:	b003      	add	sp, #12
     50e:	bc3c      	pop	{r2, r3, r4, r5}
     510:	4690      	mov	r8, r2
     512:	4699      	mov	r9, r3
     514:	46a2      	mov	sl, r4
     516:	46ab      	mov	fp, r5
     518:	bdf0      	pop	{r4, r5, r6, r7, pc}
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	aaaaaaaa 	.word	0xaaaaaaaa
     520:	55555555 	.word	0x55555555
     524:	cccccccc 	.word	0xcccccccc
     528:	33333333 	.word	0x33333333
     52c:	f0f0f0f0 	.word	0xf0f0f0f0
     530:	0f0f0f0f 	.word	0x0f0f0f0f

00000534 <sub_word>:
	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
};

static uint32_t
sub_word(uint32_t x)
{
     534:	b510      	push	{r4, lr}
     536:	b088      	sub	sp, #32
     538:	2300      	movs	r3, #0
	uint32_t q[8];
	int i;

	for (i = 0; i < 8; i ++) {
		q[i] = x;
     53a:	466a      	mov	r2, sp
     53c:	5098      	str	r0, [r3, r2]
     53e:	3304      	adds	r3, #4
	for (i = 0; i < 8; i ++) {
     540:	2b20      	cmp	r3, #32
     542:	d1fa      	bne.n	53a <sub_word+0x6>
	}
	br_aes_ct_ortho(q);
     544:	4668      	mov	r0, sp
     546:	4c05      	ldr	r4, [pc, #20]	; (55c <sub_word+0x28>)
     548:	47a0      	blx	r4
	br_aes_ct_bitslice_Sbox(q);
     54a:	4668      	mov	r0, sp
     54c:	4b04      	ldr	r3, [pc, #16]	; (560 <sub_word+0x2c>)
     54e:	4798      	blx	r3
	br_aes_ct_ortho(q);
     550:	4668      	mov	r0, sp
     552:	47a0      	blx	r4
	return q[0];
}
     554:	9800      	ldr	r0, [sp, #0]
     556:	b008      	add	sp, #32
     558:	bd10      	pop	{r4, pc}
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	00000389 	.word	0x00000389
     560:	00000115 	.word	0x00000115

00000564 <br_aes_ct_keysched>:

/* see inner.h */
unsigned
br_aes_ct_keysched(uint32_t *comp_skey, const void *key, size_t key_len)
{
     564:	b5f0      	push	{r4, r5, r6, r7, lr}
     566:	46de      	mov	lr, fp
     568:	4657      	mov	r7, sl
     56a:	464e      	mov	r6, r9
     56c:	4645      	mov	r5, r8
     56e:	b5e0      	push	{r5, r6, r7, lr}
     570:	b0fb      	sub	sp, #492	; 0x1ec
     572:	9001      	str	r0, [sp, #4]
	unsigned num_rounds;
	int i, j, k, nk, nkf;
	uint32_t tmp;
	uint32_t skey[120];

	switch (key_len) {
     574:	2a18      	cmp	r2, #24
     576:	d100      	bne.n	57a <br_aes_ct_keysched+0x16>
     578:	e07e      	b.n	678 <br_aes_ct_keysched+0x114>
     57a:	2a20      	cmp	r2, #32
     57c:	d004      	beq.n	588 <br_aes_ct_keysched+0x24>
     57e:	2a10      	cmp	r2, #16
     580:	d02c      	beq.n	5dc <br_aes_ct_keysched+0x78>
	case 32:
		num_rounds = 14;
		break;
	default:
		/* abort(); */
		return 0;
     582:	2300      	movs	r3, #0
     584:	9300      	str	r3, [sp, #0]
     586:	e06f      	b.n	668 <br_aes_ct_keysched+0x104>
		num_rounds = 14;
     588:	230e      	movs	r3, #14
     58a:	9300      	str	r3, [sp, #0]
	}
	nk = (int)(key_len >> 2);
     58c:	0897      	lsrs	r7, r2, #2
	nkf = (int)((num_rounds + 1) << 2);
     58e:	9b00      	ldr	r3, [sp, #0]
     590:	3301      	adds	r3, #1
     592:	009b      	lsls	r3, r3, #2
     594:	4698      	mov	r8, r3
     596:	ac02      	add	r4, sp, #8
		num_rounds = 10;
     598:	2500      	movs	r5, #0
#else
	const unsigned char *buf;

	buf = src;
	return (uint32_t)buf[0]
		| ((uint32_t)buf[1] << 8)
     59a:	7848      	ldrb	r0, [r1, #1]
     59c:	0200      	lsls	r0, r0, #8
		| ((uint32_t)buf[2] << 16)
     59e:	788b      	ldrb	r3, [r1, #2]
     5a0:	041b      	lsls	r3, r3, #16
     5a2:	4318      	orrs	r0, r3
	return (uint32_t)buf[0]
     5a4:	780b      	ldrb	r3, [r1, #0]
		| ((uint32_t)buf[2] << 16)
     5a6:	4318      	orrs	r0, r3
		| ((uint32_t)buf[3] << 24);
     5a8:	78cb      	ldrb	r3, [r1, #3]
     5aa:	061b      	lsls	r3, r3, #24
     5ac:	4318      	orrs	r0, r3
	tmp = 0;
	for (i = 0; i < nk; i ++) {
		tmp = br_dec32le((const unsigned char *)key + (i << 2));
		skey[(i << 1) + 0] = tmp;
     5ae:	6020      	str	r0, [r4, #0]
		skey[(i << 1) + 1] = tmp;
     5b0:	6060      	str	r0, [r4, #4]
	for (i = 0; i < nk; i ++) {
     5b2:	3501      	adds	r5, #1
     5b4:	3104      	adds	r1, #4
     5b6:	3408      	adds	r4, #8
     5b8:	42bd      	cmp	r5, r7
     5ba:	dbee      	blt.n	59a <br_aes_ct_keysched+0x36>
	}
	for (i = nk, j = 0, k = 0; i < nkf; i ++) {
     5bc:	4547      	cmp	r7, r8
     5be:	da35      	bge.n	62c <br_aes_ct_keysched+0xc8>
     5c0:	00fd      	lsls	r5, r7, #3
     5c2:	ab02      	add	r3, sp, #8
     5c4:	469c      	mov	ip, r3
     5c6:	4465      	add	r5, ip
     5c8:	4643      	mov	r3, r8
     5ca:	1bdb      	subs	r3, r3, r7
     5cc:	4699      	mov	r9, r3
     5ce:	2600      	movs	r6, #0
     5d0:	2300      	movs	r3, #0
     5d2:	469a      	mov	sl, r3
     5d4:	2400      	movs	r4, #0
		if (j == 0) {
			tmp = (tmp << 24) | (tmp >> 8);
			tmp = sub_word(tmp) ^ Rcon[k];
     5d6:	4b2a      	ldr	r3, [pc, #168]	; (680 <br_aes_ct_keysched+0x11c>)
     5d8:	469b      	mov	fp, r3
     5da:	e019      	b.n	610 <br_aes_ct_keysched+0xac>
	nkf = (int)((num_rounds + 1) << 2);
     5dc:	232c      	movs	r3, #44	; 0x2c
     5de:	4698      	mov	r8, r3
	nk = (int)(key_len >> 2);
     5e0:	2704      	movs	r7, #4
		num_rounds = 10;
     5e2:	3b22      	subs	r3, #34	; 0x22
     5e4:	9300      	str	r3, [sp, #0]
     5e6:	e7d6      	b.n	596 <br_aes_ct_keysched+0x32>
			tmp = (tmp << 24) | (tmp >> 8);
     5e8:	2308      	movs	r3, #8
     5ea:	41d8      	rors	r0, r3
			tmp = sub_word(tmp) ^ Rcon[k];
     5ec:	47d8      	blx	fp
     5ee:	4b25      	ldr	r3, [pc, #148]	; (684 <br_aes_ct_keysched+0x120>)
     5f0:	4652      	mov	r2, sl
     5f2:	5c9b      	ldrb	r3, [r3, r2]
     5f4:	4058      	eors	r0, r3
		} else if (nk > 6 && j == 4) {
			tmp = sub_word(tmp);
		}
		tmp ^= skey[(i - nk) << 1];
     5f6:	00f3      	lsls	r3, r6, #3
     5f8:	aa02      	add	r2, sp, #8
     5fa:	589b      	ldr	r3, [r3, r2]
     5fc:	4058      	eors	r0, r3
		skey[(i << 1) + 0] = tmp;
     5fe:	6028      	str	r0, [r5, #0]
		skey[(i << 1) + 1] = tmp;
     600:	6068      	str	r0, [r5, #4]
		if (++ j == nk) {
     602:	3401      	adds	r4, #1
     604:	42bc      	cmp	r4, r7
     606:	d00c      	beq.n	622 <br_aes_ct_keysched+0xbe>
     608:	3601      	adds	r6, #1
     60a:	3508      	adds	r5, #8
	for (i = nk, j = 0, k = 0; i < nkf; i ++) {
     60c:	454e      	cmp	r6, r9
     60e:	d00d      	beq.n	62c <br_aes_ct_keysched+0xc8>
		if (j == 0) {
     610:	2c00      	cmp	r4, #0
     612:	d0e9      	beq.n	5e8 <br_aes_ct_keysched+0x84>
		} else if (nk > 6 && j == 4) {
     614:	2f06      	cmp	r7, #6
     616:	ddee      	ble.n	5f6 <br_aes_ct_keysched+0x92>
     618:	2c04      	cmp	r4, #4
     61a:	d1ec      	bne.n	5f6 <br_aes_ct_keysched+0x92>
			tmp = sub_word(tmp);
     61c:	4b18      	ldr	r3, [pc, #96]	; (680 <br_aes_ct_keysched+0x11c>)
     61e:	4798      	blx	r3
     620:	e7e9      	b.n	5f6 <br_aes_ct_keysched+0x92>
			j = 0;
			k ++;
     622:	2301      	movs	r3, #1
     624:	469c      	mov	ip, r3
     626:	44e2      	add	sl, ip
			j = 0;
     628:	2400      	movs	r4, #0
     62a:	e7ed      	b.n	608 <br_aes_ct_keysched+0xa4>
     62c:	ac02      	add	r4, sp, #8
     62e:	0026      	movs	r6, r4
     630:	2500      	movs	r5, #0
		}
	}
	for (i = 0; i < nkf; i += 4) {
		br_aes_ct_ortho(skey + (i << 1));
     632:	4f15      	ldr	r7, [pc, #84]	; (688 <br_aes_ct_keysched+0x124>)
     634:	4644      	mov	r4, r8
     636:	46b0      	mov	r8, r6
     638:	0030      	movs	r0, r6
     63a:	47b8      	blx	r7
	for (i = 0; i < nkf; i += 4) {
     63c:	3504      	adds	r5, #4
     63e:	3620      	adds	r6, #32
     640:	42a5      	cmp	r5, r4
     642:	dbf9      	blt.n	638 <br_aes_ct_keysched+0xd4>
     644:	4643      	mov	r3, r8
     646:	46a0      	mov	r8, r4
     648:	001c      	movs	r4, r3
     64a:	9801      	ldr	r0, [sp, #4]
     64c:	2100      	movs	r1, #0
	}
	for (i = 0, j = 0; i < nkf; i ++, j += 2) {
		comp_skey[i] = (skey[j + 0] & 0x55555555)
     64e:	4e0f      	ldr	r6, [pc, #60]	; (68c <br_aes_ct_keysched+0x128>)
			| (skey[j + 1] & 0xAAAAAAAA);
     650:	4d0f      	ldr	r5, [pc, #60]	; (690 <br_aes_ct_keysched+0x12c>)
     652:	4647      	mov	r7, r8
		comp_skey[i] = (skey[j + 0] & 0x55555555)
     654:	6823      	ldr	r3, [r4, #0]
     656:	4033      	ands	r3, r6
			| (skey[j + 1] & 0xAAAAAAAA);
     658:	6862      	ldr	r2, [r4, #4]
     65a:	402a      	ands	r2, r5
     65c:	4313      	orrs	r3, r2
		comp_skey[i] = (skey[j + 0] & 0x55555555)
     65e:	c008      	stmia	r0!, {r3}
	for (i = 0, j = 0; i < nkf; i ++, j += 2) {
     660:	3101      	adds	r1, #1
     662:	3408      	adds	r4, #8
     664:	42b9      	cmp	r1, r7
     666:	dbf5      	blt.n	654 <br_aes_ct_keysched+0xf0>
	}
	return num_rounds;
}
     668:	9800      	ldr	r0, [sp, #0]
     66a:	b07b      	add	sp, #492	; 0x1ec
     66c:	bc3c      	pop	{r2, r3, r4, r5}
     66e:	4690      	mov	r8, r2
     670:	4699      	mov	r9, r3
     672:	46a2      	mov	sl, r4
     674:	46ab      	mov	fp, r5
     676:	bdf0      	pop	{r4, r5, r6, r7, pc}
		num_rounds = 12;
     678:	230c      	movs	r3, #12
     67a:	9300      	str	r3, [sp, #0]
     67c:	e786      	b.n	58c <br_aes_ct_keysched+0x28>
     67e:	46c0      	nop			; (mov r8, r8)
     680:	00000535 	.word	0x00000535
     684:	000028a0 	.word	0x000028a0
     688:	00000389 	.word	0x00000389
     68c:	55555555 	.word	0x55555555
     690:	aaaaaaaa 	.word	0xaaaaaaaa

00000694 <br_aes_ct_skey_expand>:

/* see inner.h */
void
br_aes_ct_skey_expand(uint32_t *skey,
	unsigned num_rounds, const uint32_t *comp_skey)
{
     694:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned u, v, n;

	n = (num_rounds + 1) << 2;
     696:	3101      	adds	r1, #1
     698:	0089      	lsls	r1, r1, #2
	for (u = 0, v = 0; u < n; u ++, v += 2) {
     69a:	d011      	beq.n	6c0 <br_aes_ct_skey_expand+0x2c>
     69c:	0004      	movs	r4, r0
     69e:	00c9      	lsls	r1, r1, #3
     6a0:	1840      	adds	r0, r0, r1
		uint32_t x, y;

		x = y = comp_skey[u];
		x &= 0x55555555;
     6a2:	4f08      	ldr	r7, [pc, #32]	; (6c4 <br_aes_ct_skey_expand+0x30>)
		skey[v + 0] = x | (x << 1);
		y &= 0xAAAAAAAA;
     6a4:	4e08      	ldr	r6, [pc, #32]	; (6c8 <br_aes_ct_skey_expand+0x34>)
		x = y = comp_skey[u];
     6a6:	ca08      	ldmia	r2!, {r3}
		x &= 0x55555555;
     6a8:	001d      	movs	r5, r3
     6aa:	403d      	ands	r5, r7
		skey[v + 0] = x | (x << 1);
     6ac:	0069      	lsls	r1, r5, #1
     6ae:	4329      	orrs	r1, r5
     6b0:	6021      	str	r1, [r4, #0]
		y &= 0xAAAAAAAA;
     6b2:	4033      	ands	r3, r6
		skey[v + 1] = y | (y >> 1);
     6b4:	0859      	lsrs	r1, r3, #1
     6b6:	430b      	orrs	r3, r1
     6b8:	6063      	str	r3, [r4, #4]
     6ba:	3408      	adds	r4, #8
	for (u = 0, v = 0; u < n; u ++, v += 2) {
     6bc:	4284      	cmp	r4, r0
     6be:	d1f2      	bne.n	6a6 <br_aes_ct_skey_expand+0x12>
	}
}
     6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	55555555 	.word	0x55555555
     6c8:	aaaaaaaa 	.word	0xaaaaaaaa

000006cc <xorbuf>:
	ctx->num_rounds = br_aes_ct_keysched(ctx->skey, key, len);
}

static void
xorbuf(void *dst, const void *src, size_t len)
{
     6cc:	b530      	push	{r4, r5, lr}
	unsigned char *d;
	const unsigned char *s;

	d = dst;
	s = src;
	while (len -- > 0) {
     6ce:	2a00      	cmp	r2, #0
     6d0:	d007      	beq.n	6e2 <xorbuf+0x16>
     6d2:	2300      	movs	r3, #0
		*d ++ ^= *s ++;
     6d4:	5ccc      	ldrb	r4, [r1, r3]
     6d6:	5cc5      	ldrb	r5, [r0, r3]
     6d8:	406c      	eors	r4, r5
     6da:	54c4      	strb	r4, [r0, r3]
     6dc:	3301      	adds	r3, #1
	while (len -- > 0) {
     6de:	4293      	cmp	r3, r2
     6e0:	d1f8      	bne.n	6d4 <xorbuf+0x8>
	}
}
     6e2:	bd30      	pop	{r4, r5, pc}

000006e4 <br_aes_ct_ctrcbc_init>:
{
     6e4:	b510      	push	{r4, lr}
     6e6:	0004      	movs	r4, r0
	ctx->vtable = &br_aes_ct_ctrcbc_vtable;
     6e8:	4b03      	ldr	r3, [pc, #12]	; (6f8 <br_aes_ct_ctrcbc_init+0x14>)
     6ea:	c008      	stmia	r0!, {r3}
	ctx->num_rounds = br_aes_ct_keysched(ctx->skey, key, len);
     6ec:	4b03      	ldr	r3, [pc, #12]	; (6fc <br_aes_ct_ctrcbc_init+0x18>)
     6ee:	4798      	blx	r3
     6f0:	23f4      	movs	r3, #244	; 0xf4
     6f2:	50e0      	str	r0, [r4, r3]
}
     6f4:	bd10      	pop	{r4, pc}
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	000028ac 	.word	0x000028ac
     6fc:	00000565 	.word	0x00000565

00000700 <br_aes_ct_ctrcbc_ctr>:

/* see bearssl_block.h */
void
br_aes_ct_ctrcbc_ctr(const br_aes_ct_ctrcbc_keys *ctx,
	void *ctr, void *data, size_t len)
{
     700:	b5f0      	push	{r4, r5, r6, r7, lr}
     702:	46de      	mov	lr, fp
     704:	4657      	mov	r7, sl
     706:	464e      	mov	r6, r9
     708:	4645      	mov	r5, r8
     70a:	b5e0      	push	{r5, r6, r7, lr}
     70c:	4c9f      	ldr	r4, [pc, #636]	; (98c <br_aes_ct_ctrcbc_ctr+0x28c>)
     70e:	44a5      	add	sp, r4
     710:	9003      	str	r0, [sp, #12]
     712:	468a      	mov	sl, r1
     714:	9201      	str	r2, [sp, #4]
     716:	4699      	mov	r9, r3
	unsigned char *buf;
	unsigned char *ivbuf;
	uint32_t iv0, iv1, iv2, iv3;
	uint32_t sk_exp[120];

	br_aes_ct_skey_expand(sk_exp, ctx->num_rounds, ctx->skey);
     718:	1d02      	adds	r2, r0, #4
     71a:	23f4      	movs	r3, #244	; 0xf4
     71c:	58c1      	ldr	r1, [r0, r3]
     71e:	a814      	add	r0, sp, #80	; 0x50
     720:	4b9b      	ldr	r3, [pc, #620]	; (990 <br_aes_ct_ctrcbc_ctr+0x290>)
     722:	4798      	blx	r3
	return ((const br_union_u32 *)src)->u;
#else
	const unsigned char *buf;

	buf = src;
	return ((uint32_t)buf[0] << 24)
     724:	4653      	mov	r3, sl
     726:	781b      	ldrb	r3, [r3, #0]
     728:	061b      	lsls	r3, r3, #24
		| ((uint32_t)buf[1] << 16)
     72a:	4651      	mov	r1, sl
     72c:	784a      	ldrb	r2, [r1, #1]
     72e:	0412      	lsls	r2, r2, #16
     730:	4313      	orrs	r3, r2
		| ((uint32_t)buf[2] << 8)
		| (uint32_t)buf[3];
     732:	78ca      	ldrb	r2, [r1, #3]
     734:	4313      	orrs	r3, r2
		| ((uint32_t)buf[2] << 8)
     736:	788a      	ldrb	r2, [r1, #2]
     738:	0212      	lsls	r2, r2, #8
		| (uint32_t)buf[3];
     73a:	4313      	orrs	r3, r2
     73c:	001f      	movs	r7, r3
	return ((uint32_t)buf[0] << 24)
     73e:	790e      	ldrb	r6, [r1, #4]
     740:	0636      	lsls	r6, r6, #24
		| ((uint32_t)buf[1] << 16)
     742:	794b      	ldrb	r3, [r1, #5]
     744:	041b      	lsls	r3, r3, #16
     746:	431e      	orrs	r6, r3
		| (uint32_t)buf[3];
     748:	79cb      	ldrb	r3, [r1, #7]
     74a:	431e      	orrs	r6, r3
		| ((uint32_t)buf[2] << 8)
     74c:	798b      	ldrb	r3, [r1, #6]
     74e:	021b      	lsls	r3, r3, #8
		| (uint32_t)buf[3];
     750:	431e      	orrs	r6, r3
	return ((uint32_t)buf[0] << 24)
     752:	7a0d      	ldrb	r5, [r1, #8]
     754:	062d      	lsls	r5, r5, #24
		| ((uint32_t)buf[1] << 16)
     756:	7a4b      	ldrb	r3, [r1, #9]
     758:	041b      	lsls	r3, r3, #16
     75a:	431d      	orrs	r5, r3
		| (uint32_t)buf[3];
     75c:	7acb      	ldrb	r3, [r1, #11]
     75e:	431d      	orrs	r5, r3
		| ((uint32_t)buf[2] << 8)
     760:	7a8b      	ldrb	r3, [r1, #10]
     762:	021b      	lsls	r3, r3, #8
		| (uint32_t)buf[3];
     764:	431d      	orrs	r5, r3
		| ((uint32_t)buf[1] << 16)
     766:	7b4c      	ldrb	r4, [r1, #13]
     768:	0424      	lsls	r4, r4, #16
	return ((uint32_t)buf[0] << 24)
     76a:	7b0b      	ldrb	r3, [r1, #12]
     76c:	061b      	lsls	r3, r3, #24
		| (uint32_t)buf[3];
     76e:	431c      	orrs	r4, r3
     770:	7bcb      	ldrb	r3, [r1, #15]
     772:	431c      	orrs	r4, r3
		| ((uint32_t)buf[2] << 8)
     774:	7b8b      	ldrb	r3, [r1, #14]
     776:	021b      	lsls	r3, r3, #8
		| (uint32_t)buf[3];
     778:	431c      	orrs	r4, r3
	iv1 = br_dec32be(ivbuf +  4);
	iv2 = br_dec32be(ivbuf +  8);
	iv3 = br_dec32be(ivbuf + 12);

	buf = data;
	while (len > 0) {
     77a:	464b      	mov	r3, r9
     77c:	2b00      	cmp	r3, #0
     77e:	d100      	bne.n	782 <br_aes_ct_ctrcbc_ctr+0x82>
     780:	e0de      	b.n	940 <br_aes_ct_ctrcbc_ctr+0x240>
     782:	9b01      	ldr	r3, [sp, #4]
     784:	9302      	str	r3, [sp, #8]
			iv1 += carry;
			carry &= -(~(iv1 | -iv1) >> 31);
			iv0 += carry;
		}

		br_aes_ct_ortho(q);
     786:	4b83      	ldr	r3, [pc, #524]	; (994 <br_aes_ct_ctrcbc_ctr+0x294>)
     788:	4698      	mov	r8, r3

		if (len <= 32) {
			xorbuf(buf, tmp, len);
			break;
		}
		xorbuf(buf, tmp, 32);
     78a:	9701      	str	r7, [sp, #4]
 * Byte-swap a 32-bit integer.
 */
static inline uint32_t
br_swap32(uint32_t x)
{
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     78c:	9f01      	ldr	r7, [sp, #4]
     78e:	023b      	lsls	r3, r7, #8
     790:	4881      	ldr	r0, [pc, #516]	; (998 <br_aes_ct_ctrcbc_ctr+0x298>)
     792:	4003      	ands	r3, r0
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     794:	0a3a      	lsrs	r2, r7, #8
     796:	4981      	ldr	r1, [pc, #516]	; (99c <br_aes_ct_ctrcbc_ctr+0x29c>)
     798:	400a      	ands	r2, r1
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     79a:	4313      	orrs	r3, r2
	return (x << 16) | (x >> 16);
     79c:	2210      	movs	r2, #16
     79e:	41d3      	rors	r3, r2
		q[0] = br_swap32(iv0);
     7a0:	9304      	str	r3, [sp, #16]
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     7a2:	0233      	lsls	r3, r6, #8
     7a4:	4003      	ands	r3, r0
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     7a6:	0a37      	lsrs	r7, r6, #8
     7a8:	400f      	ands	r7, r1
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     7aa:	433b      	orrs	r3, r7
	return (x << 16) | (x >> 16);
     7ac:	41d3      	rors	r3, r2
		q[2] = br_swap32(iv1);
     7ae:	9306      	str	r3, [sp, #24]
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     7b0:	022b      	lsls	r3, r5, #8
     7b2:	4003      	ands	r3, r0
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     7b4:	0a2f      	lsrs	r7, r5, #8
     7b6:	400f      	ands	r7, r1
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     7b8:	433b      	orrs	r3, r7
	return (x << 16) | (x >> 16);
     7ba:	41d3      	rors	r3, r2
		q[4] = br_swap32(iv2);
     7bc:	9308      	str	r3, [sp, #32]
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     7be:	0223      	lsls	r3, r4, #8
     7c0:	4003      	ands	r3, r0
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     7c2:	0a27      	lsrs	r7, r4, #8
     7c4:	400f      	ands	r7, r1
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     7c6:	433b      	orrs	r3, r7
	return (x << 16) | (x >> 16);
     7c8:	41d3      	rors	r3, r2
		q[6] = br_swap32(iv3);
     7ca:	930a      	str	r3, [sp, #40]	; 0x28
		iv3 ++;
     7cc:	1c63      	adds	r3, r4, #1
     7ce:	469c      	mov	ip, r3
		carry = ~(iv3 | -iv3) >> 31;
     7d0:	0023      	movs	r3, r4
     7d2:	4667      	mov	r7, ip
     7d4:	43bb      	bics	r3, r7
     7d6:	0fdb      	lsrs	r3, r3, #31
     7d8:	469b      	mov	fp, r3
		iv2 += carry;
     7da:	445d      	add	r5, fp
		carry &= -(~(iv2 | -iv2) >> 31);
     7dc:	1e6b      	subs	r3, r5, #1
     7de:	43ab      	bics	r3, r5
     7e0:	17db      	asrs	r3, r3, #31
     7e2:	465f      	mov	r7, fp
     7e4:	403b      	ands	r3, r7
		iv1 += carry;
     7e6:	18f6      	adds	r6, r6, r3
		carry &= -(~(iv1 | -iv1) >> 31);
     7e8:	1e77      	subs	r7, r6, #1
     7ea:	43b7      	bics	r7, r6
     7ec:	17ff      	asrs	r7, r7, #31
     7ee:	403b      	ands	r3, r7
		iv0 += carry;
     7f0:	9f01      	ldr	r7, [sp, #4]
     7f2:	46bb      	mov	fp, r7
     7f4:	449b      	add	fp, r3
     7f6:	465b      	mov	r3, fp
     7f8:	465f      	mov	r7, fp
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     7fa:	021b      	lsls	r3, r3, #8
     7fc:	4003      	ands	r3, r0
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     7fe:	9701      	str	r7, [sp, #4]
     800:	0a3f      	lsrs	r7, r7, #8
     802:	400f      	ands	r7, r1
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     804:	433b      	orrs	r3, r7
	return (x << 16) | (x >> 16);
     806:	41d3      	rors	r3, r2
		q[1] = br_swap32(iv0);
     808:	9305      	str	r3, [sp, #20]
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     80a:	0233      	lsls	r3, r6, #8
     80c:	4003      	ands	r3, r0
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     80e:	0a37      	lsrs	r7, r6, #8
     810:	400f      	ands	r7, r1
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     812:	433b      	orrs	r3, r7
	return (x << 16) | (x >> 16);
     814:	41d3      	rors	r3, r2
		q[3] = br_swap32(iv1);
     816:	9307      	str	r3, [sp, #28]
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     818:	022b      	lsls	r3, r5, #8
     81a:	4003      	ands	r3, r0
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     81c:	0a2f      	lsrs	r7, r5, #8
     81e:	400f      	ands	r7, r1
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     820:	433b      	orrs	r3, r7
	return (x << 16) | (x >> 16);
     822:	41d3      	rors	r3, r2
		q[5] = br_swap32(iv2);
     824:	9309      	str	r3, [sp, #36]	; 0x24
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     826:	4663      	mov	r3, ip
     828:	021b      	lsls	r3, r3, #8
     82a:	4018      	ands	r0, r3
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     82c:	4663      	mov	r3, ip
     82e:	0a1b      	lsrs	r3, r3, #8
     830:	4019      	ands	r1, r3
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     832:	4308      	orrs	r0, r1
	return (x << 16) | (x >> 16);
     834:	41d0      	rors	r0, r2
		q[7] = br_swap32(iv3);
     836:	900b      	str	r0, [sp, #44]	; 0x2c
		if (len > 16) {
     838:	464b      	mov	r3, r9
     83a:	2b10      	cmp	r3, #16
     83c:	d978      	bls.n	930 <br_aes_ct_ctrcbc_ctr+0x230>
			iv3 ++;
     83e:	1ca3      	adds	r3, r4, #2
			carry = ~(iv3 | -iv3) >> 31;
     840:	3a12      	subs	r2, #18
     842:	1b14      	subs	r4, r2, r4
     844:	431c      	orrs	r4, r3
     846:	43e4      	mvns	r4, r4
     848:	0fe4      	lsrs	r4, r4, #31
			iv2 += carry;
     84a:	192d      	adds	r5, r5, r4
			carry &= -(~(iv2 | -iv2) >> 31);
     84c:	1e6a      	subs	r2, r5, #1
     84e:	43aa      	bics	r2, r5
     850:	17d2      	asrs	r2, r2, #31
     852:	4014      	ands	r4, r2
			iv1 += carry;
     854:	1936      	adds	r6, r6, r4
			carry &= -(~(iv1 | -iv1) >> 31);
     856:	1e72      	subs	r2, r6, #1
     858:	43b2      	bics	r2, r6
     85a:	17d2      	asrs	r2, r2, #31
     85c:	4014      	ands	r4, r2
			iv0 += carry;
     85e:	9a01      	ldr	r2, [sp, #4]
     860:	4693      	mov	fp, r2
     862:	44a3      	add	fp, r4
     864:	465a      	mov	r2, fp
     866:	9201      	str	r2, [sp, #4]
			iv3 ++;
     868:	001c      	movs	r4, r3
		br_aes_ct_ortho(q);
     86a:	a804      	add	r0, sp, #16
     86c:	47c0      	blx	r8
		br_aes_ct_bitslice_encrypt(ctx->num_rounds, sk_exp, q);
     86e:	23f4      	movs	r3, #244	; 0xf4
     870:	9a03      	ldr	r2, [sp, #12]
     872:	58d0      	ldr	r0, [r2, r3]
     874:	aa04      	add	r2, sp, #16
     876:	a914      	add	r1, sp, #80	; 0x50
     878:	4b49      	ldr	r3, [pc, #292]	; (9a0 <br_aes_ct_ctrcbc_ctr+0x2a0>)
     87a:	4798      	blx	r3
		br_aes_ct_ortho(q);
     87c:	a804      	add	r0, sp, #16
     87e:	47c0      	blx	r8
		br_enc32le(tmp, q[0]);
     880:	9a04      	ldr	r2, [sp, #16]
	buf[0] = (unsigned char)x;
     882:	ab0c      	add	r3, sp, #48	; 0x30
     884:	701a      	strb	r2, [r3, #0]
	buf[1] = (unsigned char)(x >> 8);
     886:	0a11      	lsrs	r1, r2, #8
     888:	7059      	strb	r1, [r3, #1]
	buf[2] = (unsigned char)(x >> 16);
     88a:	0c11      	lsrs	r1, r2, #16
     88c:	7099      	strb	r1, [r3, #2]
	buf[3] = (unsigned char)(x >> 24);
     88e:	0e12      	lsrs	r2, r2, #24
     890:	70da      	strb	r2, [r3, #3]
		br_enc32le(tmp + 4, q[2]);
     892:	9a06      	ldr	r2, [sp, #24]
	buf[0] = (unsigned char)x;
     894:	711a      	strb	r2, [r3, #4]
	buf[1] = (unsigned char)(x >> 8);
     896:	0a11      	lsrs	r1, r2, #8
     898:	7159      	strb	r1, [r3, #5]
	buf[2] = (unsigned char)(x >> 16);
     89a:	0c11      	lsrs	r1, r2, #16
     89c:	7199      	strb	r1, [r3, #6]
	buf[3] = (unsigned char)(x >> 24);
     89e:	0e12      	lsrs	r2, r2, #24
     8a0:	71da      	strb	r2, [r3, #7]
		br_enc32le(tmp + 8, q[4]);
     8a2:	9a08      	ldr	r2, [sp, #32]
	buf[0] = (unsigned char)x;
     8a4:	721a      	strb	r2, [r3, #8]
	buf[1] = (unsigned char)(x >> 8);
     8a6:	0a11      	lsrs	r1, r2, #8
     8a8:	7259      	strb	r1, [r3, #9]
	buf[2] = (unsigned char)(x >> 16);
     8aa:	0c11      	lsrs	r1, r2, #16
     8ac:	7299      	strb	r1, [r3, #10]
	buf[3] = (unsigned char)(x >> 24);
     8ae:	0e12      	lsrs	r2, r2, #24
     8b0:	72da      	strb	r2, [r3, #11]
		br_enc32le(tmp + 12, q[6]);
     8b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	buf[0] = (unsigned char)x;
     8b4:	731a      	strb	r2, [r3, #12]
	buf[1] = (unsigned char)(x >> 8);
     8b6:	0a11      	lsrs	r1, r2, #8
     8b8:	7359      	strb	r1, [r3, #13]
	buf[2] = (unsigned char)(x >> 16);
     8ba:	0c11      	lsrs	r1, r2, #16
     8bc:	7399      	strb	r1, [r3, #14]
	buf[3] = (unsigned char)(x >> 24);
     8be:	0e12      	lsrs	r2, r2, #24
     8c0:	73da      	strb	r2, [r3, #15]
		br_enc32le(tmp + 16, q[1]);
     8c2:	9a05      	ldr	r2, [sp, #20]
	buf[0] = (unsigned char)x;
     8c4:	741a      	strb	r2, [r3, #16]
	buf[1] = (unsigned char)(x >> 8);
     8c6:	0a11      	lsrs	r1, r2, #8
     8c8:	7459      	strb	r1, [r3, #17]
	buf[2] = (unsigned char)(x >> 16);
     8ca:	0c11      	lsrs	r1, r2, #16
     8cc:	7499      	strb	r1, [r3, #18]
	buf[3] = (unsigned char)(x >> 24);
     8ce:	0e12      	lsrs	r2, r2, #24
     8d0:	74da      	strb	r2, [r3, #19]
		br_enc32le(tmp + 20, q[3]);
     8d2:	9a07      	ldr	r2, [sp, #28]
	buf[0] = (unsigned char)x;
     8d4:	751a      	strb	r2, [r3, #20]
	buf[1] = (unsigned char)(x >> 8);
     8d6:	0a11      	lsrs	r1, r2, #8
     8d8:	7559      	strb	r1, [r3, #21]
	buf[2] = (unsigned char)(x >> 16);
     8da:	0c11      	lsrs	r1, r2, #16
     8dc:	7599      	strb	r1, [r3, #22]
	buf[3] = (unsigned char)(x >> 24);
     8de:	0e12      	lsrs	r2, r2, #24
     8e0:	75da      	strb	r2, [r3, #23]
		br_enc32le(tmp + 24, q[5]);
     8e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
	buf[0] = (unsigned char)x;
     8e4:	761a      	strb	r2, [r3, #24]
	buf[1] = (unsigned char)(x >> 8);
     8e6:	0a11      	lsrs	r1, r2, #8
     8e8:	7659      	strb	r1, [r3, #25]
	buf[2] = (unsigned char)(x >> 16);
     8ea:	0c11      	lsrs	r1, r2, #16
     8ec:	7699      	strb	r1, [r3, #26]
	buf[3] = (unsigned char)(x >> 24);
     8ee:	0e12      	lsrs	r2, r2, #24
     8f0:	76da      	strb	r2, [r3, #27]
		br_enc32le(tmp + 28, q[7]);
     8f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	buf[0] = (unsigned char)x;
     8f4:	771a      	strb	r2, [r3, #28]
	buf[1] = (unsigned char)(x >> 8);
     8f6:	0a11      	lsrs	r1, r2, #8
     8f8:	7759      	strb	r1, [r3, #29]
	buf[2] = (unsigned char)(x >> 16);
     8fa:	0c11      	lsrs	r1, r2, #16
     8fc:	7799      	strb	r1, [r3, #30]
	buf[3] = (unsigned char)(x >> 24);
     8fe:	0e12      	lsrs	r2, r2, #24
     900:	77da      	strb	r2, [r3, #31]
		if (len <= 32) {
     902:	464b      	mov	r3, r9
     904:	2b20      	cmp	r3, #32
     906:	d915      	bls.n	934 <br_aes_ct_ctrcbc_ctr+0x234>
		xorbuf(buf, tmp, 32);
     908:	2220      	movs	r2, #32
     90a:	a90c      	add	r1, sp, #48	; 0x30
     90c:	9b02      	ldr	r3, [sp, #8]
     90e:	469b      	mov	fp, r3
     910:	0018      	movs	r0, r3
     912:	4f24      	ldr	r7, [pc, #144]	; (9a4 <br_aes_ct_ctrcbc_ctr+0x2a4>)
     914:	47b8      	blx	r7
		buf += 32;
     916:	465b      	mov	r3, fp
     918:	3320      	adds	r3, #32
     91a:	9302      	str	r3, [sp, #8]
		len -= 32;
     91c:	2320      	movs	r3, #32
     91e:	425b      	negs	r3, r3
     920:	469c      	mov	ip, r3
     922:	44e1      	add	r9, ip
	while (len > 0) {
     924:	464b      	mov	r3, r9
     926:	2b00      	cmp	r3, #0
     928:	d000      	beq.n	92c <br_aes_ct_ctrcbc_ctr+0x22c>
     92a:	e72f      	b.n	78c <br_aes_ct_ctrcbc_ctr+0x8c>
     92c:	9f01      	ldr	r7, [sp, #4]
     92e:	e007      	b.n	940 <br_aes_ct_ctrcbc_ctr+0x240>
		iv3 ++;
     930:	4664      	mov	r4, ip
     932:	e79a      	b.n	86a <br_aes_ct_ctrcbc_ctr+0x16a>
     934:	9f01      	ldr	r7, [sp, #4]
			xorbuf(buf, tmp, len);
     936:	464a      	mov	r2, r9
     938:	a90c      	add	r1, sp, #48	; 0x30
     93a:	9802      	ldr	r0, [sp, #8]
     93c:	4b19      	ldr	r3, [pc, #100]	; (9a4 <br_aes_ct_ctrcbc_ctr+0x2a4>)
     93e:	4798      	blx	r3
	buf[0] = (unsigned char)(x >> 24);
     940:	0e3b      	lsrs	r3, r7, #24
     942:	4652      	mov	r2, sl
     944:	7013      	strb	r3, [r2, #0]
	buf[1] = (unsigned char)(x >> 16);
     946:	0c3b      	lsrs	r3, r7, #16
     948:	7053      	strb	r3, [r2, #1]
	buf[2] = (unsigned char)(x >> 8);
     94a:	0a3b      	lsrs	r3, r7, #8
     94c:	7093      	strb	r3, [r2, #2]
	buf[3] = (unsigned char)x;
     94e:	70d7      	strb	r7, [r2, #3]
	buf[0] = (unsigned char)(x >> 24);
     950:	0e33      	lsrs	r3, r6, #24
     952:	7113      	strb	r3, [r2, #4]
	buf[1] = (unsigned char)(x >> 16);
     954:	0c33      	lsrs	r3, r6, #16
     956:	7153      	strb	r3, [r2, #5]
	buf[2] = (unsigned char)(x >> 8);
     958:	0a33      	lsrs	r3, r6, #8
     95a:	7193      	strb	r3, [r2, #6]
	buf[3] = (unsigned char)x;
     95c:	71d6      	strb	r6, [r2, #7]
	buf[0] = (unsigned char)(x >> 24);
     95e:	0e2b      	lsrs	r3, r5, #24
     960:	7213      	strb	r3, [r2, #8]
	buf[1] = (unsigned char)(x >> 16);
     962:	0c2b      	lsrs	r3, r5, #16
     964:	7253      	strb	r3, [r2, #9]
	buf[2] = (unsigned char)(x >> 8);
     966:	0a2b      	lsrs	r3, r5, #8
     968:	7293      	strb	r3, [r2, #10]
	buf[3] = (unsigned char)x;
     96a:	72d5      	strb	r5, [r2, #11]
	buf[0] = (unsigned char)(x >> 24);
     96c:	0e23      	lsrs	r3, r4, #24
     96e:	7313      	strb	r3, [r2, #12]
	buf[1] = (unsigned char)(x >> 16);
     970:	0c23      	lsrs	r3, r4, #16
     972:	7353      	strb	r3, [r2, #13]
	buf[2] = (unsigned char)(x >> 8);
     974:	0a23      	lsrs	r3, r4, #8
     976:	7393      	strb	r3, [r2, #14]
	buf[3] = (unsigned char)x;
     978:	73d4      	strb	r4, [r2, #15]
	}
	br_enc32be(ivbuf +  0, iv0);
	br_enc32be(ivbuf +  4, iv1);
	br_enc32be(ivbuf +  8, iv2);
	br_enc32be(ivbuf + 12, iv3);
}
     97a:	238d      	movs	r3, #141	; 0x8d
     97c:	009b      	lsls	r3, r3, #2
     97e:	449d      	add	sp, r3
     980:	bc3c      	pop	{r2, r3, r4, r5}
     982:	4690      	mov	r8, r2
     984:	4699      	mov	r9, r3
     986:	46a2      	mov	sl, r4
     988:	46ab      	mov	fp, r5
     98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     98c:	fffffdcc 	.word	0xfffffdcc
     990:	00000695 	.word	0x00000695
     994:	00000389 	.word	0x00000389
     998:	ff00ff00 	.word	0xff00ff00
     99c:	00ff00ff 	.word	0x00ff00ff
     9a0:	000011b9 	.word	0x000011b9
     9a4:	000006cd 	.word	0x000006cd

000009a8 <br_aes_ct_ctrcbc_mac>:

/* see bearssl_block.h */
void
br_aes_ct_ctrcbc_mac(const br_aes_ct_ctrcbc_keys *ctx,
	void *cbcmac, const void *data, size_t len)
{
     9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9aa:	46de      	mov	lr, fp
     9ac:	4657      	mov	r7, sl
     9ae:	464e      	mov	r6, r9
     9b0:	4645      	mov	r5, r8
     9b2:	b5e0      	push	{r5, r6, r7, lr}
     9b4:	4c56      	ldr	r4, [pc, #344]	; (b10 <br_aes_ct_ctrcbc_mac+0x168>)
     9b6:	44a5      	add	sp, r4
     9b8:	4680      	mov	r8, r0
     9ba:	000d      	movs	r5, r1
     9bc:	0014      	movs	r4, r2
     9be:	001e      	movs	r6, r3
	const unsigned char *buf;
	uint32_t cm0, cm1, cm2, cm3;
	uint32_t q[8];
	uint32_t sk_exp[120];

	br_aes_ct_skey_expand(sk_exp, ctx->num_rounds, ctx->skey);
     9c0:	1d02      	adds	r2, r0, #4
     9c2:	23f4      	movs	r3, #244	; 0xf4
     9c4:	58c1      	ldr	r1, [r0, r3]
     9c6:	4668      	mov	r0, sp
     9c8:	4b52      	ldr	r3, [pc, #328]	; (b14 <br_aes_ct_ctrcbc_mac+0x16c>)
     9ca:	4798      	blx	r3
		| ((uint32_t)buf[1] << 8)
     9cc:	786b      	ldrb	r3, [r5, #1]
     9ce:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
     9d0:	78aa      	ldrb	r2, [r5, #2]
     9d2:	0412      	lsls	r2, r2, #16
     9d4:	4313      	orrs	r3, r2
	return (uint32_t)buf[0]
     9d6:	782a      	ldrb	r2, [r5, #0]
		| ((uint32_t)buf[2] << 16)
     9d8:	4313      	orrs	r3, r2
		| ((uint32_t)buf[3] << 24);
     9da:	78ea      	ldrb	r2, [r5, #3]
     9dc:	0612      	lsls	r2, r2, #24
     9de:	4313      	orrs	r3, r2
     9e0:	469c      	mov	ip, r3
		| ((uint32_t)buf[1] << 8)
     9e2:	796b      	ldrb	r3, [r5, #5]
     9e4:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
     9e6:	79a8      	ldrb	r0, [r5, #6]
     9e8:	0400      	lsls	r0, r0, #16
     9ea:	4303      	orrs	r3, r0
	return (uint32_t)buf[0]
     9ec:	7928      	ldrb	r0, [r5, #4]
		| ((uint32_t)buf[2] << 16)
     9ee:	4303      	orrs	r3, r0
		| ((uint32_t)buf[3] << 24);
     9f0:	79e8      	ldrb	r0, [r5, #7]
     9f2:	0600      	lsls	r0, r0, #24
     9f4:	4318      	orrs	r0, r3
		| ((uint32_t)buf[1] << 8)
     9f6:	7a6b      	ldrb	r3, [r5, #9]
     9f8:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
     9fa:	7aa9      	ldrb	r1, [r5, #10]
     9fc:	0409      	lsls	r1, r1, #16
     9fe:	430b      	orrs	r3, r1
	return (uint32_t)buf[0]
     a00:	7a29      	ldrb	r1, [r5, #8]
		| ((uint32_t)buf[2] << 16)
     a02:	430b      	orrs	r3, r1
		| ((uint32_t)buf[3] << 24);
     a04:	7ae9      	ldrb	r1, [r5, #11]
     a06:	0609      	lsls	r1, r1, #24
     a08:	4319      	orrs	r1, r3
		| ((uint32_t)buf[1] << 8)
     a0a:	7b6b      	ldrb	r3, [r5, #13]
     a0c:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
     a0e:	7baa      	ldrb	r2, [r5, #14]
     a10:	0412      	lsls	r2, r2, #16
     a12:	4313      	orrs	r3, r2
	return (uint32_t)buf[0]
     a14:	7b2a      	ldrb	r2, [r5, #12]
		| ((uint32_t)buf[2] << 16)
     a16:	4313      	orrs	r3, r2
		| ((uint32_t)buf[3] << 24);
     a18:	7bea      	ldrb	r2, [r5, #15]
     a1a:	0612      	lsls	r2, r2, #24
     a1c:	431a      	orrs	r2, r3
	buf = data;
	cm0 = br_dec32le((unsigned char *)cbcmac +  0);
	cm1 = br_dec32le((unsigned char *)cbcmac +  4);
	cm2 = br_dec32le((unsigned char *)cbcmac +  8);
	cm3 = br_dec32le((unsigned char *)cbcmac + 12);
	q[1] = 0;
     a1e:	2300      	movs	r3, #0
     a20:	9379      	str	r3, [sp, #484]	; 0x1e4
	q[3] = 0;
     a22:	937b      	str	r3, [sp, #492]	; 0x1ec
	q[5] = 0;
     a24:	937d      	str	r3, [sp, #500]	; 0x1f4
	q[7] = 0;
     a26:	937f      	str	r3, [sp, #508]	; 0x1fc

	while (len > 0) {
     a28:	2e00      	cmp	r6, #0
     a2a:	d047      	beq.n	abc <br_aes_ct_ctrcbc_mac+0x114>
		q[0] = cm0 ^ br_dec32le(buf +  0);
		q[2] = cm1 ^ br_dec32le(buf +  4);
		q[4] = cm2 ^ br_dec32le(buf +  8);
		q[6] = cm3 ^ br_dec32le(buf + 12);

		br_aes_ct_ortho(q);
     a2c:	4b3a      	ldr	r3, [pc, #232]	; (b18 <br_aes_ct_ctrcbc_mac+0x170>)
     a2e:	469b      	mov	fp, r3
		br_aes_ct_bitslice_encrypt(ctx->num_rounds, sk_exp, q);
     a30:	4b3a      	ldr	r3, [pc, #232]	; (b1c <br_aes_ct_ctrcbc_mac+0x174>)
     a32:	4699      	mov	r9, r3
		| ((uint32_t)buf[1] << 8)
     a34:	7863      	ldrb	r3, [r4, #1]
     a36:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
     a38:	78a7      	ldrb	r7, [r4, #2]
     a3a:	043f      	lsls	r7, r7, #16
     a3c:	433b      	orrs	r3, r7
	return (uint32_t)buf[0]
     a3e:	7827      	ldrb	r7, [r4, #0]
		| ((uint32_t)buf[2] << 16)
     a40:	433b      	orrs	r3, r7
		| ((uint32_t)buf[3] << 24);
     a42:	78e7      	ldrb	r7, [r4, #3]
     a44:	063f      	lsls	r7, r7, #24
     a46:	433b      	orrs	r3, r7
		q[0] = cm0 ^ br_dec32le(buf +  0);
     a48:	4667      	mov	r7, ip
     a4a:	407b      	eors	r3, r7
     a4c:	9378      	str	r3, [sp, #480]	; 0x1e0
		| ((uint32_t)buf[1] << 8)
     a4e:	7963      	ldrb	r3, [r4, #5]
     a50:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
     a52:	79a7      	ldrb	r7, [r4, #6]
     a54:	043f      	lsls	r7, r7, #16
     a56:	433b      	orrs	r3, r7
	return (uint32_t)buf[0]
     a58:	7927      	ldrb	r7, [r4, #4]
		| ((uint32_t)buf[2] << 16)
     a5a:	433b      	orrs	r3, r7
		| ((uint32_t)buf[3] << 24);
     a5c:	79e7      	ldrb	r7, [r4, #7]
     a5e:	063f      	lsls	r7, r7, #24
     a60:	433b      	orrs	r3, r7
		q[2] = cm1 ^ br_dec32le(buf +  4);
     a62:	4043      	eors	r3, r0
     a64:	937a      	str	r3, [sp, #488]	; 0x1e8
		| ((uint32_t)buf[1] << 8)
     a66:	7a63      	ldrb	r3, [r4, #9]
     a68:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
     a6a:	7aa0      	ldrb	r0, [r4, #10]
     a6c:	0400      	lsls	r0, r0, #16
     a6e:	4303      	orrs	r3, r0
	return (uint32_t)buf[0]
     a70:	7a20      	ldrb	r0, [r4, #8]
		| ((uint32_t)buf[2] << 16)
     a72:	4303      	orrs	r3, r0
		| ((uint32_t)buf[3] << 24);
     a74:	7ae0      	ldrb	r0, [r4, #11]
     a76:	0600      	lsls	r0, r0, #24
     a78:	4303      	orrs	r3, r0
		q[4] = cm2 ^ br_dec32le(buf +  8);
     a7a:	404b      	eors	r3, r1
     a7c:	937c      	str	r3, [sp, #496]	; 0x1f0
		| ((uint32_t)buf[1] << 8)
     a7e:	7b63      	ldrb	r3, [r4, #13]
     a80:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
     a82:	7ba1      	ldrb	r1, [r4, #14]
     a84:	0409      	lsls	r1, r1, #16
     a86:	430b      	orrs	r3, r1
	return (uint32_t)buf[0]
     a88:	7b21      	ldrb	r1, [r4, #12]
		| ((uint32_t)buf[2] << 16)
     a8a:	430b      	orrs	r3, r1
		| ((uint32_t)buf[3] << 24);
     a8c:	7be1      	ldrb	r1, [r4, #15]
     a8e:	0609      	lsls	r1, r1, #24
     a90:	430b      	orrs	r3, r1
		q[6] = cm3 ^ br_dec32le(buf + 12);
     a92:	4053      	eors	r3, r2
     a94:	937e      	str	r3, [sp, #504]	; 0x1f8
		br_aes_ct_ortho(q);
     a96:	a878      	add	r0, sp, #480	; 0x1e0
     a98:	47d8      	blx	fp
		br_aes_ct_bitslice_encrypt(ctx->num_rounds, sk_exp, q);
     a9a:	23f4      	movs	r3, #244	; 0xf4
     a9c:	4642      	mov	r2, r8
     a9e:	58d0      	ldr	r0, [r2, r3]
     aa0:	aa78      	add	r2, sp, #480	; 0x1e0
     aa2:	4669      	mov	r1, sp
     aa4:	47c8      	blx	r9
		br_aes_ct_ortho(q);
     aa6:	a878      	add	r0, sp, #480	; 0x1e0
     aa8:	47d8      	blx	fp

		cm0 = q[0];
     aaa:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
     aac:	469c      	mov	ip, r3
		cm1 = q[2];
     aae:	987a      	ldr	r0, [sp, #488]	; 0x1e8
		cm2 = q[4];
     ab0:	997c      	ldr	r1, [sp, #496]	; 0x1f0
		cm3 = q[6];
     ab2:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
		buf += 16;
     ab4:	3410      	adds	r4, #16
		len -= 16;
     ab6:	3e10      	subs	r6, #16
	while (len > 0) {
     ab8:	2e00      	cmp	r6, #0
     aba:	d1bb      	bne.n	a34 <br_aes_ct_ctrcbc_mac+0x8c>
	buf[0] = (unsigned char)x;
     abc:	4663      	mov	r3, ip
     abe:	702b      	strb	r3, [r5, #0]
	buf[1] = (unsigned char)(x >> 8);
     ac0:	4663      	mov	r3, ip
     ac2:	0a1b      	lsrs	r3, r3, #8
     ac4:	706b      	strb	r3, [r5, #1]
	buf[2] = (unsigned char)(x >> 16);
     ac6:	4663      	mov	r3, ip
     ac8:	0c1b      	lsrs	r3, r3, #16
     aca:	70ab      	strb	r3, [r5, #2]
	buf[3] = (unsigned char)(x >> 24);
     acc:	4663      	mov	r3, ip
     ace:	0e1b      	lsrs	r3, r3, #24
     ad0:	70eb      	strb	r3, [r5, #3]
	buf[0] = (unsigned char)x;
     ad2:	7128      	strb	r0, [r5, #4]
	buf[1] = (unsigned char)(x >> 8);
     ad4:	0a03      	lsrs	r3, r0, #8
     ad6:	716b      	strb	r3, [r5, #5]
	buf[2] = (unsigned char)(x >> 16);
     ad8:	0c03      	lsrs	r3, r0, #16
     ada:	71ab      	strb	r3, [r5, #6]
	buf[3] = (unsigned char)(x >> 24);
     adc:	0e00      	lsrs	r0, r0, #24
     ade:	71e8      	strb	r0, [r5, #7]
	buf[0] = (unsigned char)x;
     ae0:	7229      	strb	r1, [r5, #8]
	buf[1] = (unsigned char)(x >> 8);
     ae2:	0a0b      	lsrs	r3, r1, #8
     ae4:	726b      	strb	r3, [r5, #9]
	buf[2] = (unsigned char)(x >> 16);
     ae6:	0c0b      	lsrs	r3, r1, #16
     ae8:	72ab      	strb	r3, [r5, #10]
	buf[3] = (unsigned char)(x >> 24);
     aea:	0e09      	lsrs	r1, r1, #24
     aec:	72e9      	strb	r1, [r5, #11]
	buf[0] = (unsigned char)x;
     aee:	732a      	strb	r2, [r5, #12]
	buf[1] = (unsigned char)(x >> 8);
     af0:	0a13      	lsrs	r3, r2, #8
     af2:	736b      	strb	r3, [r5, #13]
	buf[2] = (unsigned char)(x >> 16);
     af4:	0c13      	lsrs	r3, r2, #16
     af6:	73ab      	strb	r3, [r5, #14]
	buf[3] = (unsigned char)(x >> 24);
     af8:	0e12      	lsrs	r2, r2, #24
     afa:	73ea      	strb	r2, [r5, #15]

	br_enc32le((unsigned char *)cbcmac +  0, cm0);
	br_enc32le((unsigned char *)cbcmac +  4, cm1);
	br_enc32le((unsigned char *)cbcmac +  8, cm2);
	br_enc32le((unsigned char *)cbcmac + 12, cm3);
}
     afc:	2381      	movs	r3, #129	; 0x81
     afe:	009b      	lsls	r3, r3, #2
     b00:	449d      	add	sp, r3
     b02:	bc3c      	pop	{r2, r3, r4, r5}
     b04:	4690      	mov	r8, r2
     b06:	4699      	mov	r9, r3
     b08:	46a2      	mov	sl, r4
     b0a:	46ab      	mov	fp, r5
     b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	fffffdfc 	.word	0xfffffdfc
     b14:	00000695 	.word	0x00000695
     b18:	00000389 	.word	0x00000389
     b1c:	000011b9 	.word	0x000011b9

00000b20 <br_aes_ct_ctrcbc_encrypt>:

/* see bearssl_block.h */
void
br_aes_ct_ctrcbc_encrypt(const br_aes_ct_ctrcbc_keys *ctx,
	void *ctr, void *cbcmac, void *data, size_t len)
{
     b20:	b5f0      	push	{r4, r5, r6, r7, lr}
     b22:	46de      	mov	lr, fp
     b24:	4657      	mov	r7, sl
     b26:	464e      	mov	r6, r9
     b28:	4645      	mov	r5, r8
     b2a:	b5e0      	push	{r5, r6, r7, lr}
     b2c:	4cd4      	ldr	r4, [pc, #848]	; (e80 <br_aes_ct_ctrcbc_encrypt+0x360>)
     b2e:	44a5      	add	sp, r4
     b30:	9007      	str	r0, [sp, #28]
     b32:	000d      	movs	r5, r1
     b34:	9108      	str	r1, [sp, #32]
     b36:	0017      	movs	r7, r2
     b38:	9209      	str	r2, [sp, #36]	; 0x24
     b3a:	001c      	movs	r4, r3
	uint32_t iv0, iv1, iv2, iv3;
	uint32_t cm0, cm1, cm2, cm3;
	uint32_t sk_exp[120];
	int first_iter;

	br_aes_ct_skey_expand(sk_exp, ctx->num_rounds, ctx->skey);
     b3c:	1d02      	adds	r2, r0, #4
     b3e:	23f4      	movs	r3, #244	; 0xf4
     b40:	58c1      	ldr	r1, [r0, r3]
     b42:	a812      	add	r0, sp, #72	; 0x48
     b44:	4bcf      	ldr	r3, [pc, #828]	; (e84 <br_aes_ct_ctrcbc_encrypt+0x364>)
     b46:	4798      	blx	r3
	return ((uint32_t)buf[0] << 24)
     b48:	782b      	ldrb	r3, [r5, #0]
     b4a:	061b      	lsls	r3, r3, #24
		| ((uint32_t)buf[1] << 16)
     b4c:	0029      	movs	r1, r5
     b4e:	786a      	ldrb	r2, [r5, #1]
     b50:	0412      	lsls	r2, r2, #16
     b52:	4313      	orrs	r3, r2
		| (uint32_t)buf[3];
     b54:	78ea      	ldrb	r2, [r5, #3]
     b56:	4313      	orrs	r3, r2
		| ((uint32_t)buf[2] << 8)
     b58:	78aa      	ldrb	r2, [r5, #2]
     b5a:	0212      	lsls	r2, r2, #8
		| (uint32_t)buf[3];
     b5c:	4313      	orrs	r3, r2
     b5e:	469a      	mov	sl, r3
	return ((uint32_t)buf[0] << 24)
     b60:	792e      	ldrb	r6, [r5, #4]
     b62:	0636      	lsls	r6, r6, #24
		| ((uint32_t)buf[1] << 16)
     b64:	796b      	ldrb	r3, [r5, #5]
     b66:	041b      	lsls	r3, r3, #16
     b68:	431e      	orrs	r6, r3
		| (uint32_t)buf[3];
     b6a:	79eb      	ldrb	r3, [r5, #7]
     b6c:	431e      	orrs	r6, r3
		| ((uint32_t)buf[2] << 8)
     b6e:	79ab      	ldrb	r3, [r5, #6]
     b70:	021b      	lsls	r3, r3, #8
		| (uint32_t)buf[3];
     b72:	431e      	orrs	r6, r3
	return ((uint32_t)buf[0] << 24)
     b74:	7a2d      	ldrb	r5, [r5, #8]
     b76:	062d      	lsls	r5, r5, #24
		| ((uint32_t)buf[1] << 16)
     b78:	7a4b      	ldrb	r3, [r1, #9]
     b7a:	041b      	lsls	r3, r3, #16
     b7c:	431d      	orrs	r5, r3
		| (uint32_t)buf[3];
     b7e:	7acb      	ldrb	r3, [r1, #11]
     b80:	431d      	orrs	r5, r3
		| ((uint32_t)buf[2] << 8)
     b82:	7a8b      	ldrb	r3, [r1, #10]
     b84:	021b      	lsls	r3, r3, #8
		| (uint32_t)buf[3];
     b86:	431d      	orrs	r5, r3
	return ((uint32_t)buf[0] << 24)
     b88:	7b0b      	ldrb	r3, [r1, #12]
     b8a:	061b      	lsls	r3, r3, #24
		| ((uint32_t)buf[1] << 16)
     b8c:	7b4a      	ldrb	r2, [r1, #13]
     b8e:	0412      	lsls	r2, r2, #16
     b90:	4313      	orrs	r3, r2
		| (uint32_t)buf[3];
     b92:	7bca      	ldrb	r2, [r1, #15]
     b94:	4313      	orrs	r3, r2
		| ((uint32_t)buf[2] << 8)
     b96:	7b8a      	ldrb	r2, [r1, #14]
     b98:	0212      	lsls	r2, r2, #8
		| (uint32_t)buf[3];
     b9a:	4313      	orrs	r3, r2
     b9c:	4698      	mov	r8, r3
		| ((uint32_t)buf[1] << 8)
     b9e:	787b      	ldrb	r3, [r7, #1]
     ba0:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
     ba2:	0039      	movs	r1, r7
     ba4:	78ba      	ldrb	r2, [r7, #2]
     ba6:	0412      	lsls	r2, r2, #16
     ba8:	4313      	orrs	r3, r2
	return (uint32_t)buf[0]
     baa:	783a      	ldrb	r2, [r7, #0]
		| ((uint32_t)buf[2] << 16)
     bac:	4313      	orrs	r3, r2
		| ((uint32_t)buf[3] << 24);
     bae:	78fa      	ldrb	r2, [r7, #3]
     bb0:	0612      	lsls	r2, r2, #24
     bb2:	4313      	orrs	r3, r2
     bb4:	9301      	str	r3, [sp, #4]
		| ((uint32_t)buf[1] << 8)
     bb6:	797b      	ldrb	r3, [r7, #5]
     bb8:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
     bba:	79ba      	ldrb	r2, [r7, #6]
     bbc:	0412      	lsls	r2, r2, #16
     bbe:	4313      	orrs	r3, r2
	return (uint32_t)buf[0]
     bc0:	793a      	ldrb	r2, [r7, #4]
		| ((uint32_t)buf[2] << 16)
     bc2:	4313      	orrs	r3, r2
		| ((uint32_t)buf[3] << 24);
     bc4:	79fa      	ldrb	r2, [r7, #7]
     bc6:	0612      	lsls	r2, r2, #24
     bc8:	4313      	orrs	r3, r2
     bca:	9302      	str	r3, [sp, #8]
		| ((uint32_t)buf[1] << 8)
     bcc:	7a7b      	ldrb	r3, [r7, #9]
     bce:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
     bd0:	7aba      	ldrb	r2, [r7, #10]
     bd2:	0412      	lsls	r2, r2, #16
     bd4:	4313      	orrs	r3, r2
	return (uint32_t)buf[0]
     bd6:	7a3a      	ldrb	r2, [r7, #8]
		| ((uint32_t)buf[2] << 16)
     bd8:	4313      	orrs	r3, r2
		| ((uint32_t)buf[3] << 24);
     bda:	7afa      	ldrb	r2, [r7, #11]
     bdc:	0612      	lsls	r2, r2, #24
     bde:	4313      	orrs	r3, r2
     be0:	9303      	str	r3, [sp, #12]
		| ((uint32_t)buf[2] << 16)
     be2:	7bbf      	ldrb	r7, [r7, #14]
     be4:	043f      	lsls	r7, r7, #16
		| ((uint32_t)buf[1] << 8)
     be6:	7b4b      	ldrb	r3, [r1, #13]
     be8:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
     bea:	431f      	orrs	r7, r3
	return (uint32_t)buf[0]
     bec:	7b0b      	ldrb	r3, [r1, #12]
		| ((uint32_t)buf[2] << 16)
     bee:	431f      	orrs	r7, r3
		| ((uint32_t)buf[3] << 24);
     bf0:	7bcb      	ldrb	r3, [r1, #15]
     bf2:	061b      	lsls	r3, r3, #24
     bf4:	431f      	orrs	r7, r3
	cm2 = br_dec32le((unsigned char *)cbcmac +  8);
	cm3 = br_dec32le((unsigned char *)cbcmac + 12);

	buf = data;
	first_iter = 1;
	while (len > 0) {
     bf6:	9b94      	ldr	r3, [sp, #592]	; 0x250
     bf8:	2b00      	cmp	r3, #0
     bfa:	d100      	bne.n	bfe <br_aes_ct_ctrcbc_encrypt+0xde>
     bfc:	e0f1      	b.n	de2 <br_aes_ct_ctrcbc_encrypt+0x2c2>
     bfe:	4643      	mov	r3, r8
     c00:	021b      	lsls	r3, r3, #8
     c02:	469b      	mov	fp, r3
     c04:	4643      	mov	r3, r8
     c06:	43db      	mvns	r3, r3
     c08:	9300      	str	r3, [sp, #0]
     c0a:	2301      	movs	r3, #1
     c0c:	9305      	str	r3, [sp, #20]
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     c0e:	4b9e      	ldr	r3, [pc, #632]	; (e88 <br_aes_ct_ctrcbc_encrypt+0x368>)
     c10:	4699      	mov	r9, r3
		q[3] = cm1;
		q[5] = cm2;
		q[7] = cm3;

		br_aes_ct_ortho(q);
		br_aes_ct_bitslice_encrypt(ctx->num_rounds, sk_exp, q);
     c12:	4643      	mov	r3, r8
     c14:	46b8      	mov	r8, r7
     c16:	9304      	str	r3, [sp, #16]
     c18:	e018      	b.n	c4c <br_aes_ct_ctrcbc_encrypt+0x12c>
			cm0 ^= q[0];
			cm1 ^= q[2];
			cm2 ^= q[4];
			cm3 ^= q[6];
		} else {
			cm0 = q[0] ^ q[1];
     c1a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
     c1c:	404f      	eors	r7, r1
     c1e:	9701      	str	r7, [sp, #4]
			cm1 = q[2] ^ q[3];
     c20:	990d      	ldr	r1, [sp, #52]	; 0x34
     c22:	4051      	eors	r1, r2
     c24:	9102      	str	r1, [sp, #8]
			cm2 = q[4] ^ q[5];
     c26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     c28:	405a      	eors	r2, r3
     c2a:	9203      	str	r2, [sp, #12]
			cm3 = q[6] ^ q[7];
     c2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
     c2e:	4058      	eors	r0, r3
     c30:	4680      	mov	r8, r0
     c32:	2380      	movs	r3, #128	; 0x80
     c34:	005b      	lsls	r3, r3, #1
     c36:	469c      	mov	ip, r3
     c38:	44e3      	add	fp, ip
     c3a:	9b00      	ldr	r3, [sp, #0]
     c3c:	3b01      	subs	r3, #1
     c3e:	9300      	str	r3, [sp, #0]

		/*
		 * If this was the last iteration, then compute the
		 * extra block encryption to complete CBC-MAC.
		 */
		if (len == 0) {
     c40:	9b94      	ldr	r3, [sp, #592]	; 0x250
     c42:	2b00      	cmp	r3, #0
     c44:	d100      	bne.n	c48 <br_aes_ct_ctrcbc_encrypt+0x128>
     c46:	e0af      	b.n	da8 <br_aes_ct_ctrcbc_encrypt+0x288>
     c48:	2300      	movs	r3, #0
     c4a:	9305      	str	r3, [sp, #20]
     c4c:	4653      	mov	r3, sl
     c4e:	021b      	lsls	r3, r3, #8
     c50:	464a      	mov	r2, r9
     c52:	4013      	ands	r3, r2
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     c54:	4652      	mov	r2, sl
     c56:	0a12      	lsrs	r2, r2, #8
     c58:	488c      	ldr	r0, [pc, #560]	; (e8c <br_aes_ct_ctrcbc_encrypt+0x36c>)
     c5a:	4002      	ands	r2, r0
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     c5c:	4313      	orrs	r3, r2
	return (x << 16) | (x >> 16);
     c5e:	2110      	movs	r1, #16
     c60:	41cb      	rors	r3, r1
		q[0] = br_swap32(iv0);
     c62:	930a      	str	r3, [sp, #40]	; 0x28
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     c64:	0233      	lsls	r3, r6, #8
     c66:	464a      	mov	r2, r9
     c68:	4013      	ands	r3, r2
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     c6a:	0a32      	lsrs	r2, r6, #8
     c6c:	4002      	ands	r2, r0
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     c6e:	4313      	orrs	r3, r2
	return (x << 16) | (x >> 16);
     c70:	41cb      	rors	r3, r1
		q[2] = br_swap32(iv1);
     c72:	930c      	str	r3, [sp, #48]	; 0x30
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     c74:	022a      	lsls	r2, r5, #8
     c76:	464b      	mov	r3, r9
     c78:	401a      	ands	r2, r3
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     c7a:	0a2b      	lsrs	r3, r5, #8
     c7c:	4003      	ands	r3, r0
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     c7e:	431a      	orrs	r2, r3
	return (x << 16) | (x >> 16);
     c80:	41ca      	rors	r2, r1
		q[4] = br_swap32(iv2);
     c82:	920e      	str	r2, [sp, #56]	; 0x38
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     c84:	9f04      	ldr	r7, [sp, #16]
     c86:	0a3b      	lsrs	r3, r7, #8
     c88:	4003      	ands	r3, r0
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     c8a:	465a      	mov	r2, fp
     c8c:	4648      	mov	r0, r9
     c8e:	4002      	ands	r2, r0
     c90:	4313      	orrs	r3, r2
	return (x << 16) | (x >> 16);
     c92:	41cb      	rors	r3, r1
		q[6] = br_swap32(iv3);
     c94:	9310      	str	r3, [sp, #64]	; 0x40
		iv3 ++;
     c96:	003a      	movs	r2, r7
     c98:	3201      	adds	r2, #1
     c9a:	9204      	str	r2, [sp, #16]
		carry = ~(iv3 | -iv3) >> 31;
     c9c:	9b00      	ldr	r3, [sp, #0]
     c9e:	4313      	orrs	r3, r2
     ca0:	43db      	mvns	r3, r3
     ca2:	0fdb      	lsrs	r3, r3, #31
		iv2 += carry;
     ca4:	18ed      	adds	r5, r5, r3
		carry &= -(~(iv2 | -iv2) >> 31);
     ca6:	1e6a      	subs	r2, r5, #1
     ca8:	43aa      	bics	r2, r5
     caa:	17d2      	asrs	r2, r2, #31
     cac:	4013      	ands	r3, r2
		iv1 += carry;
     cae:	18f6      	adds	r6, r6, r3
		carry &= -(~(iv1 | -iv1) >> 31);
     cb0:	1e72      	subs	r2, r6, #1
     cb2:	43b2      	bics	r2, r6
     cb4:	17d2      	asrs	r2, r2, #31
     cb6:	4013      	ands	r3, r2
		iv0 += carry;
     cb8:	449a      	add	sl, r3
		q[1] = cm0;
     cba:	9b01      	ldr	r3, [sp, #4]
     cbc:	930b      	str	r3, [sp, #44]	; 0x2c
		q[3] = cm1;
     cbe:	9a02      	ldr	r2, [sp, #8]
     cc0:	920d      	str	r2, [sp, #52]	; 0x34
		q[5] = cm2;
     cc2:	9803      	ldr	r0, [sp, #12]
     cc4:	900f      	str	r0, [sp, #60]	; 0x3c
		q[7] = cm3;
     cc6:	4641      	mov	r1, r8
     cc8:	9111      	str	r1, [sp, #68]	; 0x44
		br_aes_ct_ortho(q);
     cca:	a80a      	add	r0, sp, #40	; 0x28
     ccc:	4970      	ldr	r1, [pc, #448]	; (e90 <br_aes_ct_ctrcbc_encrypt+0x370>)
     cce:	4788      	blx	r1
		br_aes_ct_bitslice_encrypt(ctx->num_rounds, sk_exp, q);
     cd0:	23f4      	movs	r3, #244	; 0xf4
     cd2:	9907      	ldr	r1, [sp, #28]
     cd4:	58c8      	ldr	r0, [r1, r3]
     cd6:	aa0a      	add	r2, sp, #40	; 0x28
     cd8:	a912      	add	r1, sp, #72	; 0x48
     cda:	4f6e      	ldr	r7, [pc, #440]	; (e94 <br_aes_ct_ctrcbc_encrypt+0x374>)
     cdc:	47b8      	blx	r7
		br_aes_ct_ortho(q);
     cde:	a80a      	add	r0, sp, #40	; 0x28
     ce0:	496b      	ldr	r1, [pc, #428]	; (e90 <br_aes_ct_ctrcbc_encrypt+0x370>)
     ce2:	4788      	blx	r1
		| ((uint32_t)buf[1] << 8)
     ce4:	7861      	ldrb	r1, [r4, #1]
     ce6:	0209      	lsls	r1, r1, #8
		| ((uint32_t)buf[2] << 16)
     ce8:	78a3      	ldrb	r3, [r4, #2]
     cea:	041b      	lsls	r3, r3, #16
     cec:	4319      	orrs	r1, r3
	return (uint32_t)buf[0]
     cee:	7823      	ldrb	r3, [r4, #0]
		| ((uint32_t)buf[2] << 16)
     cf0:	4319      	orrs	r1, r3
		| ((uint32_t)buf[3] << 24);
     cf2:	78e3      	ldrb	r3, [r4, #3]
     cf4:	061b      	lsls	r3, r3, #24
     cf6:	4319      	orrs	r1, r3
		q[0] ^= br_dec32le(buf +  0);
     cf8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
     cfa:	4079      	eors	r1, r7
		| ((uint32_t)buf[1] << 8)
     cfc:	7962      	ldrb	r2, [r4, #5]
     cfe:	0212      	lsls	r2, r2, #8
		| ((uint32_t)buf[2] << 16)
     d00:	79a3      	ldrb	r3, [r4, #6]
     d02:	041b      	lsls	r3, r3, #16
     d04:	431a      	orrs	r2, r3
	return (uint32_t)buf[0]
     d06:	7923      	ldrb	r3, [r4, #4]
		| ((uint32_t)buf[2] << 16)
     d08:	431a      	orrs	r2, r3
		| ((uint32_t)buf[3] << 24);
     d0a:	79e3      	ldrb	r3, [r4, #7]
     d0c:	061b      	lsls	r3, r3, #24
     d0e:	431a      	orrs	r2, r3
		q[2] ^= br_dec32le(buf +  4);
     d10:	9f0c      	ldr	r7, [sp, #48]	; 0x30
     d12:	407a      	eors	r2, r7
		| ((uint32_t)buf[1] << 8)
     d14:	7a63      	ldrb	r3, [r4, #9]
     d16:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
     d18:	7aa0      	ldrb	r0, [r4, #10]
     d1a:	0400      	lsls	r0, r0, #16
     d1c:	4303      	orrs	r3, r0
	return (uint32_t)buf[0]
     d1e:	7a20      	ldrb	r0, [r4, #8]
		| ((uint32_t)buf[2] << 16)
     d20:	4303      	orrs	r3, r0
		| ((uint32_t)buf[3] << 24);
     d22:	7ae0      	ldrb	r0, [r4, #11]
     d24:	0600      	lsls	r0, r0, #24
     d26:	4303      	orrs	r3, r0
		q[4] ^= br_dec32le(buf +  8);
     d28:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     d2a:	9706      	str	r7, [sp, #24]
     d2c:	407b      	eors	r3, r7
		| ((uint32_t)buf[1] << 8)
     d2e:	7b60      	ldrb	r0, [r4, #13]
     d30:	0200      	lsls	r0, r0, #8
		| ((uint32_t)buf[2] << 16)
     d32:	7ba7      	ldrb	r7, [r4, #14]
     d34:	043f      	lsls	r7, r7, #16
     d36:	4338      	orrs	r0, r7
	return (uint32_t)buf[0]
     d38:	7b27      	ldrb	r7, [r4, #12]
		| ((uint32_t)buf[2] << 16)
     d3a:	4338      	orrs	r0, r7
		| ((uint32_t)buf[3] << 24);
     d3c:	7be7      	ldrb	r7, [r4, #15]
     d3e:	063f      	lsls	r7, r7, #24
     d40:	4338      	orrs	r0, r7
		q[6] ^= br_dec32le(buf + 12);
     d42:	9f10      	ldr	r7, [sp, #64]	; 0x40
     d44:	4078      	eors	r0, r7
	buf[0] = (unsigned char)x;
     d46:	7021      	strb	r1, [r4, #0]
	buf[1] = (unsigned char)(x >> 8);
     d48:	0a0f      	lsrs	r7, r1, #8
     d4a:	7067      	strb	r7, [r4, #1]
	buf[2] = (unsigned char)(x >> 16);
     d4c:	0c0f      	lsrs	r7, r1, #16
     d4e:	70a7      	strb	r7, [r4, #2]
	buf[3] = (unsigned char)(x >> 24);
     d50:	0e0f      	lsrs	r7, r1, #24
     d52:	70e7      	strb	r7, [r4, #3]
	buf[0] = (unsigned char)x;
     d54:	7122      	strb	r2, [r4, #4]
	buf[1] = (unsigned char)(x >> 8);
     d56:	0a17      	lsrs	r7, r2, #8
     d58:	7167      	strb	r7, [r4, #5]
	buf[2] = (unsigned char)(x >> 16);
     d5a:	0c17      	lsrs	r7, r2, #16
     d5c:	71a7      	strb	r7, [r4, #6]
	buf[3] = (unsigned char)(x >> 24);
     d5e:	0e17      	lsrs	r7, r2, #24
     d60:	71e7      	strb	r7, [r4, #7]
	buf[0] = (unsigned char)x;
     d62:	7223      	strb	r3, [r4, #8]
	buf[1] = (unsigned char)(x >> 8);
     d64:	0a1f      	lsrs	r7, r3, #8
     d66:	7267      	strb	r7, [r4, #9]
	buf[2] = (unsigned char)(x >> 16);
     d68:	0c1f      	lsrs	r7, r3, #16
     d6a:	72a7      	strb	r7, [r4, #10]
	buf[3] = (unsigned char)(x >> 24);
     d6c:	0e1f      	lsrs	r7, r3, #24
     d6e:	72e7      	strb	r7, [r4, #11]
	buf[0] = (unsigned char)x;
     d70:	7320      	strb	r0, [r4, #12]
	buf[1] = (unsigned char)(x >> 8);
     d72:	0a07      	lsrs	r7, r0, #8
     d74:	7367      	strb	r7, [r4, #13]
	buf[2] = (unsigned char)(x >> 16);
     d76:	0c07      	lsrs	r7, r0, #16
     d78:	73a7      	strb	r7, [r4, #14]
	buf[3] = (unsigned char)(x >> 24);
     d7a:	0e07      	lsrs	r7, r0, #24
     d7c:	73e7      	strb	r7, [r4, #15]
		buf += 16;
     d7e:	3410      	adds	r4, #16
		len -= 16;
     d80:	9f94      	ldr	r7, [sp, #592]	; 0x250
     d82:	3f10      	subs	r7, #16
     d84:	9794      	str	r7, [sp, #592]	; 0x250
		if (first_iter) {
     d86:	9f05      	ldr	r7, [sp, #20]
     d88:	2f00      	cmp	r7, #0
     d8a:	d100      	bne.n	d8e <br_aes_ct_ctrcbc_encrypt+0x26e>
     d8c:	e745      	b.n	c1a <br_aes_ct_ctrcbc_encrypt+0xfa>
			cm0 ^= q[0];
     d8e:	9f01      	ldr	r7, [sp, #4]
     d90:	404f      	eors	r7, r1
     d92:	9701      	str	r7, [sp, #4]
			cm1 ^= q[2];
     d94:	9902      	ldr	r1, [sp, #8]
     d96:	4051      	eors	r1, r2
     d98:	9102      	str	r1, [sp, #8]
			cm2 ^= q[4];
     d9a:	9a03      	ldr	r2, [sp, #12]
     d9c:	405a      	eors	r2, r3
     d9e:	9203      	str	r2, [sp, #12]
			cm3 ^= q[6];
     da0:	4643      	mov	r3, r8
     da2:	4043      	eors	r3, r0
     da4:	4698      	mov	r8, r3
     da6:	e744      	b.n	c32 <br_aes_ct_ctrcbc_encrypt+0x112>
     da8:	9b04      	ldr	r3, [sp, #16]
     daa:	4647      	mov	r7, r8
     dac:	4698      	mov	r8, r3
			q[0] = cm0;
     dae:	9b01      	ldr	r3, [sp, #4]
     db0:	930a      	str	r3, [sp, #40]	; 0x28
			q[2] = cm1;
     db2:	9b02      	ldr	r3, [sp, #8]
     db4:	930c      	str	r3, [sp, #48]	; 0x30
			q[4] = cm2;
     db6:	9b03      	ldr	r3, [sp, #12]
     db8:	930e      	str	r3, [sp, #56]	; 0x38
			q[6] = cm3;
     dba:	9710      	str	r7, [sp, #64]	; 0x40
			br_aes_ct_ortho(q);
     dbc:	a80a      	add	r0, sp, #40	; 0x28
     dbe:	4c34      	ldr	r4, [pc, #208]	; (e90 <br_aes_ct_ctrcbc_encrypt+0x370>)
     dc0:	47a0      	blx	r4
			br_aes_ct_bitslice_encrypt(ctx->num_rounds, sk_exp, q);
     dc2:	23f4      	movs	r3, #244	; 0xf4
     dc4:	9a07      	ldr	r2, [sp, #28]
     dc6:	58d0      	ldr	r0, [r2, r3]
     dc8:	aa0a      	add	r2, sp, #40	; 0x28
     dca:	a912      	add	r1, sp, #72	; 0x48
     dcc:	4b31      	ldr	r3, [pc, #196]	; (e94 <br_aes_ct_ctrcbc_encrypt+0x374>)
     dce:	4798      	blx	r3
			br_aes_ct_ortho(q);
     dd0:	a80a      	add	r0, sp, #40	; 0x28
     dd2:	47a0      	blx	r4
			cm0 = q[0];
     dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     dd6:	9301      	str	r3, [sp, #4]
			cm1 = q[2];
     dd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     dda:	9302      	str	r3, [sp, #8]
			cm2 = q[4];
     ddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     dde:	9303      	str	r3, [sp, #12]
			cm3 = q[6];
     de0:	9f10      	ldr	r7, [sp, #64]	; 0x40
	buf[0] = (unsigned char)(x >> 24);
     de2:	4653      	mov	r3, sl
     de4:	0e1b      	lsrs	r3, r3, #24
     de6:	9a08      	ldr	r2, [sp, #32]
     de8:	7013      	strb	r3, [r2, #0]
	buf[1] = (unsigned char)(x >> 16);
     dea:	4653      	mov	r3, sl
     dec:	0c1b      	lsrs	r3, r3, #16
     dee:	7053      	strb	r3, [r2, #1]
	buf[2] = (unsigned char)(x >> 8);
     df0:	4653      	mov	r3, sl
     df2:	0a1b      	lsrs	r3, r3, #8
     df4:	7093      	strb	r3, [r2, #2]
	buf[3] = (unsigned char)x;
     df6:	4653      	mov	r3, sl
     df8:	70d3      	strb	r3, [r2, #3]
	buf[0] = (unsigned char)(x >> 24);
     dfa:	0e33      	lsrs	r3, r6, #24
     dfc:	7113      	strb	r3, [r2, #4]
	buf[1] = (unsigned char)(x >> 16);
     dfe:	0c33      	lsrs	r3, r6, #16
     e00:	7153      	strb	r3, [r2, #5]
	buf[2] = (unsigned char)(x >> 8);
     e02:	0a33      	lsrs	r3, r6, #8
     e04:	7193      	strb	r3, [r2, #6]
	buf[3] = (unsigned char)x;
     e06:	71d6      	strb	r6, [r2, #7]
	buf[0] = (unsigned char)(x >> 24);
     e08:	0e2b      	lsrs	r3, r5, #24
     e0a:	7213      	strb	r3, [r2, #8]
	buf[1] = (unsigned char)(x >> 16);
     e0c:	0c2b      	lsrs	r3, r5, #16
     e0e:	7253      	strb	r3, [r2, #9]
	buf[2] = (unsigned char)(x >> 8);
     e10:	0a2b      	lsrs	r3, r5, #8
     e12:	7293      	strb	r3, [r2, #10]
	buf[3] = (unsigned char)x;
     e14:	72d5      	strb	r5, [r2, #11]
	buf[0] = (unsigned char)(x >> 24);
     e16:	4643      	mov	r3, r8
     e18:	0e1b      	lsrs	r3, r3, #24
     e1a:	7313      	strb	r3, [r2, #12]
	buf[1] = (unsigned char)(x >> 16);
     e1c:	4643      	mov	r3, r8
     e1e:	0c1b      	lsrs	r3, r3, #16
     e20:	7353      	strb	r3, [r2, #13]
	buf[2] = (unsigned char)(x >> 8);
     e22:	4643      	mov	r3, r8
     e24:	0a1b      	lsrs	r3, r3, #8
     e26:	7393      	strb	r3, [r2, #14]
	buf[3] = (unsigned char)x;
     e28:	4643      	mov	r3, r8
     e2a:	73d3      	strb	r3, [r2, #15]
	buf[0] = (unsigned char)x;
     e2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     e2e:	0013      	movs	r3, r2
     e30:	9901      	ldr	r1, [sp, #4]
     e32:	7019      	strb	r1, [r3, #0]
	buf[1] = (unsigned char)(x >> 8);
     e34:	0a0b      	lsrs	r3, r1, #8
     e36:	7053      	strb	r3, [r2, #1]
	buf[2] = (unsigned char)(x >> 16);
     e38:	0c0b      	lsrs	r3, r1, #16
     e3a:	7093      	strb	r3, [r2, #2]
	buf[3] = (unsigned char)(x >> 24);
     e3c:	0e0b      	lsrs	r3, r1, #24
     e3e:	70d3      	strb	r3, [r2, #3]
	buf[0] = (unsigned char)x;
     e40:	9902      	ldr	r1, [sp, #8]
     e42:	7111      	strb	r1, [r2, #4]
	buf[1] = (unsigned char)(x >> 8);
     e44:	0a0b      	lsrs	r3, r1, #8
     e46:	7153      	strb	r3, [r2, #5]
	buf[2] = (unsigned char)(x >> 16);
     e48:	0c0b      	lsrs	r3, r1, #16
     e4a:	7193      	strb	r3, [r2, #6]
	buf[3] = (unsigned char)(x >> 24);
     e4c:	0e0b      	lsrs	r3, r1, #24
     e4e:	71d3      	strb	r3, [r2, #7]
	buf[0] = (unsigned char)x;
     e50:	9903      	ldr	r1, [sp, #12]
     e52:	7211      	strb	r1, [r2, #8]
	buf[1] = (unsigned char)(x >> 8);
     e54:	0a0b      	lsrs	r3, r1, #8
     e56:	7253      	strb	r3, [r2, #9]
	buf[2] = (unsigned char)(x >> 16);
     e58:	0c0b      	lsrs	r3, r1, #16
     e5a:	7293      	strb	r3, [r2, #10]
	buf[3] = (unsigned char)(x >> 24);
     e5c:	0e0b      	lsrs	r3, r1, #24
     e5e:	72d3      	strb	r3, [r2, #11]
	buf[0] = (unsigned char)x;
     e60:	7317      	strb	r7, [r2, #12]
	buf[1] = (unsigned char)(x >> 8);
     e62:	0a3b      	lsrs	r3, r7, #8
     e64:	7353      	strb	r3, [r2, #13]
	buf[2] = (unsigned char)(x >> 16);
     e66:	0c3b      	lsrs	r3, r7, #16
     e68:	7393      	strb	r3, [r2, #14]
	buf[3] = (unsigned char)(x >> 24);
     e6a:	0e3f      	lsrs	r7, r7, #24
     e6c:	73d7      	strb	r7, [r2, #15]
	br_enc32be(ivbuf + 12, iv3);
	br_enc32le((unsigned char *)cbcmac +  0, cm0);
	br_enc32le((unsigned char *)cbcmac +  4, cm1);
	br_enc32le((unsigned char *)cbcmac +  8, cm2);
	br_enc32le((unsigned char *)cbcmac + 12, cm3);
}
     e6e:	238b      	movs	r3, #139	; 0x8b
     e70:	009b      	lsls	r3, r3, #2
     e72:	449d      	add	sp, r3
     e74:	bc3c      	pop	{r2, r3, r4, r5}
     e76:	4690      	mov	r8, r2
     e78:	4699      	mov	r9, r3
     e7a:	46a2      	mov	sl, r4
     e7c:	46ab      	mov	fp, r5
     e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e80:	fffffdd4 	.word	0xfffffdd4
     e84:	00000695 	.word	0x00000695
     e88:	ff00ff00 	.word	0xff00ff00
     e8c:	00ff00ff 	.word	0x00ff00ff
     e90:	00000389 	.word	0x00000389
     e94:	000011b9 	.word	0x000011b9

00000e98 <br_aes_ct_ctrcbc_decrypt>:

/* see bearssl_block.h */
void
br_aes_ct_ctrcbc_decrypt(const br_aes_ct_ctrcbc_keys *ctx,
	void *ctr, void *cbcmac, void *data, size_t len)
{
     e98:	b5f0      	push	{r4, r5, r6, r7, lr}
     e9a:	46de      	mov	lr, fp
     e9c:	4657      	mov	r7, sl
     e9e:	464e      	mov	r6, r9
     ea0:	4645      	mov	r5, r8
     ea2:	b5e0      	push	{r5, r6, r7, lr}
     ea4:	4cbd      	ldr	r4, [pc, #756]	; (119c <br_aes_ct_ctrcbc_decrypt+0x304>)
     ea6:	44a5      	add	sp, r4
     ea8:	9004      	str	r0, [sp, #16]
     eaa:	000d      	movs	r5, r1
     eac:	9107      	str	r1, [sp, #28]
     eae:	0017      	movs	r7, r2
     eb0:	001c      	movs	r4, r3
	unsigned char *ivbuf;
	uint32_t iv0, iv1, iv2, iv3;
	uint32_t cm0, cm1, cm2, cm3;
	uint32_t sk_exp[120];

	br_aes_ct_skey_expand(sk_exp, ctx->num_rounds, ctx->skey);
     eb2:	1d02      	adds	r2, r0, #4
     eb4:	23f4      	movs	r3, #244	; 0xf4
     eb6:	58c1      	ldr	r1, [r0, r3]
     eb8:	a814      	add	r0, sp, #80	; 0x50
     eba:	4bb9      	ldr	r3, [pc, #740]	; (11a0 <br_aes_ct_ctrcbc_decrypt+0x308>)
     ebc:	4798      	blx	r3
	return ((uint32_t)buf[0] << 24)
     ebe:	782b      	ldrb	r3, [r5, #0]
     ec0:	061b      	lsls	r3, r3, #24
		| ((uint32_t)buf[1] << 16)
     ec2:	0029      	movs	r1, r5
     ec4:	786a      	ldrb	r2, [r5, #1]
     ec6:	0412      	lsls	r2, r2, #16
     ec8:	4313      	orrs	r3, r2
		| (uint32_t)buf[3];
     eca:	78ea      	ldrb	r2, [r5, #3]
     ecc:	4313      	orrs	r3, r2
		| ((uint32_t)buf[2] << 8)
     ece:	78aa      	ldrb	r2, [r5, #2]
     ed0:	0212      	lsls	r2, r2, #8
		| (uint32_t)buf[3];
     ed2:	0018      	movs	r0, r3
     ed4:	4310      	orrs	r0, r2
     ed6:	9005      	str	r0, [sp, #20]
	return ((uint32_t)buf[0] << 24)
     ed8:	792e      	ldrb	r6, [r5, #4]
     eda:	0636      	lsls	r6, r6, #24
		| ((uint32_t)buf[1] << 16)
     edc:	796b      	ldrb	r3, [r5, #5]
     ede:	041b      	lsls	r3, r3, #16
     ee0:	431e      	orrs	r6, r3
		| (uint32_t)buf[3];
     ee2:	79eb      	ldrb	r3, [r5, #7]
     ee4:	431e      	orrs	r6, r3
		| ((uint32_t)buf[2] << 8)
     ee6:	79ab      	ldrb	r3, [r5, #6]
     ee8:	021b      	lsls	r3, r3, #8
		| (uint32_t)buf[3];
     eea:	431e      	orrs	r6, r3
	return ((uint32_t)buf[0] << 24)
     eec:	7a2d      	ldrb	r5, [r5, #8]
     eee:	062d      	lsls	r5, r5, #24
		| ((uint32_t)buf[1] << 16)
     ef0:	7a4b      	ldrb	r3, [r1, #9]
     ef2:	041b      	lsls	r3, r3, #16
     ef4:	431d      	orrs	r5, r3
		| (uint32_t)buf[3];
     ef6:	7acb      	ldrb	r3, [r1, #11]
     ef8:	431d      	orrs	r5, r3
		| ((uint32_t)buf[2] << 8)
     efa:	7a8b      	ldrb	r3, [r1, #10]
     efc:	021b      	lsls	r3, r3, #8
		| (uint32_t)buf[3];
     efe:	431d      	orrs	r5, r3
	return ((uint32_t)buf[0] << 24)
     f00:	7b0b      	ldrb	r3, [r1, #12]
     f02:	061b      	lsls	r3, r3, #24
		| ((uint32_t)buf[1] << 16)
     f04:	7b4a      	ldrb	r2, [r1, #13]
     f06:	0412      	lsls	r2, r2, #16
     f08:	4313      	orrs	r3, r2
		| (uint32_t)buf[3];
     f0a:	7bca      	ldrb	r2, [r1, #15]
     f0c:	4313      	orrs	r3, r2
		| ((uint32_t)buf[2] << 8)
     f0e:	7b8a      	ldrb	r2, [r1, #14]
     f10:	0212      	lsls	r2, r2, #8
		| (uint32_t)buf[3];
     f12:	0019      	movs	r1, r3
     f14:	4311      	orrs	r1, r2
     f16:	4688      	mov	r8, r1
		| ((uint32_t)buf[1] << 8)
     f18:	7878      	ldrb	r0, [r7, #1]
     f1a:	0200      	lsls	r0, r0, #8
		| ((uint32_t)buf[2] << 16)
     f1c:	78bb      	ldrb	r3, [r7, #2]
     f1e:	041b      	lsls	r3, r3, #16
     f20:	4318      	orrs	r0, r3
	return (uint32_t)buf[0]
     f22:	783b      	ldrb	r3, [r7, #0]
		| ((uint32_t)buf[2] << 16)
     f24:	4318      	orrs	r0, r3
		| ((uint32_t)buf[3] << 24);
     f26:	78fb      	ldrb	r3, [r7, #3]
     f28:	061b      	lsls	r3, r3, #24
     f2a:	4318      	orrs	r0, r3
		| ((uint32_t)buf[1] << 8)
     f2c:	7979      	ldrb	r1, [r7, #5]
     f2e:	0209      	lsls	r1, r1, #8
		| ((uint32_t)buf[2] << 16)
     f30:	79bb      	ldrb	r3, [r7, #6]
     f32:	041b      	lsls	r3, r3, #16
     f34:	4319      	orrs	r1, r3
	return (uint32_t)buf[0]
     f36:	793b      	ldrb	r3, [r7, #4]
		| ((uint32_t)buf[2] << 16)
     f38:	4319      	orrs	r1, r3
		| ((uint32_t)buf[3] << 24);
     f3a:	79fb      	ldrb	r3, [r7, #7]
     f3c:	061b      	lsls	r3, r3, #24
     f3e:	4319      	orrs	r1, r3
		| ((uint32_t)buf[1] << 8)
     f40:	7a7a      	ldrb	r2, [r7, #9]
     f42:	0212      	lsls	r2, r2, #8
		| ((uint32_t)buf[2] << 16)
     f44:	7abb      	ldrb	r3, [r7, #10]
     f46:	041b      	lsls	r3, r3, #16
     f48:	431a      	orrs	r2, r3
	return (uint32_t)buf[0]
     f4a:	7a3b      	ldrb	r3, [r7, #8]
		| ((uint32_t)buf[2] << 16)
     f4c:	431a      	orrs	r2, r3
		| ((uint32_t)buf[3] << 24);
     f4e:	7afb      	ldrb	r3, [r7, #11]
     f50:	061b      	lsls	r3, r3, #24
     f52:	431a      	orrs	r2, r3
		| ((uint32_t)buf[2] << 16)
     f54:	7bbb      	ldrb	r3, [r7, #14]
     f56:	041b      	lsls	r3, r3, #16
		| ((uint32_t)buf[1] << 8)
     f58:	9706      	str	r7, [sp, #24]
     f5a:	7b7f      	ldrb	r7, [r7, #13]
     f5c:	023f      	lsls	r7, r7, #8
		| ((uint32_t)buf[2] << 16)
     f5e:	433b      	orrs	r3, r7
	return (uint32_t)buf[0]
     f60:	9f06      	ldr	r7, [sp, #24]
     f62:	7b3f      	ldrb	r7, [r7, #12]
		| ((uint32_t)buf[2] << 16)
     f64:	433b      	orrs	r3, r7
		| ((uint32_t)buf[3] << 24);
     f66:	9f06      	ldr	r7, [sp, #24]
     f68:	7bff      	ldrb	r7, [r7, #15]
     f6a:	063f      	lsls	r7, r7, #24
     f6c:	433b      	orrs	r3, r7
	cm1 = br_dec32le((unsigned char *)cbcmac +  4);
	cm2 = br_dec32le((unsigned char *)cbcmac +  8);
	cm3 = br_dec32le((unsigned char *)cbcmac + 12);

	buf = data;
	while (len > 0) {
     f6e:	9f96      	ldr	r7, [sp, #600]	; 0x258
     f70:	2f00      	cmp	r7, #0
     f72:	d100      	bne.n	f76 <br_aes_ct_ctrcbc_decrypt+0xde>
     f74:	e0c6      	b.n	1104 <br_aes_ct_ctrcbc_decrypt+0x26c>
     f76:	4647      	mov	r7, r8
     f78:	023f      	lsls	r7, r7, #8
     f7a:	9703      	str	r7, [sp, #12]
     f7c:	4647      	mov	r7, r8
     f7e:	43ff      	mvns	r7, r7
     f80:	9701      	str	r7, [sp, #4]
		q[3] = cm1 ^ br_dec32le(buf +  4);
		q[5] = cm2 ^ br_dec32le(buf +  8);
		q[7] = cm3 ^ br_dec32le(buf + 12);

		br_aes_ct_ortho(q);
		br_aes_ct_bitslice_encrypt(ctx->num_rounds, sk_exp, q);
     f82:	9f05      	ldr	r7, [sp, #20]
     f84:	46b9      	mov	r9, r7
     f86:	468c      	mov	ip, r1
     f88:	9202      	str	r2, [sp, #8]
     f8a:	469a      	mov	sl, r3
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     f8c:	464b      	mov	r3, r9
     f8e:	021b      	lsls	r3, r3, #8
     f90:	4a84      	ldr	r2, [pc, #528]	; (11a4 <br_aes_ct_ctrcbc_decrypt+0x30c>)
     f92:	4013      	ands	r3, r2
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     f94:	4649      	mov	r1, r9
     f96:	0a09      	lsrs	r1, r1, #8
     f98:	468b      	mov	fp, r1
     f9a:	4983      	ldr	r1, [pc, #524]	; (11a8 <br_aes_ct_ctrcbc_decrypt+0x310>)
     f9c:	465f      	mov	r7, fp
     f9e:	400f      	ands	r7, r1
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     fa0:	433b      	orrs	r3, r7
	return (x << 16) | (x >> 16);
     fa2:	2710      	movs	r7, #16
     fa4:	41fb      	rors	r3, r7
		q[0] = br_swap32(iv0);
     fa6:	930c      	str	r3, [sp, #48]	; 0x30
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     fa8:	0233      	lsls	r3, r6, #8
     faa:	4013      	ands	r3, r2
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     fac:	0a37      	lsrs	r7, r6, #8
     fae:	400f      	ands	r7, r1
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     fb0:	433b      	orrs	r3, r7
	return (x << 16) | (x >> 16);
     fb2:	2710      	movs	r7, #16
     fb4:	41fb      	rors	r3, r7
		q[2] = br_swap32(iv1);
     fb6:	930e      	str	r3, [sp, #56]	; 0x38
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     fb8:	022b      	lsls	r3, r5, #8
     fba:	4013      	ands	r3, r2
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     fbc:	0a2f      	lsrs	r7, r5, #8
     fbe:	400f      	ands	r7, r1
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     fc0:	433b      	orrs	r3, r7
	return (x << 16) | (x >> 16);
     fc2:	2710      	movs	r7, #16
     fc4:	41fb      	rors	r3, r7
		q[4] = br_swap32(iv2);
     fc6:	9310      	str	r3, [sp, #64]	; 0x40
		| ((x >> 8) & (uint32_t)0x00FF00FF);
     fc8:	4643      	mov	r3, r8
     fca:	0a1b      	lsrs	r3, r3, #8
     fcc:	4019      	ands	r1, r3
	x = ((x & (uint32_t)0x00FF00FF) << 8)
     fce:	9f03      	ldr	r7, [sp, #12]
     fd0:	403a      	ands	r2, r7
     fd2:	4311      	orrs	r1, r2
	return (x << 16) | (x >> 16);
     fd4:	2310      	movs	r3, #16
     fd6:	41d9      	rors	r1, r3
		q[6] = br_swap32(iv3);
     fd8:	9112      	str	r1, [sp, #72]	; 0x48
		iv3 ++;
     fda:	3b0f      	subs	r3, #15
     fdc:	469b      	mov	fp, r3
     fde:	44d8      	add	r8, fp
		carry = ~(iv3 | -iv3) >> 31;
     fe0:	9b01      	ldr	r3, [sp, #4]
     fe2:	4642      	mov	r2, r8
     fe4:	4313      	orrs	r3, r2
     fe6:	43db      	mvns	r3, r3
     fe8:	0fdb      	lsrs	r3, r3, #31
		iv2 += carry;
     fea:	18ed      	adds	r5, r5, r3
		carry &= -(~(iv2 | -iv2) >> 31);
     fec:	1e6a      	subs	r2, r5, #1
     fee:	43aa      	bics	r2, r5
     ff0:	17d2      	asrs	r2, r2, #31
     ff2:	4013      	ands	r3, r2
		iv1 += carry;
     ff4:	18f6      	adds	r6, r6, r3
		carry &= -(~(iv1 | -iv1) >> 31);
     ff6:	1e72      	subs	r2, r6, #1
     ff8:	43b2      	bics	r2, r6
     ffa:	17d2      	asrs	r2, r2, #31
     ffc:	4013      	ands	r3, r2
		iv0 += carry;
     ffe:	4499      	add	r9, r3
		| ((uint32_t)buf[1] << 8)
    1000:	7862      	ldrb	r2, [r4, #1]
    1002:	0212      	lsls	r2, r2, #8
		| ((uint32_t)buf[2] << 16)
    1004:	78a3      	ldrb	r3, [r4, #2]
    1006:	041b      	lsls	r3, r3, #16
    1008:	4313      	orrs	r3, r2
	return (uint32_t)buf[0]
    100a:	7822      	ldrb	r2, [r4, #0]
		| ((uint32_t)buf[2] << 16)
    100c:	4313      	orrs	r3, r2
		| ((uint32_t)buf[3] << 24);
    100e:	78e2      	ldrb	r2, [r4, #3]
    1010:	0612      	lsls	r2, r2, #24
    1012:	4313      	orrs	r3, r2
		q[1] = cm0 ^ br_dec32le(buf +  0);
    1014:	4058      	eors	r0, r3
    1016:	900d      	str	r0, [sp, #52]	; 0x34
		| ((uint32_t)buf[1] << 8)
    1018:	7963      	ldrb	r3, [r4, #5]
    101a:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
    101c:	79a2      	ldrb	r2, [r4, #6]
    101e:	0412      	lsls	r2, r2, #16
    1020:	4313      	orrs	r3, r2
	return (uint32_t)buf[0]
    1022:	7922      	ldrb	r2, [r4, #4]
		| ((uint32_t)buf[2] << 16)
    1024:	4313      	orrs	r3, r2
		| ((uint32_t)buf[3] << 24);
    1026:	79e2      	ldrb	r2, [r4, #7]
    1028:	0612      	lsls	r2, r2, #24
    102a:	4313      	orrs	r3, r2
		q[3] = cm1 ^ br_dec32le(buf +  4);
    102c:	4662      	mov	r2, ip
    102e:	4053      	eors	r3, r2
    1030:	930f      	str	r3, [sp, #60]	; 0x3c
		| ((uint32_t)buf[1] << 8)
    1032:	7a63      	ldrb	r3, [r4, #9]
    1034:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
    1036:	7aa2      	ldrb	r2, [r4, #10]
    1038:	0412      	lsls	r2, r2, #16
    103a:	4313      	orrs	r3, r2
	return (uint32_t)buf[0]
    103c:	7a22      	ldrb	r2, [r4, #8]
		| ((uint32_t)buf[2] << 16)
    103e:	4313      	orrs	r3, r2
		| ((uint32_t)buf[3] << 24);
    1040:	7ae2      	ldrb	r2, [r4, #11]
    1042:	0612      	lsls	r2, r2, #24
    1044:	4313      	orrs	r3, r2
		q[5] = cm2 ^ br_dec32le(buf +  8);
    1046:	9a02      	ldr	r2, [sp, #8]
    1048:	4053      	eors	r3, r2
    104a:	9311      	str	r3, [sp, #68]	; 0x44
		| ((uint32_t)buf[1] << 8)
    104c:	7b63      	ldrb	r3, [r4, #13]
    104e:	021b      	lsls	r3, r3, #8
		| ((uint32_t)buf[2] << 16)
    1050:	7ba2      	ldrb	r2, [r4, #14]
    1052:	0412      	lsls	r2, r2, #16
    1054:	4313      	orrs	r3, r2
	return (uint32_t)buf[0]
    1056:	7b22      	ldrb	r2, [r4, #12]
		| ((uint32_t)buf[2] << 16)
    1058:	4313      	orrs	r3, r2
		| ((uint32_t)buf[3] << 24);
    105a:	7be2      	ldrb	r2, [r4, #15]
    105c:	0612      	lsls	r2, r2, #24
    105e:	4313      	orrs	r3, r2
		q[7] = cm3 ^ br_dec32le(buf + 12);
    1060:	4652      	mov	r2, sl
    1062:	4053      	eors	r3, r2
    1064:	9313      	str	r3, [sp, #76]	; 0x4c
		br_aes_ct_ortho(q);
    1066:	a80c      	add	r0, sp, #48	; 0x30
    1068:	4a50      	ldr	r2, [pc, #320]	; (11ac <br_aes_ct_ctrcbc_decrypt+0x314>)
    106a:	4790      	blx	r2
		br_aes_ct_bitslice_encrypt(ctx->num_rounds, sk_exp, q);
    106c:	23f4      	movs	r3, #244	; 0xf4
    106e:	9a04      	ldr	r2, [sp, #16]
    1070:	58d0      	ldr	r0, [r2, r3]
    1072:	aa0c      	add	r2, sp, #48	; 0x30
    1074:	a914      	add	r1, sp, #80	; 0x50
    1076:	4b4e      	ldr	r3, [pc, #312]	; (11b0 <br_aes_ct_ctrcbc_decrypt+0x318>)
    1078:	469c      	mov	ip, r3
    107a:	47e0      	blx	ip
		br_aes_ct_ortho(q);
    107c:	a80c      	add	r0, sp, #48	; 0x30
    107e:	4a4b      	ldr	r2, [pc, #300]	; (11ac <br_aes_ct_ctrcbc_decrypt+0x314>)
    1080:	4790      	blx	r2

		br_enc32le(tmp +  0, q[0]);
    1082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	buf[0] = (unsigned char)x;
    1084:	aa08      	add	r2, sp, #32
    1086:	7013      	strb	r3, [r2, #0]
	buf[1] = (unsigned char)(x >> 8);
    1088:	0a1a      	lsrs	r2, r3, #8
    108a:	a908      	add	r1, sp, #32
    108c:	704a      	strb	r2, [r1, #1]
	buf[2] = (unsigned char)(x >> 16);
    108e:	0c1a      	lsrs	r2, r3, #16
    1090:	708a      	strb	r2, [r1, #2]
	buf[3] = (unsigned char)(x >> 24);
    1092:	0e1b      	lsrs	r3, r3, #24
    1094:	70cb      	strb	r3, [r1, #3]
		br_enc32le(tmp +  4, q[2]);
    1096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	buf[0] = (unsigned char)x;
    1098:	710b      	strb	r3, [r1, #4]
	buf[1] = (unsigned char)(x >> 8);
    109a:	0a1a      	lsrs	r2, r3, #8
    109c:	714a      	strb	r2, [r1, #5]
	buf[2] = (unsigned char)(x >> 16);
    109e:	0c1a      	lsrs	r2, r3, #16
    10a0:	718a      	strb	r2, [r1, #6]
	buf[3] = (unsigned char)(x >> 24);
    10a2:	0e1b      	lsrs	r3, r3, #24
    10a4:	71cb      	strb	r3, [r1, #7]
		br_enc32le(tmp +  8, q[4]);
    10a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	buf[0] = (unsigned char)x;
    10a8:	720b      	strb	r3, [r1, #8]
	buf[1] = (unsigned char)(x >> 8);
    10aa:	0a1a      	lsrs	r2, r3, #8
    10ac:	724a      	strb	r2, [r1, #9]
	buf[2] = (unsigned char)(x >> 16);
    10ae:	0c1a      	lsrs	r2, r3, #16
    10b0:	728a      	strb	r2, [r1, #10]
	buf[3] = (unsigned char)(x >> 24);
    10b2:	0e1b      	lsrs	r3, r3, #24
    10b4:	72cb      	strb	r3, [r1, #11]
		br_enc32le(tmp + 12, q[6]);
    10b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
	buf[0] = (unsigned char)x;
    10b8:	730b      	strb	r3, [r1, #12]
	buf[1] = (unsigned char)(x >> 8);
    10ba:	0a1a      	lsrs	r2, r3, #8
    10bc:	734a      	strb	r2, [r1, #13]
	buf[2] = (unsigned char)(x >> 16);
    10be:	0c1a      	lsrs	r2, r3, #16
    10c0:	738a      	strb	r2, [r1, #14]
	buf[3] = (unsigned char)(x >> 24);
    10c2:	0e1b      	lsrs	r3, r3, #24
    10c4:	73cb      	strb	r3, [r1, #15]
		xorbuf(buf, tmp, 16);
    10c6:	2210      	movs	r2, #16
    10c8:	0020      	movs	r0, r4
    10ca:	4b3a      	ldr	r3, [pc, #232]	; (11b4 <br_aes_ct_ctrcbc_decrypt+0x31c>)
    10cc:	4798      	blx	r3
		cm0 = q[1];
    10ce:	980d      	ldr	r0, [sp, #52]	; 0x34
		cm1 = q[3];
    10d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    10d2:	4694      	mov	ip, r2
		cm2 = q[5];
    10d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    10d6:	9202      	str	r2, [sp, #8]
		cm3 = q[7];
    10d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    10da:	4692      	mov	sl, r2
		buf += 16;
    10dc:	3410      	adds	r4, #16
		len -= 16;
    10de:	9a96      	ldr	r2, [sp, #600]	; 0x258
    10e0:	3a10      	subs	r2, #16
    10e2:	9296      	str	r2, [sp, #600]	; 0x258
    10e4:	003a      	movs	r2, r7
    10e6:	3201      	adds	r2, #1
    10e8:	32ff      	adds	r2, #255	; 0xff
    10ea:	9203      	str	r2, [sp, #12]
    10ec:	9b01      	ldr	r3, [sp, #4]
    10ee:	3b01      	subs	r3, #1
    10f0:	9301      	str	r3, [sp, #4]
	while (len > 0) {
    10f2:	9b96      	ldr	r3, [sp, #600]	; 0x258
    10f4:	2b00      	cmp	r3, #0
    10f6:	d000      	beq.n	10fa <br_aes_ct_ctrcbc_decrypt+0x262>
    10f8:	e748      	b.n	f8c <br_aes_ct_ctrcbc_decrypt+0xf4>
    10fa:	464b      	mov	r3, r9
    10fc:	9305      	str	r3, [sp, #20]
    10fe:	4661      	mov	r1, ip
    1100:	9a02      	ldr	r2, [sp, #8]
    1102:	4653      	mov	r3, sl
	buf[0] = (unsigned char)(x >> 24);
    1104:	9c05      	ldr	r4, [sp, #20]
    1106:	0e24      	lsrs	r4, r4, #24
    1108:	9f07      	ldr	r7, [sp, #28]
    110a:	703c      	strb	r4, [r7, #0]
	buf[1] = (unsigned char)(x >> 16);
    110c:	9c05      	ldr	r4, [sp, #20]
    110e:	0c24      	lsrs	r4, r4, #16
    1110:	707c      	strb	r4, [r7, #1]
	buf[2] = (unsigned char)(x >> 8);
    1112:	9c05      	ldr	r4, [sp, #20]
    1114:	0a24      	lsrs	r4, r4, #8
    1116:	70bc      	strb	r4, [r7, #2]
	buf[3] = (unsigned char)x;
    1118:	466c      	mov	r4, sp
    111a:	7d24      	ldrb	r4, [r4, #20]
    111c:	70fc      	strb	r4, [r7, #3]
	buf[0] = (unsigned char)(x >> 24);
    111e:	0e34      	lsrs	r4, r6, #24
    1120:	713c      	strb	r4, [r7, #4]
	buf[1] = (unsigned char)(x >> 16);
    1122:	0c34      	lsrs	r4, r6, #16
    1124:	717c      	strb	r4, [r7, #5]
	buf[2] = (unsigned char)(x >> 8);
    1126:	0a34      	lsrs	r4, r6, #8
    1128:	71bc      	strb	r4, [r7, #6]
	buf[3] = (unsigned char)x;
    112a:	71fe      	strb	r6, [r7, #7]
	buf[0] = (unsigned char)(x >> 24);
    112c:	0e2c      	lsrs	r4, r5, #24
    112e:	723c      	strb	r4, [r7, #8]
	buf[1] = (unsigned char)(x >> 16);
    1130:	0c2c      	lsrs	r4, r5, #16
    1132:	727c      	strb	r4, [r7, #9]
	buf[2] = (unsigned char)(x >> 8);
    1134:	0a2c      	lsrs	r4, r5, #8
    1136:	72bc      	strb	r4, [r7, #10]
	buf[3] = (unsigned char)x;
    1138:	72fd      	strb	r5, [r7, #11]
	buf[0] = (unsigned char)(x >> 24);
    113a:	4644      	mov	r4, r8
    113c:	0e24      	lsrs	r4, r4, #24
    113e:	733c      	strb	r4, [r7, #12]
	buf[1] = (unsigned char)(x >> 16);
    1140:	4644      	mov	r4, r8
    1142:	0c24      	lsrs	r4, r4, #16
    1144:	737c      	strb	r4, [r7, #13]
	buf[2] = (unsigned char)(x >> 8);
    1146:	4644      	mov	r4, r8
    1148:	0a24      	lsrs	r4, r4, #8
    114a:	73bc      	strb	r4, [r7, #14]
	buf[3] = (unsigned char)x;
    114c:	4644      	mov	r4, r8
    114e:	73fc      	strb	r4, [r7, #15]
	buf[0] = (unsigned char)x;
    1150:	9d06      	ldr	r5, [sp, #24]
    1152:	7028      	strb	r0, [r5, #0]
	buf[1] = (unsigned char)(x >> 8);
    1154:	0a04      	lsrs	r4, r0, #8
    1156:	706c      	strb	r4, [r5, #1]
	buf[2] = (unsigned char)(x >> 16);
    1158:	0c04      	lsrs	r4, r0, #16
    115a:	70ac      	strb	r4, [r5, #2]
	buf[3] = (unsigned char)(x >> 24);
    115c:	0e00      	lsrs	r0, r0, #24
    115e:	70e8      	strb	r0, [r5, #3]
	buf[0] = (unsigned char)x;
    1160:	7129      	strb	r1, [r5, #4]
	buf[1] = (unsigned char)(x >> 8);
    1162:	0a08      	lsrs	r0, r1, #8
    1164:	7168      	strb	r0, [r5, #5]
	buf[2] = (unsigned char)(x >> 16);
    1166:	0c08      	lsrs	r0, r1, #16
    1168:	71a8      	strb	r0, [r5, #6]
	buf[3] = (unsigned char)(x >> 24);
    116a:	0e09      	lsrs	r1, r1, #24
    116c:	71e9      	strb	r1, [r5, #7]
	buf[0] = (unsigned char)x;
    116e:	722a      	strb	r2, [r5, #8]
	buf[1] = (unsigned char)(x >> 8);
    1170:	0a11      	lsrs	r1, r2, #8
    1172:	7269      	strb	r1, [r5, #9]
	buf[2] = (unsigned char)(x >> 16);
    1174:	0c11      	lsrs	r1, r2, #16
    1176:	72a9      	strb	r1, [r5, #10]
	buf[3] = (unsigned char)(x >> 24);
    1178:	0e12      	lsrs	r2, r2, #24
    117a:	72ea      	strb	r2, [r5, #11]
	buf[0] = (unsigned char)x;
    117c:	732b      	strb	r3, [r5, #12]
	buf[1] = (unsigned char)(x >> 8);
    117e:	0a1a      	lsrs	r2, r3, #8
    1180:	736a      	strb	r2, [r5, #13]
	buf[2] = (unsigned char)(x >> 16);
    1182:	0c1a      	lsrs	r2, r3, #16
    1184:	73aa      	strb	r2, [r5, #14]
	buf[3] = (unsigned char)(x >> 24);
    1186:	0e1b      	lsrs	r3, r3, #24
    1188:	73eb      	strb	r3, [r5, #15]
	br_enc32be(ivbuf + 12, iv3);
	br_enc32le((unsigned char *)cbcmac +  0, cm0);
	br_enc32le((unsigned char *)cbcmac +  4, cm1);
	br_enc32le((unsigned char *)cbcmac +  8, cm2);
	br_enc32le((unsigned char *)cbcmac + 12, cm3);
}
    118a:	238d      	movs	r3, #141	; 0x8d
    118c:	009b      	lsls	r3, r3, #2
    118e:	449d      	add	sp, r3
    1190:	bc3c      	pop	{r2, r3, r4, r5}
    1192:	4690      	mov	r8, r2
    1194:	4699      	mov	r9, r3
    1196:	46a2      	mov	sl, r4
    1198:	46ab      	mov	fp, r5
    119a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    119c:	fffffdcc 	.word	0xfffffdcc
    11a0:	00000695 	.word	0x00000695
    11a4:	ff00ff00 	.word	0xff00ff00
    11a8:	00ff00ff 	.word	0x00ff00ff
    11ac:	00000389 	.word	0x00000389
    11b0:	000011b9 	.word	0x000011b9
    11b4:	000006cd 	.word	0x000006cd

000011b8 <br_aes_ct_bitslice_encrypt>:

/* see inner.h */
void
br_aes_ct_bitslice_encrypt(unsigned num_rounds,
	const uint32_t *skey, uint32_t *q)
{
    11b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ba:	46de      	mov	lr, fp
    11bc:	4657      	mov	r7, sl
    11be:	464e      	mov	r6, r9
    11c0:	4645      	mov	r5, r8
    11c2:	b5e0      	push	{r5, r6, r7, lr}
    11c4:	b08b      	sub	sp, #44	; 0x2c
    11c6:	9008      	str	r0, [sp, #32]
    11c8:	9109      	str	r1, [sp, #36]	; 0x24
    11ca:	4693      	mov	fp, r2
	q[0] ^= sk[0];
    11cc:	000a      	movs	r2, r1
    11ce:	680b      	ldr	r3, [r1, #0]
    11d0:	4659      	mov	r1, fp
    11d2:	6809      	ldr	r1, [r1, #0]
    11d4:	404b      	eors	r3, r1
    11d6:	4659      	mov	r1, fp
    11d8:	600b      	str	r3, [r1, #0]
	q[1] ^= sk[1];
    11da:	6853      	ldr	r3, [r2, #4]
    11dc:	6849      	ldr	r1, [r1, #4]
    11de:	404b      	eors	r3, r1
    11e0:	4659      	mov	r1, fp
    11e2:	604b      	str	r3, [r1, #4]
	q[2] ^= sk[2];
    11e4:	6893      	ldr	r3, [r2, #8]
    11e6:	6889      	ldr	r1, [r1, #8]
    11e8:	404b      	eors	r3, r1
    11ea:	4659      	mov	r1, fp
    11ec:	608b      	str	r3, [r1, #8]
	q[3] ^= sk[3];
    11ee:	68d3      	ldr	r3, [r2, #12]
    11f0:	68c9      	ldr	r1, [r1, #12]
    11f2:	404b      	eors	r3, r1
    11f4:	4659      	mov	r1, fp
    11f6:	60cb      	str	r3, [r1, #12]
	q[4] ^= sk[4];
    11f8:	6913      	ldr	r3, [r2, #16]
    11fa:	6909      	ldr	r1, [r1, #16]
    11fc:	404b      	eors	r3, r1
    11fe:	4659      	mov	r1, fp
    1200:	610b      	str	r3, [r1, #16]
	q[5] ^= sk[5];
    1202:	6953      	ldr	r3, [r2, #20]
    1204:	6949      	ldr	r1, [r1, #20]
    1206:	404b      	eors	r3, r1
    1208:	4659      	mov	r1, fp
    120a:	614b      	str	r3, [r1, #20]
	q[6] ^= sk[6];
    120c:	6993      	ldr	r3, [r2, #24]
    120e:	6989      	ldr	r1, [r1, #24]
    1210:	404b      	eors	r3, r1
    1212:	4659      	mov	r1, fp
    1214:	618b      	str	r3, [r1, #24]
	q[7] ^= sk[7];
    1216:	69d3      	ldr	r3, [r2, #28]
    1218:	9301      	str	r3, [sp, #4]
    121a:	69c9      	ldr	r1, [r1, #28]
    121c:	404b      	eors	r3, r1
    121e:	4659      	mov	r1, fp
    1220:	61cb      	str	r3, [r1, #28]
	unsigned u;

	add_round_key(q, skey);
	for (u = 1; u < num_rounds; u ++) {
    1222:	2801      	cmp	r0, #1
    1224:	d800      	bhi.n	1228 <br_aes_ct_bitslice_encrypt+0x70>
    1226:	e0de      	b.n	13e6 <br_aes_ct_bitslice_encrypt+0x22e>
    1228:	0013      	movs	r3, r2
    122a:	2220      	movs	r2, #32
    122c:	4694      	mov	ip, r2
    122e:	4463      	add	r3, ip
    1230:	4699      	mov	r9, r3
    1232:	2301      	movs	r3, #1
    1234:	9303      	str	r3, [sp, #12]
    1236:	331f      	adds	r3, #31
    1238:	445b      	add	r3, fp
			| ((x & 0x0000FC00) >> 2) | ((x & 0x00000300) << 6)
    123a:	465c      	mov	r4, fp
    123c:	469b      	mov	fp, r3
    123e:	e0a3      	b.n	1388 <br_aes_ct_bitslice_encrypt+0x1d0>
    1240:	465c      	mov	r4, fp
    1242:	468b      	mov	fp, r1
	q0 = q[0];
    1244:	6827      	ldr	r7, [r4, #0]
	q7 = q[7];
    1246:	69e3      	ldr	r3, [r4, #28]
    1248:	9301      	str	r3, [sp, #4]
	r0 = (q0 >> 8) | (q0 << 24);
    124a:	2308      	movs	r3, #8
    124c:	003e      	movs	r6, r7
    124e:	41de      	rors	r6, r3
	r1 = (q1 >> 8) | (q1 << 24);
    1250:	6861      	ldr	r1, [r4, #4]
    1252:	41d9      	rors	r1, r3
    1254:	468c      	mov	ip, r1
	r2 = (q2 >> 8) | (q2 << 24);
    1256:	68a0      	ldr	r0, [r4, #8]
    1258:	41d8      	rors	r0, r3
	r3 = (q3 >> 8) | (q3 << 24);
    125a:	68e1      	ldr	r1, [r4, #12]
    125c:	41d9      	rors	r1, r3
	r4 = (q4 >> 8) | (q4 << 24);
    125e:	6925      	ldr	r5, [r4, #16]
    1260:	41dd      	rors	r5, r3
    1262:	9504      	str	r5, [sp, #16]
	r5 = (q5 >> 8) | (q5 << 24);
    1264:	6965      	ldr	r5, [r4, #20]
    1266:	41dd      	rors	r5, r3
    1268:	9505      	str	r5, [sp, #20]
	r6 = (q6 >> 8) | (q6 << 24);
    126a:	69a5      	ldr	r5, [r4, #24]
    126c:	41dd      	rors	r5, r3
    126e:	9506      	str	r5, [sp, #24]
	r7 = (q7 >> 8) | (q7 << 24);
    1270:	9d01      	ldr	r5, [sp, #4]
    1272:	41dd      	rors	r5, r3
    1274:	002a      	movs	r2, r5
	q[0] = q7 ^ r7 ^ r0 ^ rotr16(q0 ^ r0);
    1276:	9d01      	ldr	r5, [sp, #4]
    1278:	4055      	eors	r5, r2
    127a:	002b      	movs	r3, r5
    127c:	4077      	eors	r7, r6
    127e:	003d      	movs	r5, r7
    1280:	9307      	str	r3, [sp, #28]
    1282:	001f      	movs	r7, r3
    1284:	4077      	eors	r7, r6
    1286:	46ba      	mov	sl, r7
	return (x << 16) | (x >> 16);
    1288:	2710      	movs	r7, #16
    128a:	002b      	movs	r3, r5
    128c:	41fb      	rors	r3, r7
    128e:	001e      	movs	r6, r3
	q[0] = q7 ^ r7 ^ r0 ^ rotr16(q0 ^ r0);
    1290:	4653      	mov	r3, sl
    1292:	4073      	eors	r3, r6
    1294:	469a      	mov	sl, r3
    1296:	6023      	str	r3, [r4, #0]
	q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr16(q1 ^ r1);
    1298:	6863      	ldr	r3, [r4, #4]
    129a:	4666      	mov	r6, ip
    129c:	4073      	eors	r3, r6
    129e:	001e      	movs	r6, r3
    12a0:	4663      	mov	r3, ip
    12a2:	9202      	str	r2, [sp, #8]
    12a4:	4053      	eors	r3, r2
    12a6:	9a01      	ldr	r2, [sp, #4]
    12a8:	4053      	eors	r3, r2
    12aa:	406b      	eors	r3, r5
    12ac:	4698      	mov	r8, r3
	return (x << 16) | (x >> 16);
    12ae:	0033      	movs	r3, r6
    12b0:	41fb      	rors	r3, r7
    12b2:	001d      	movs	r5, r3
	q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr16(q1 ^ r1);
    12b4:	4643      	mov	r3, r8
    12b6:	406b      	eors	r3, r5
    12b8:	4698      	mov	r8, r3
    12ba:	6063      	str	r3, [r4, #4]
	q[2] = q1 ^ r1 ^ r2 ^ rotr16(q2 ^ r2);
    12bc:	68a3      	ldr	r3, [r4, #8]
    12be:	4043      	eors	r3, r0
    12c0:	001d      	movs	r5, r3
    12c2:	4046      	eors	r6, r0
	return (x << 16) | (x >> 16);
    12c4:	0018      	movs	r0, r3
    12c6:	41f8      	rors	r0, r7
	q[2] = q1 ^ r1 ^ r2 ^ rotr16(q2 ^ r2);
    12c8:	0033      	movs	r3, r6
    12ca:	4043      	eors	r3, r0
    12cc:	469c      	mov	ip, r3
    12ce:	60a3      	str	r3, [r4, #8]
	q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr16(q3 ^ r3);
    12d0:	68e0      	ldr	r0, [r4, #12]
    12d2:	4048      	eors	r0, r1
    12d4:	9a02      	ldr	r2, [sp, #8]
    12d6:	4051      	eors	r1, r2
    12d8:	000e      	movs	r6, r1
    12da:	9b01      	ldr	r3, [sp, #4]
    12dc:	405e      	eors	r6, r3
    12de:	4075      	eors	r5, r6
	return (x << 16) | (x >> 16);
    12e0:	0001      	movs	r1, r0
    12e2:	41f9      	rors	r1, r7
	q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr16(q3 ^ r3);
    12e4:	404d      	eors	r5, r1
    12e6:	60e5      	str	r5, [r4, #12]
	q[4] = q3 ^ r3 ^ q7 ^ r7 ^ r4 ^ rotr16(q4 ^ r4);
    12e8:	6923      	ldr	r3, [r4, #16]
    12ea:	9e04      	ldr	r6, [sp, #16]
    12ec:	4073      	eors	r3, r6
    12ee:	0019      	movs	r1, r3
    12f0:	4056      	eors	r6, r2
    12f2:	9b01      	ldr	r3, [sp, #4]
    12f4:	405e      	eors	r6, r3
    12f6:	4070      	eors	r0, r6
	return (x << 16) | (x >> 16);
    12f8:	000a      	movs	r2, r1
    12fa:	41fa      	rors	r2, r7
	q[4] = q3 ^ r3 ^ q7 ^ r7 ^ r4 ^ rotr16(q4 ^ r4);
    12fc:	4050      	eors	r0, r2
    12fe:	6120      	str	r0, [r4, #16]
	q[5] = q4 ^ r4 ^ r5 ^ rotr16(q5 ^ r5);
    1300:	6963      	ldr	r3, [r4, #20]
    1302:	9e05      	ldr	r6, [sp, #20]
    1304:	4073      	eors	r3, r6
    1306:	001a      	movs	r2, r3
    1308:	4071      	eors	r1, r6
	return (x << 16) | (x >> 16);
    130a:	001e      	movs	r6, r3
    130c:	41fe      	rors	r6, r7
	q[5] = q4 ^ r4 ^ r5 ^ rotr16(q5 ^ r5);
    130e:	4071      	eors	r1, r6
    1310:	6161      	str	r1, [r4, #20]
	q[6] = q5 ^ r5 ^ r6 ^ rotr16(q6 ^ r6);
    1312:	69a6      	ldr	r6, [r4, #24]
    1314:	9b06      	ldr	r3, [sp, #24]
    1316:	405e      	eors	r6, r3
    1318:	405a      	eors	r2, r3
	return (x << 16) | (x >> 16);
    131a:	0033      	movs	r3, r6
    131c:	41fe      	rors	r6, r7
	q[6] = q5 ^ r5 ^ r6 ^ rotr16(q6 ^ r6);
    131e:	4072      	eors	r2, r6
    1320:	61a2      	str	r2, [r4, #24]
	q[7] = q6 ^ r6 ^ r7 ^ rotr16(q7 ^ r7);
    1322:	001e      	movs	r6, r3
    1324:	9b02      	ldr	r3, [sp, #8]
    1326:	4073      	eors	r3, r6
	return (x << 16) | (x >> 16);
    1328:	9e07      	ldr	r6, [sp, #28]
    132a:	41fe      	rors	r6, r7
	q[7] = q6 ^ r6 ^ r7 ^ rotr16(q7 ^ r7);
    132c:	4073      	eors	r3, r6
    132e:	61e3      	str	r3, [r4, #28]
	q[0] ^= sk[0];
    1330:	464f      	mov	r7, r9
    1332:	4656      	mov	r6, sl
    1334:	683f      	ldr	r7, [r7, #0]
    1336:	407e      	eors	r6, r7
    1338:	6026      	str	r6, [r4, #0]
	q[1] ^= sk[1];
    133a:	464f      	mov	r7, r9
    133c:	4646      	mov	r6, r8
    133e:	687f      	ldr	r7, [r7, #4]
    1340:	407e      	eors	r6, r7
    1342:	6066      	str	r6, [r4, #4]
	q[2] ^= sk[2];
    1344:	464f      	mov	r7, r9
    1346:	4666      	mov	r6, ip
    1348:	68bf      	ldr	r7, [r7, #8]
    134a:	407e      	eors	r6, r7
    134c:	60a6      	str	r6, [r4, #8]
	q[3] ^= sk[3];
    134e:	464e      	mov	r6, r9
    1350:	68f6      	ldr	r6, [r6, #12]
    1352:	4075      	eors	r5, r6
    1354:	60e5      	str	r5, [r4, #12]
	q[4] ^= sk[4];
    1356:	464d      	mov	r5, r9
    1358:	692d      	ldr	r5, [r5, #16]
    135a:	4068      	eors	r0, r5
    135c:	6120      	str	r0, [r4, #16]
	q[5] ^= sk[5];
    135e:	4648      	mov	r0, r9
    1360:	6940      	ldr	r0, [r0, #20]
    1362:	4041      	eors	r1, r0
    1364:	6161      	str	r1, [r4, #20]
	q[6] ^= sk[6];
    1366:	4649      	mov	r1, r9
    1368:	6989      	ldr	r1, [r1, #24]
    136a:	404a      	eors	r2, r1
    136c:	61a2      	str	r2, [r4, #24]
	q[7] ^= sk[7];
    136e:	464a      	mov	r2, r9
    1370:	69d2      	ldr	r2, [r2, #28]
    1372:	4053      	eors	r3, r2
    1374:	61e3      	str	r3, [r4, #28]
	for (u = 1; u < num_rounds; u ++) {
    1376:	9b03      	ldr	r3, [sp, #12]
    1378:	3301      	adds	r3, #1
    137a:	9303      	str	r3, [sp, #12]
    137c:	2220      	movs	r2, #32
    137e:	4694      	mov	ip, r2
    1380:	44e1      	add	r9, ip
    1382:	9a08      	ldr	r2, [sp, #32]
    1384:	429a      	cmp	r2, r3
    1386:	d02d      	beq.n	13e4 <br_aes_ct_bitslice_encrypt+0x22c>
		br_aes_ct_bitslice_Sbox(q);
    1388:	0020      	movs	r0, r4
    138a:	4b4a      	ldr	r3, [pc, #296]	; (14b4 <br_aes_ct_bitslice_encrypt+0x2fc>)
    138c:	4798      	blx	r3
    138e:	0020      	movs	r0, r4
			| ((x & 0x0000FC00) >> 2) | ((x & 0x00000300) << 6)
    1390:	23c0      	movs	r3, #192	; 0xc0
    1392:	021b      	lsls	r3, r3, #8
    1394:	4698      	mov	r8, r3
		q[i] = (x & 0x000000FF)
    1396:	23ff      	movs	r3, #255	; 0xff
    1398:	469c      	mov	ip, r3
			| ((x & 0x00F00000) >> 4) | ((x & 0x000F0000) << 4)
    139a:	27f0      	movs	r7, #240	; 0xf0
    139c:	033f      	lsls	r7, r7, #12
    139e:	26f0      	movs	r6, #240	; 0xf0
    13a0:	0436      	lsls	r6, r6, #16
			| ((x & 0xC0000000) >> 6) | ((x & 0x3F000000) << 2);
    13a2:	4659      	mov	r1, fp
    13a4:	46a3      	mov	fp, r4
		x = q[i];
    13a6:	6802      	ldr	r2, [r0, #0]
			| ((x & 0x0000FC00) >> 2) | ((x & 0x00000300) << 6)
    13a8:	0893      	lsrs	r3, r2, #2
    13aa:	24fc      	movs	r4, #252	; 0xfc
    13ac:	01a4      	lsls	r4, r4, #6
    13ae:	4023      	ands	r3, r4
    13b0:	0194      	lsls	r4, r2, #6
    13b2:	4645      	mov	r5, r8
    13b4:	402c      	ands	r4, r5
    13b6:	4323      	orrs	r3, r4
		q[i] = (x & 0x000000FF)
    13b8:	4664      	mov	r4, ip
    13ba:	4014      	ands	r4, r2
			| ((x & 0x0000FC00) >> 2) | ((x & 0x00000300) << 6)
    13bc:	4323      	orrs	r3, r4
			| ((x & 0x00F00000) >> 4) | ((x & 0x000F0000) << 4)
    13be:	0914      	lsrs	r4, r2, #4
    13c0:	403c      	ands	r4, r7
    13c2:	4323      	orrs	r3, r4
    13c4:	0114      	lsls	r4, r2, #4
    13c6:	4034      	ands	r4, r6
    13c8:	4323      	orrs	r3, r4
			| ((x & 0xC0000000) >> 6) | ((x & 0x3F000000) << 2);
    13ca:	0994      	lsrs	r4, r2, #6
    13cc:	25c0      	movs	r5, #192	; 0xc0
    13ce:	04ad      	lsls	r5, r5, #18
    13d0:	402c      	ands	r4, r5
    13d2:	4323      	orrs	r3, r4
    13d4:	0092      	lsls	r2, r2, #2
    13d6:	0e92      	lsrs	r2, r2, #26
    13d8:	0692      	lsls	r2, r2, #26
    13da:	4313      	orrs	r3, r2
		q[i] = (x & 0x000000FF)
    13dc:	c008      	stmia	r0!, {r3}
	for (i = 0; i < 8; i ++) {
    13de:	4288      	cmp	r0, r1
    13e0:	d1e1      	bne.n	13a6 <br_aes_ct_bitslice_encrypt+0x1ee>
    13e2:	e72d      	b.n	1240 <br_aes_ct_bitslice_encrypt+0x88>
    13e4:	46a3      	mov	fp, r4
		shift_rows(q);
		mix_columns(q);
		add_round_key(q, skey + (u << 3));
	}
	br_aes_ct_bitslice_Sbox(q);
    13e6:	4658      	mov	r0, fp
    13e8:	4b32      	ldr	r3, [pc, #200]	; (14b4 <br_aes_ct_bitslice_encrypt+0x2fc>)
    13ea:	4798      	blx	r3
    13ec:	4658      	mov	r0, fp
    13ee:	2320      	movs	r3, #32
    13f0:	445b      	add	r3, fp
    13f2:	4699      	mov	r9, r3
			| ((x & 0x0000FC00) >> 2) | ((x & 0x00000300) << 6)
    13f4:	23fc      	movs	r3, #252	; 0xfc
    13f6:	019b      	lsls	r3, r3, #6
    13f8:	4698      	mov	r8, r3
    13fa:	23c0      	movs	r3, #192	; 0xc0
    13fc:	021b      	lsls	r3, r3, #8
    13fe:	469c      	mov	ip, r3
		q[i] = (x & 0x000000FF)
    1400:	27ff      	movs	r7, #255	; 0xff
			| ((x & 0x00F00000) >> 4) | ((x & 0x000F0000) << 4)
    1402:	26f0      	movs	r6, #240	; 0xf0
    1404:	0336      	lsls	r6, r6, #12
    1406:	23f0      	movs	r3, #240	; 0xf0
    1408:	041b      	lsls	r3, r3, #16
    140a:	469a      	mov	sl, r3
			| ((x & 0xC0000000) >> 6) | ((x & 0x3F000000) << 2);
    140c:	4649      	mov	r1, r9
		x = q[i];
    140e:	6802      	ldr	r2, [r0, #0]
			| ((x & 0x0000FC00) >> 2) | ((x & 0x00000300) << 6)
    1410:	0893      	lsrs	r3, r2, #2
    1412:	4644      	mov	r4, r8
    1414:	4023      	ands	r3, r4
    1416:	0194      	lsls	r4, r2, #6
    1418:	4665      	mov	r5, ip
    141a:	402c      	ands	r4, r5
    141c:	4323      	orrs	r3, r4
		q[i] = (x & 0x000000FF)
    141e:	003c      	movs	r4, r7
    1420:	4014      	ands	r4, r2
			| ((x & 0x0000FC00) >> 2) | ((x & 0x00000300) << 6)
    1422:	4323      	orrs	r3, r4
			| ((x & 0x00F00000) >> 4) | ((x & 0x000F0000) << 4)
    1424:	0914      	lsrs	r4, r2, #4
    1426:	4034      	ands	r4, r6
    1428:	4323      	orrs	r3, r4
    142a:	0114      	lsls	r4, r2, #4
    142c:	4655      	mov	r5, sl
    142e:	402c      	ands	r4, r5
    1430:	4323      	orrs	r3, r4
			| ((x & 0xC0000000) >> 6) | ((x & 0x3F000000) << 2);
    1432:	0994      	lsrs	r4, r2, #6
    1434:	25c0      	movs	r5, #192	; 0xc0
    1436:	04ad      	lsls	r5, r5, #18
    1438:	402c      	ands	r4, r5
    143a:	4323      	orrs	r3, r4
    143c:	0092      	lsls	r2, r2, #2
    143e:	0e92      	lsrs	r2, r2, #26
    1440:	0692      	lsls	r2, r2, #26
    1442:	4313      	orrs	r3, r2
		q[i] = (x & 0x000000FF)
    1444:	c008      	stmia	r0!, {r3}
	for (i = 0; i < 8; i ++) {
    1446:	4281      	cmp	r1, r0
    1448:	d1e1      	bne.n	140e <br_aes_ct_bitslice_encrypt+0x256>
	shift_rows(q);
	add_round_key(q, skey + (num_rounds << 3));
    144a:	9b08      	ldr	r3, [sp, #32]
    144c:	015b      	lsls	r3, r3, #5
    144e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1450:	4694      	mov	ip, r2
    1452:	4463      	add	r3, ip
	q[0] ^= sk[0];
    1454:	465a      	mov	r2, fp
    1456:	6812      	ldr	r2, [r2, #0]
    1458:	6819      	ldr	r1, [r3, #0]
    145a:	404a      	eors	r2, r1
    145c:	4659      	mov	r1, fp
    145e:	600a      	str	r2, [r1, #0]
	q[1] ^= sk[1];
    1460:	684a      	ldr	r2, [r1, #4]
    1462:	6859      	ldr	r1, [r3, #4]
    1464:	404a      	eors	r2, r1
    1466:	4659      	mov	r1, fp
    1468:	604a      	str	r2, [r1, #4]
	q[2] ^= sk[2];
    146a:	688a      	ldr	r2, [r1, #8]
    146c:	6899      	ldr	r1, [r3, #8]
    146e:	404a      	eors	r2, r1
    1470:	4659      	mov	r1, fp
    1472:	608a      	str	r2, [r1, #8]
	q[3] ^= sk[3];
    1474:	68ca      	ldr	r2, [r1, #12]
    1476:	68d9      	ldr	r1, [r3, #12]
    1478:	404a      	eors	r2, r1
    147a:	4659      	mov	r1, fp
    147c:	60ca      	str	r2, [r1, #12]
	q[4] ^= sk[4];
    147e:	690a      	ldr	r2, [r1, #16]
    1480:	6919      	ldr	r1, [r3, #16]
    1482:	404a      	eors	r2, r1
    1484:	4659      	mov	r1, fp
    1486:	610a      	str	r2, [r1, #16]
	q[5] ^= sk[5];
    1488:	694a      	ldr	r2, [r1, #20]
    148a:	6959      	ldr	r1, [r3, #20]
    148c:	404a      	eors	r2, r1
    148e:	4659      	mov	r1, fp
    1490:	614a      	str	r2, [r1, #20]
	q[6] ^= sk[6];
    1492:	698a      	ldr	r2, [r1, #24]
    1494:	6999      	ldr	r1, [r3, #24]
    1496:	404a      	eors	r2, r1
    1498:	4659      	mov	r1, fp
    149a:	618a      	str	r2, [r1, #24]
	q[7] ^= sk[7];
    149c:	69db      	ldr	r3, [r3, #28]
    149e:	69ca      	ldr	r2, [r1, #28]
    14a0:	4053      	eors	r3, r2
    14a2:	61cb      	str	r3, [r1, #28]
}
    14a4:	b00b      	add	sp, #44	; 0x2c
    14a6:	bc3c      	pop	{r2, r3, r4, r5}
    14a8:	4690      	mov	r8, r2
    14aa:	4699      	mov	r9, r3
    14ac:	46a2      	mov	sl, r4
    14ae:	46ab      	mov	fp, r5
    14b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	00000115 	.word	0x00000115

000014b8 <start_application>:

/**
 * \brief Function to start the application.
 */
static void start_application(void)
{
    14b8:	b580      	push	{r7, lr}
    14ba:	af00      	add	r7, sp, #0
    /* Pointer to the Application Section */
    void (*application_code_entry)(void);

    /* Rebase the Stack Pointer */
    __set_MSP(*(uint32_t *)APP_START_ADDR);
    14bc:	2380      	movs	r3, #128	; 0x80
    14be:	01db      	lsls	r3, r3, #7

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    14c0:	681a      	ldr	r2, [r3, #0]
    14c2:	f382 8808 	msr	MSP, r2

    /* Rebase the vector table base address */
    SCB->VTOR = ((uint32_t)APP_START_ADDR & SCB_VTOR_TBLOFF_Msk);
    14c6:	4a03      	ldr	r2, [pc, #12]	; (14d4 <start_application+0x1c>)
    14c8:	6093      	str	r3, [r2, #8]

    /* Load the Reset Handler address of the application */
    application_code_entry = (void (*)(void))(unsigned *)(*(unsigned *)(APP_START_ADDR + 4));
    14ca:	4b03      	ldr	r3, [pc, #12]	; (14d8 <start_application+0x20>)

    /* Jump to user Reset Handler in the application */
    application_code_entry();
    14cc:	681b      	ldr	r3, [r3, #0]
    14ce:	4798      	blx	r3
}
    14d0:	46bd      	mov	sp, r7
    14d2:	bd80      	pop	{r7, pc}
    14d4:	e000ed00 	.word	0xe000ed00
    14d8:	00004004 	.word	0x00004004

000014dc <main>:

/*! \fn     main(void)
*   \brief  Program Main
*/
int main(void)
{
    14dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    14de:	46de      	mov	lr, fp
    14e0:	4657      	mov	r7, sl
    14e2:	464e      	mov	r6, r9
    14e4:	4645      	mov	r5, r8
    14e6:	b5e0      	push	{r5, r6, r7, lr}
    14e8:	4ccb      	ldr	r4, [pc, #812]	; (1818 <main+0x33c>)
    14ea:	44a5      	add	sp, r4
    _Static_assert(sizeof(bundle_data_b2) % 16 == 0, "Bundle buffer size is not a multiple of block size");
    _Static_assert(sizeof(cur_cbc_mac) == 16, "Invalid MAC buffer size");
#endif
    
    /* Enable switch and 3V3 stepup, set no comms signal, leave some time for stepup powerup */
    platform_io_enable_switch();
    14ec:	4bcb      	ldr	r3, [pc, #812]	; (181c <main+0x340>)
    14ee:	4798      	blx	r3
    platform_io_init_no_comms_signal();
    14f0:	4bcb      	ldr	r3, [pc, #812]	; (1820 <main+0x344>)
    14f2:	4798      	blx	r3
    DELAYMS_8M(100);
    14f4:	4bcb      	ldr	r3, [pc, #812]	; (1824 <main+0x348>)
    14f6:	9305      	str	r3, [sp, #20]
    14f8:	9b05      	ldr	r3, [sp, #20]
    14fa:	1e5a      	subs	r2, r3, #1
    14fc:	9205      	str	r2, [sp, #20]
    14fe:	2b00      	cmp	r3, #0
    1500:	d1fa      	bne.n	14f8 <main+0x1c>
    
    /* Fuses not programmed, start application who will check them anyway */
    if (fuses_check_program(FALSE) != RETURN_OK)
    1502:	2000      	movs	r0, #0
    1504:	4bc8      	ldr	r3, [pc, #800]	; (1828 <main+0x34c>)
    1506:	4798      	blx	r3
    1508:	2800      	cmp	r0, #0
    150a:	d001      	beq.n	1510 <main+0x34>
    {
        start_application();
    150c:	4bc7      	ldr	r3, [pc, #796]	; (182c <main+0x350>)
    150e:	4798      	blx	r3
    }
    
    /* Initialize our settings system: should not returned failed as fuses are programmed for rwee */
    if (custom_fs_settings_init() != CUSTOM_FS_INIT_OK)
    1510:	4bc7      	ldr	r3, [pc, #796]	; (1830 <main+0x354>)
    1512:	4798      	blx	r3
    1514:	2800      	cmp	r0, #0
    1516:	d002      	beq.n	151e <main+0x42>
    {
        platform_io_disable_switch_and_die();
    1518:	4bc6      	ldr	r3, [pc, #792]	; (1834 <main+0x358>)
    151a:	4798      	blx	r3
    151c:	e7fe      	b.n	151c <main+0x40>
        while(1);
    }
    
    /* If no upgrade flag set, jump to application */
    if (custom_fs_settings_check_fw_upgrade_flag() == FALSE)
    151e:	4bc6      	ldr	r3, [pc, #792]	; (1838 <main+0x35c>)
    1520:	4798      	blx	r3
    1522:	2800      	cmp	r0, #0
    1524:	d03d      	beq.n	15a2 <main+0xc6>
    {
        start_application();
    }
    
    /* Store the dataflash descriptor for our custom fs library */
    custom_fs_set_dataflash_descriptor(&dataflash_descriptor);
    1526:	4cc5      	ldr	r4, [pc, #788]	; (183c <main+0x360>)
    1528:	0020      	movs	r0, r4
    152a:	4bc5      	ldr	r3, [pc, #788]	; (1840 <main+0x364>)
    152c:	4798      	blx	r3
    
    /* Change the MCU main clock to 48MHz */
    clocks_start_48MDFLL();
    152e:	4bc5      	ldr	r3, [pc, #788]	; (1844 <main+0x368>)
    1530:	4798      	blx	r3
    
    /* Initialize flash io ports */
    platform_io_init_flash_ports();
    1532:	4bc5      	ldr	r3, [pc, #788]	; (1848 <main+0x36c>)
    1534:	4798      	blx	r3
    
    /* Check for external flash presence */
    if (dataflash_check_presence(&dataflash_descriptor) == RETURN_NOK)
    1536:	0020      	movs	r0, r4
    1538:	4bc4      	ldr	r3, [pc, #784]	; (184c <main+0x370>)
    153a:	4798      	blx	r3
    153c:	1c43      	adds	r3, r0, #1
    153e:	d033      	beq.n	15a8 <main+0xcc>
        custom_fs_settings_clear_fw_upgrade_flag();
        start_application();
    }
    
    /* Custom file system initialization */
    custom_fs_init();
    1540:	4bc3      	ldr	r3, [pc, #780]	; (1850 <main+0x374>)
    1542:	4798      	blx	r3
    
    /* Look for update file address */
    custom_fs_address_t fw_file_address;
    custom_fs_binfile_size_t fw_file_size;
    if (custom_fs_get_file_address(0, &fw_file_address, CUSTOM_FS_FW_UPDATE_TYPE) == RETURN_NOK)
    1544:	2204      	movs	r2, #4
    1546:	a907      	add	r1, sp, #28
    1548:	2000      	movs	r0, #0
    154a:	4bc2      	ldr	r3, [pc, #776]	; (1854 <main+0x378>)
    154c:	4798      	blx	r3
    154e:	1c43      	adds	r3, r0, #1
    1550:	d02f      	beq.n	15b2 <main+0xd6>
        custom_fs_settings_clear_fw_upgrade_flag();
        start_application();
    }
    
    /* Read file size */
    custom_fs_read_from_flash((uint8_t*)&fw_file_size, fw_file_address, sizeof(fw_file_size));
    1552:	2204      	movs	r2, #4
    1554:	9907      	ldr	r1, [sp, #28]
    1556:	a806      	add	r0, sp, #24
    1558:	4bbf      	ldr	r3, [pc, #764]	; (1858 <main+0x37c>)
    155a:	4798      	blx	r3
    fw_file_address += sizeof(fw_file_size);
    155c:	9b07      	ldr	r3, [sp, #28]
    155e:	3304      	adds	r3, #4
    1560:	9307      	str	r3, [sp, #28]
    
    /* Check CRC32 */
    if (custom_fs_compute_and_check_external_bundle_crc32() == RETURN_NOK)
    1562:	4bbe      	ldr	r3, [pc, #760]	; (185c <main+0x380>)
    1564:	4798      	blx	r3
    1566:	1c43      	adds	r3, r0, #1
    1568:	d028      	beq.n	15bc <main+0xe0>
        custom_fs_settings_clear_fw_upgrade_flag();
        start_application();
    }

    /* Setup DMA controller for data flash transfers */
    dma_init();
    156a:	4bbd      	ldr	r3, [pc, #756]	; (1860 <main+0x384>)
    156c:	4798      	blx	r3

    /* Fetch encryption & signing keys: TODO */
    #if defined(PLAT_V7_SETUP)
    memset(encryption_aes_key, 0, sizeof(encryption_aes_key));
    156e:	2220      	movs	r2, #32
    1570:	2100      	movs	r1, #0
    1572:	a81c      	add	r0, sp, #112	; 0x70
    1574:	4cbb      	ldr	r4, [pc, #748]	; (1864 <main+0x388>)
    1576:	47a0      	blx	r4
    memset(encryption_aes_iv, 0, sizeof(encryption_aes_iv));
    1578:	2210      	movs	r2, #16
    157a:	2100      	movs	r1, #0
    157c:	a810      	add	r0, sp, #64	; 0x40
    157e:	47a0      	blx	r4
    memset(signing_aes_key, 0, sizeof(signing_aes_key));
    1580:	2220      	movs	r2, #32
    1582:	2100      	movs	r1, #0
    1584:	a814      	add	r0, sp, #80	; 0x50
    1586:	47a0      	blx	r4
    #endif
    
    /* Automatic flash write, disable caching */
    NVMCTRL->CTRLB.bit.MANW = 0;
    1588:	4bb7      	ldr	r3, [pc, #732]	; (1868 <main+0x38c>)
    158a:	685a      	ldr	r2, [r3, #4]
    158c:	2180      	movs	r1, #128	; 0x80
    158e:	438a      	bics	r2, r1
    1590:	605a      	str	r2, [r3, #4]
    NVMCTRL->CTRLB.bit.CACHEDIS = 1;
    1592:	6859      	ldr	r1, [r3, #4]
    1594:	2280      	movs	r2, #128	; 0x80
    1596:	02d2      	lsls	r2, r2, #11
    1598:	430a      	orrs	r2, r1
    159a:	605a      	str	r2, [r3, #4]

    /* Two passes: one to check the signature, one to flash and check previously stored signature for fw file */
    for (uint16_t nb_pass = 0; nb_pass < 2; nb_pass++)
    159c:	2300      	movs	r3, #0
            while(dma_custom_fs_check_and_clear_dma_transfer_flag() == FALSE);

            /* Arm next DMA transfer */
            if (available_data_buffer == bundle_data_b1)
            {
                custom_fs_get_other_data_from_continuous_read_from_flash((uint8_t*)bundle_data_b1, sizeof(bundle_data_b1), TRUE);
    159e:	001f      	movs	r7, r3
    15a0:	e103      	b.n	17aa <main+0x2ce>
        start_application();
    15a2:	4ba2      	ldr	r3, [pc, #648]	; (182c <main+0x350>)
    15a4:	4798      	blx	r3
    15a6:	e7be      	b.n	1526 <main+0x4a>
        custom_fs_settings_clear_fw_upgrade_flag();
    15a8:	4bb0      	ldr	r3, [pc, #704]	; (186c <main+0x390>)
    15aa:	4798      	blx	r3
        start_application();
    15ac:	4b9f      	ldr	r3, [pc, #636]	; (182c <main+0x350>)
    15ae:	4798      	blx	r3
    15b0:	e7c6      	b.n	1540 <main+0x64>
        custom_fs_settings_clear_fw_upgrade_flag();
    15b2:	4bae      	ldr	r3, [pc, #696]	; (186c <main+0x390>)
    15b4:	4798      	blx	r3
        start_application();
    15b6:	4b9d      	ldr	r3, [pc, #628]	; (182c <main+0x350>)
    15b8:	4798      	blx	r3
    15ba:	e7ca      	b.n	1552 <main+0x76>
        custom_fs_settings_clear_fw_upgrade_flag();
    15bc:	4bab      	ldr	r3, [pc, #684]	; (186c <main+0x390>)
    15be:	4798      	blx	r3
        start_application();
    15c0:	4b9a      	ldr	r3, [pc, #616]	; (182c <main+0x350>)
    15c2:	4798      	blx	r3
    15c4:	e7d1      	b.n	156a <main+0x8e>
    15c6:	9d00      	ldr	r5, [sp, #0]
    15c8:	e022      	b.n	1610 <main+0x134>
                custom_fs_get_other_data_from_continuous_read_from_flash((uint8_t*)bundle_data_b1, sizeof(bundle_data_b1), TRUE);
    15ca:	2201      	movs	r2, #1
    15cc:	2180      	movs	r1, #128	; 0x80
    15ce:	0049      	lsls	r1, r1, #1
    15d0:	0018      	movs	r0, r3
    15d2:	4ba7      	ldr	r3, [pc, #668]	; (1870 <main+0x394>)
    15d4:	4798      	blx	r3
    15d6:	e028      	b.n	162a <main+0x14e>
                /* Compute the fw data offset */
                valid_fw_data_offset = fw_file_address - current_data_flash_addr;
            }

            /* First pass: store cbcmac at end of fw file (kind of), second pass: flash & check cbcmac */
            if ((nb_pass == 0) && (address_valid_for_fw_data != FALSE))
    15d8:	464b      	mov	r3, r9
    15da:	2b00      	cmp	r3, #0
    15dc:	d152      	bne.n	1684 <main+0x1a8>
    15de:	9b02      	ldr	r3, [sp, #8]
    15e0:	2b00      	cmp	r3, #0
    15e2:	d13a      	bne.n	165a <main+0x17e>
                    }
                }
            }

            /* Increment address */
            current_data_flash_addr += nb_bytes_to_read;
    15e4:	19bf      	adds	r7, r7, r6

            /* Set correct buffer pointers, DMA transfers were already triggered */
            if (available_data_buffer == bundle_data_b1)
    15e6:	aba2      	add	r3, sp, #648	; 0x288
    15e8:	459b      	cmp	fp, r3
    15ea:	d100      	bne.n	15ee <main+0x112>
    15ec:	e0cd      	b.n	178a <main+0x2ae>
                received_data_buffer = bundle_data_b1;
            }
            else
            {
                available_data_buffer = bundle_data_b1;
                received_data_buffer = bundle_data_b2;
    15ee:	ab62      	add	r3, sp, #392	; 0x188
    15f0:	9301      	str	r3, [sp, #4]
                available_data_buffer = bundle_data_b1;
    15f2:	aba2      	add	r3, sp, #648	; 0x288
    15f4:	469b      	mov	fp, r3
        while (current_data_flash_addr < W25Q16_FLASH_SIZE)
    15f6:	4b9f      	ldr	r3, [pc, #636]	; (1874 <main+0x398>)
    15f8:	429f      	cmp	r7, r3
    15fa:	d900      	bls.n	15fe <main+0x122>
    15fc:	e0ca      	b.n	1794 <main+0x2b8>
            uint32_t nb_bytes_to_read = W25Q16_FLASH_SIZE - current_data_flash_addr;
    15fe:	2680      	movs	r6, #128	; 0x80
    1600:	03b6      	lsls	r6, r6, #14
    1602:	1bf6      	subs	r6, r6, r7
    1604:	2380      	movs	r3, #128	; 0x80
    1606:	005b      	lsls	r3, r3, #1
    1608:	429e      	cmp	r6, r3
    160a:	d9dc      	bls.n	15c6 <main+0xea>
    160c:	001e      	movs	r6, r3
    160e:	9d00      	ldr	r5, [sp, #0]
            while(dma_custom_fs_check_and_clear_dma_transfer_flag() == FALSE);
    1610:	47a0      	blx	r4
    1612:	2800      	cmp	r0, #0
    1614:	d0fc      	beq.n	1610 <main+0x134>
    1616:	9500      	str	r5, [sp, #0]
            if (available_data_buffer == bundle_data_b1)
    1618:	aba2      	add	r3, sp, #648	; 0x288
    161a:	459b      	cmp	fp, r3
    161c:	d0d5      	beq.n	15ca <main+0xee>
                custom_fs_get_other_data_from_continuous_read_from_flash((uint8_t*)bundle_data_b2, sizeof(bundle_data_b2), TRUE);
    161e:	2201      	movs	r2, #1
    1620:	2180      	movs	r1, #128	; 0x80
    1622:	0049      	lsls	r1, r1, #1
    1624:	a862      	add	r0, sp, #392	; 0x188
    1626:	4b92      	ldr	r3, [pc, #584]	; (1870 <main+0x394>)
    1628:	4798      	blx	r3
            br_aes_ct_ctrcbc_mac(&bootloader_signing_aes_context, cur_cbc_mac, received_data_buffer, nb_bytes_to_read);
    162a:	0033      	movs	r3, r6
    162c:	9a01      	ldr	r2, [sp, #4]
    162e:	a908      	add	r1, sp, #32
    1630:	a824      	add	r0, sp, #144	; 0x90
    1632:	4d91      	ldr	r5, [pc, #580]	; (1878 <main+0x39c>)
    1634:	47a8      	blx	r5
            if ((address_valid_for_fw_data == FALSE) && (address_passed_for_fw_data == FALSE) && ((current_data_flash_addr + nb_bytes_to_read) > fw_file_address))
    1636:	9b03      	ldr	r3, [sp, #12]
    1638:	9a02      	ldr	r2, [sp, #8]
    163a:	4313      	orrs	r3, r2
    163c:	d1cc      	bne.n	15d8 <main+0xfc>
    163e:	9b07      	ldr	r3, [sp, #28]
    1640:	19f2      	adds	r2, r6, r7
    1642:	429a      	cmp	r2, r3
    1644:	d9c8      	bls.n	15d8 <main+0xfc>
                valid_fw_data_offset = fw_file_address - current_data_flash_addr;
    1646:	1bdb      	subs	r3, r3, r7
            if ((nb_pass == 0) && (address_valid_for_fw_data != FALSE))
    1648:	464a      	mov	r2, r9
    164a:	2a00      	cmp	r2, #0
    164c:	d006      	beq.n	165c <main+0x180>
            else if ((nb_pass == 1) && (address_valid_for_fw_data != FALSE))
    164e:	464a      	mov	r2, r9
    1650:	2a01      	cmp	r2, #1
    1652:	d01e      	beq.n	1692 <main+0x1b6>
                address_valid_for_fw_data = TRUE;
    1654:	2301      	movs	r3, #1
    1656:	9302      	str	r3, [sp, #8]
    1658:	e7c4      	b.n	15e4 <main+0x108>
    165a:	2300      	movs	r3, #0
    165c:	4652      	mov	r2, sl
    165e:	18b2      	adds	r2, r6, r2
                nb_bytes_written_in_mcu_memory += nb_bytes_to_read - valid_fw_data_offset;
    1660:	1ad3      	subs	r3, r2, r3
    1662:	469a      	mov	sl, r3
                if (nb_bytes_written_in_mcu_memory >= fw_file_size)
    1664:	9b06      	ldr	r3, [sp, #24]
    1666:	459a      	cmp	sl, r3
    1668:	d200      	bcs.n	166c <main+0x190>
    166a:	e085      	b.n	1778 <main+0x29c>
                    memcpy(cbc_mac_to_end_of_mcu_fpass, cur_cbc_mac, sizeof(cbc_mac_to_end_of_mcu_fpass));
    166c:	2210      	movs	r2, #16
    166e:	a908      	add	r1, sp, #32
    1670:	a80c      	add	r0, sp, #48	; 0x30
    1672:	4b82      	ldr	r3, [pc, #520]	; (187c <main+0x3a0>)
    1674:	4798      	blx	r3
                    address_valid_for_fw_data = FALSE;
    1676:	2300      	movs	r3, #0
    1678:	9302      	str	r3, [sp, #8]
                    address_passed_for_fw_data = TRUE;
    167a:	3301      	adds	r3, #1
    167c:	9303      	str	r3, [sp, #12]
                    memcpy(cbc_mac_to_end_of_mcu_fpass, cur_cbc_mac, sizeof(cbc_mac_to_end_of_mcu_fpass));
    167e:	2300      	movs	r3, #0
    1680:	4699      	mov	r9, r3
    1682:	e7af      	b.n	15e4 <main+0x108>
            else if ((nb_pass == 1) && (address_valid_for_fw_data != FALSE))
    1684:	464b      	mov	r3, r9
    1686:	2b01      	cmp	r3, #1
    1688:	d1ac      	bne.n	15e4 <main+0x108>
    168a:	9b02      	ldr	r3, [sp, #8]
    168c:	2b00      	cmp	r3, #0
    168e:	d0a9      	beq.n	15e4 <main+0x108>
    1690:	2300      	movs	r3, #0
                for (uint32_t i = valid_fw_data_offset/2; i < nb_bytes_to_read/2; i++)
    1692:	0859      	lsrs	r1, r3, #1
    1694:	0872      	lsrs	r2, r6, #1
    1696:	4690      	mov	r8, r2
    1698:	4291      	cmp	r1, r2
    169a:	d272      	bcs.n	1782 <main+0x2a6>
    169c:	2201      	movs	r2, #1
    169e:	4393      	bics	r3, r2
    16a0:	9d00      	ldr	r5, [sp, #0]
    16a2:	1b5b      	subs	r3, r3, r5
    16a4:	9a01      	ldr	r2, [sp, #4]
    16a6:	4691      	mov	r9, r2
    16a8:	4499      	add	r9, r3
                        while ((NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY) == 0);
    16aa:	4a6f      	ldr	r2, [pc, #444]	; (1868 <main+0x38c>)
    16ac:	2301      	movs	r3, #1
                    if (address_in_mcu_memory % (NVMCTRL_ROW_SIZE/4) == 0)
    16ae:	46b4      	mov	ip, r6
    16b0:	000e      	movs	r6, r1
    16b2:	4651      	mov	r1, sl
    16b4:	0038      	movs	r0, r7
    16b6:	464f      	mov	r7, r9
    16b8:	9700      	str	r7, [sp, #0]
    16ba:	4681      	mov	r9, r0
    16bc:	e00d      	b.n	16da <main+0x1fe>
                    NVM_MEMORY[address_in_mcu_memory/2] = received_data_buffer[i];
    16be:	0028      	movs	r0, r5
    16c0:	4398      	bics	r0, r3
    16c2:	0007      	movs	r7, r0
    16c4:	9800      	ldr	r0, [sp, #0]
    16c6:	5b40      	ldrh	r0, [r0, r5]
    16c8:	8038      	strh	r0, [r7, #0]
                    nb_bytes_written_in_mcu_memory += 2;
    16ca:	3102      	adds	r1, #2
                    address_in_mcu_memory += 2;
    16cc:	3502      	adds	r5, #2
                    if (nb_bytes_written_in_mcu_memory >= fw_file_size)
    16ce:	9806      	ldr	r0, [sp, #24]
    16d0:	4281      	cmp	r1, r0
    16d2:	d217      	bcs.n	1704 <main+0x228>
                for (uint32_t i = valid_fw_data_offset/2; i < nb_bytes_to_read/2; i++)
    16d4:	3601      	adds	r6, #1
    16d6:	4546      	cmp	r6, r8
    16d8:	d046      	beq.n	1768 <main+0x28c>
                    if (address_in_mcu_memory % NVMCTRL_ROW_SIZE == 0)
    16da:	20ff      	movs	r0, #255	; 0xff
    16dc:	4228      	tst	r0, r5
    16de:	d108      	bne.n	16f2 <main+0x216>
    16e0:	9f00      	ldr	r7, [sp, #0]
                        while ((NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY) == 0);
    16e2:	7d10      	ldrb	r0, [r2, #20]
    16e4:	4218      	tst	r0, r3
    16e6:	d0fc      	beq.n	16e2 <main+0x206>
    16e8:	9700      	str	r7, [sp, #0]
                        NVMCTRL->ADDR.reg  = address_in_mcu_memory/2;
    16ea:	0868      	lsrs	r0, r5, #1
    16ec:	61d0      	str	r0, [r2, #28]
                        NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    16ee:	4864      	ldr	r0, [pc, #400]	; (1880 <main+0x3a4>)
    16f0:	8010      	strh	r0, [r2, #0]
                    if (address_in_mcu_memory % (NVMCTRL_ROW_SIZE/4) == 0)
    16f2:	203f      	movs	r0, #63	; 0x3f
    16f4:	4228      	tst	r0, r5
    16f6:	d1e2      	bne.n	16be <main+0x1e2>
    16f8:	9f00      	ldr	r7, [sp, #0]
                        while ((NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY) == 0);
    16fa:	7d10      	ldrb	r0, [r2, #20]
    16fc:	4218      	tst	r0, r3
    16fe:	d0fc      	beq.n	16fa <main+0x21e>
    1700:	9700      	str	r7, [sp, #0]
    1702:	e7dc      	b.n	16be <main+0x1e2>
    1704:	9500      	str	r5, [sp, #0]
    1706:	468a      	mov	sl, r1
    1708:	4666      	mov	r6, ip
    170a:	464f      	mov	r7, r9
                        if (utils_side_channel_safe_memcmp(cbc_mac_to_end_of_mcu_fpass, cur_cbc_mac, sizeof(cbc_mac_to_end_of_mcu_fpass)) != 0)
    170c:	2210      	movs	r2, #16
    170e:	a908      	add	r1, sp, #32
    1710:	a80c      	add	r0, sp, #48	; 0x30
    1712:	4b5c      	ldr	r3, [pc, #368]	; (1884 <main+0x3a8>)
    1714:	4798      	blx	r3
    1716:	2800      	cmp	r0, #0
    1718:	d106      	bne.n	1728 <main+0x24c>
                        address_valid_for_fw_data = FALSE;
    171a:	2300      	movs	r3, #0
    171c:	9302      	str	r3, [sp, #8]
                        address_passed_for_fw_data = TRUE;
    171e:	3301      	adds	r3, #1
    1720:	9303      	str	r3, [sp, #12]
                        nb_pass = 33;
    1722:	3320      	adds	r3, #32
    1724:	4699      	mov	r9, r3
    1726:	e75d      	b.n	15e4 <main+0x108>
    NVMCTRL->CTRLB.bit.MANW = 0;
    1728:	4b4f      	ldr	r3, [pc, #316]	; (1868 <main+0x38c>)
    172a:	685a      	ldr	r2, [r3, #4]
    172c:	2180      	movs	r1, #128	; 0x80
    172e:	438a      	bics	r2, r1
    1730:	605a      	str	r2, [r3, #4]
    NVMCTRL->CTRLB.bit.CACHEDIS = 1;
    1732:	6859      	ldr	r1, [r3, #4]
    1734:	2280      	movs	r2, #128	; 0x80
    1736:	02d2      	lsls	r2, r2, #11
    1738:	430a      	orrs	r2, r1
    173a:	605a      	str	r2, [r3, #4]
    for (uint32_t current_flash_address = APP_START_ADDR; current_flash_address < FLASH_SIZE; current_flash_address += NVMCTRL_ROW_SIZE)
    173c:	2080      	movs	r0, #128	; 0x80
    173e:	01c0      	lsls	r0, r0, #7
        while ((NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY) == 0);
    1740:	001a      	movs	r2, r3
    1742:	2101      	movs	r1, #1
        NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    1744:	4d4e      	ldr	r5, [pc, #312]	; (1880 <main+0x3a4>)
    for (uint32_t current_flash_address = APP_START_ADDR; current_flash_address < FLASH_SIZE; current_flash_address += NVMCTRL_ROW_SIZE)
    1746:	2480      	movs	r4, #128	; 0x80
    1748:	02e4      	lsls	r4, r4, #11
    174a:	e006      	b.n	175a <main+0x27e>
        NVMCTRL->ADDR.reg  = current_flash_address/2;
    174c:	0843      	lsrs	r3, r0, #1
    174e:	61d3      	str	r3, [r2, #28]
        NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    1750:	8015      	strh	r5, [r2, #0]
    for (uint32_t current_flash_address = APP_START_ADDR; current_flash_address < FLASH_SIZE; current_flash_address += NVMCTRL_ROW_SIZE)
    1752:	3001      	adds	r0, #1
    1754:	30ff      	adds	r0, #255	; 0xff
    1756:	42a0      	cmp	r0, r4
    1758:	d003      	beq.n	1762 <main+0x286>
        while ((NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY) == 0);
    175a:	7d13      	ldrb	r3, [r2, #20]
    175c:	420b      	tst	r3, r1
    175e:	d0fc      	beq.n	175a <main+0x27e>
    1760:	e7f4      	b.n	174c <main+0x270>
                            platform_io_disable_switch_and_die();
    1762:	4b34      	ldr	r3, [pc, #208]	; (1834 <main+0x358>)
    1764:	4798      	blx	r3
    1766:	e7fe      	b.n	1766 <main+0x28a>
    1768:	9500      	str	r5, [sp, #0]
    176a:	468a      	mov	sl, r1
    176c:	4666      	mov	r6, ip
    176e:	464f      	mov	r7, r9
    1770:	2301      	movs	r3, #1
    1772:	9302      	str	r3, [sp, #8]
    1774:	4699      	mov	r9, r3
    1776:	e735      	b.n	15e4 <main+0x108>
    1778:	2301      	movs	r3, #1
    177a:	9302      	str	r3, [sp, #8]
    177c:	2300      	movs	r3, #0
    177e:	4699      	mov	r9, r3
    1780:	e730      	b.n	15e4 <main+0x108>
                for (uint32_t i = valid_fw_data_offset/2; i < nb_bytes_to_read/2; i++)
    1782:	2301      	movs	r3, #1
    1784:	9302      	str	r3, [sp, #8]
    1786:	4699      	mov	r9, r3
    1788:	e72c      	b.n	15e4 <main+0x108>
                received_data_buffer = bundle_data_b1;
    178a:	aba2      	add	r3, sp, #648	; 0x288
    178c:	9301      	str	r3, [sp, #4]
                available_data_buffer = bundle_data_b2;
    178e:	ab62      	add	r3, sp, #392	; 0x188
    1790:	469b      	mov	fp, r3
    1792:	e730      	b.n	15f6 <main+0x11a>
    1794:	464f      	mov	r7, r9
            }
        }

        /* End of pass */
        while(dma_custom_fs_check_and_clear_dma_transfer_flag() == FALSE);
    1796:	4c3c      	ldr	r4, [pc, #240]	; (1888 <main+0x3ac>)
    1798:	47a0      	blx	r4
    179a:	2800      	cmp	r0, #0
    179c:	d0fc      	beq.n	1798 <main+0x2bc>
        custom_fs_stop_continuous_read_from_flash();
    179e:	4b3b      	ldr	r3, [pc, #236]	; (188c <main+0x3b0>)
    17a0:	4798      	blx	r3
    for (uint16_t nb_pass = 0; nb_pass < 2; nb_pass++)
    17a2:	3701      	adds	r7, #1
    17a4:	b2bf      	uxth	r7, r7
    17a6:	2f01      	cmp	r7, #1
    17a8:	d826      	bhi.n	17f8 <main+0x31c>
        br_aes_ct_ctrcbc_init(&bootloader_signing_aes_context, signing_aes_key, AES_KEY_LENGTH/8);
    17aa:	2220      	movs	r2, #32
    17ac:	a914      	add	r1, sp, #80	; 0x50
    17ae:	a824      	add	r0, sp, #144	; 0x90
    17b0:	4b37      	ldr	r3, [pc, #220]	; (1890 <main+0x3b4>)
    17b2:	4798      	blx	r3
        memset((void*)cur_cbc_mac, 0x00, sizeof(cur_cbc_mac));
    17b4:	2210      	movs	r2, #16
    17b6:	2100      	movs	r1, #0
    17b8:	a808      	add	r0, sp, #32
    17ba:	4b2a      	ldr	r3, [pc, #168]	; (1864 <main+0x388>)
    17bc:	4798      	blx	r3
        current_data_flash_addr = custom_fs_get_start_address_of_signed_data();
    17be:	4b35      	ldr	r3, [pc, #212]	; (1894 <main+0x3b8>)
    17c0:	4798      	blx	r3
    17c2:	4681      	mov	r9, r0
        custom_fs_continuous_read_from_flash((uint8_t*)bundle_data_b1, current_data_flash_addr, sizeof(bundle_data_b1), TRUE);
    17c4:	2301      	movs	r3, #1
    17c6:	2280      	movs	r2, #128	; 0x80
    17c8:	0052      	lsls	r2, r2, #1
    17ca:	0001      	movs	r1, r0
    17cc:	a8a2      	add	r0, sp, #648	; 0x288
    17ce:	4c32      	ldr	r4, [pc, #200]	; (1898 <main+0x3bc>)
    17d0:	47a0      	blx	r4
        while (current_data_flash_addr < W25Q16_FLASH_SIZE)
    17d2:	4b28      	ldr	r3, [pc, #160]	; (1874 <main+0x398>)
    17d4:	4599      	cmp	r9, r3
    17d6:	d8de      	bhi.n	1796 <main+0x2ba>
    17d8:	2300      	movs	r3, #0
    17da:	9302      	str	r3, [sp, #8]
    17dc:	9303      	str	r3, [sp, #12]
    17de:	469a      	mov	sl, r3
    17e0:	2580      	movs	r5, #128	; 0x80
    17e2:	01ed      	lsls	r5, r5, #7
    17e4:	aba2      	add	r3, sp, #648	; 0x288
    17e6:	9301      	str	r3, [sp, #4]
    17e8:	ab62      	add	r3, sp, #392	; 0x188
    17ea:	469b      	mov	fp, r3
            while(dma_custom_fs_check_and_clear_dma_transfer_flag() == FALSE);
    17ec:	4c26      	ldr	r4, [pc, #152]	; (1888 <main+0x3ac>)
    17ee:	9500      	str	r5, [sp, #0]
    17f0:	464b      	mov	r3, r9
    17f2:	46b9      	mov	r9, r7
    17f4:	001f      	movs	r7, r3
    17f6:	e702      	b.n	15fe <main+0x122>
    }
    
    /* Final wait, clear flag, reset */
    while ((NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY) == 0);
    17f8:	4a1b      	ldr	r2, [pc, #108]	; (1868 <main+0x38c>)
    17fa:	2301      	movs	r3, #1
    17fc:	7d11      	ldrb	r1, [r2, #20]
    17fe:	4219      	tst	r1, r3
    1800:	d0fc      	beq.n	17fc <main+0x320>
    custom_fs_settings_clear_fw_upgrade_flag();
    1802:	4b1a      	ldr	r3, [pc, #104]	; (186c <main+0x390>)
    1804:	4798      	blx	r3
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    1806:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    180a:	4a24      	ldr	r2, [pc, #144]	; (189c <main+0x3c0>)
    180c:	4b24      	ldr	r3, [pc, #144]	; (18a0 <main+0x3c4>)
    180e:	60da      	str	r2, [r3, #12]
    1810:	f3bf 8f4f 	dsb	sy
    1814:	e7fe      	b.n	1814 <main+0x338>
    1816:	46c0      	nop			; (mov r8, r8)
    1818:	fffffc74 	.word	0xfffffc74
    181c:	000022ed 	.word	0x000022ed
    1820:	000024dd 	.word	0x000024dd
    1824:	000186a0 	.word	0x000186a0
    1828:	00002501 	.word	0x00002501
    182c:	000014b9 	.word	0x000014b9
    1830:	00001f75 	.word	0x00001f75
    1834:	000022fd 	.word	0x000022fd
    1838:	00002095 	.word	0x00002095
    183c:	20000000 	.word	0x20000000
    1840:	00001e05 	.word	0x00001e05
    1844:	000018cd 	.word	0x000018cd
    1848:	00002355 	.word	0x00002355
    184c:	00002219 	.word	0x00002219
    1850:	00001e11 	.word	0x00001e11
    1854:	00001e4d 	.word	0x00001e4d
    1858:	00001c81 	.word	0x00001c81
    185c:	00001d99 	.word	0x00001d99
    1860:	000019dd 	.word	0x000019dd
    1864:	0000288f 	.word	0x0000288f
    1868:	41004000 	.word	0x41004000
    186c:	0000206d 	.word	0x0000206d
    1870:	00001cc9 	.word	0x00001cc9
    1874:	001fffff 	.word	0x001fffff
    1878:	000009a9 	.word	0x000009a9
    187c:	0000287d 	.word	0x0000287d
    1880:	ffffa502 	.word	0xffffa502
    1884:	000026ad 	.word	0x000026ad
    1888:	00001ac9 	.word	0x00001ac9
    188c:	00001de5 	.word	0x00001de5
    1890:	000006e5 	.word	0x000006e5
    1894:	00001e49 	.word	0x00001e49
    1898:	00001d09 	.word	0x00001d09
    189c:	05fa0004 	.word	0x05fa0004
    18a0:	e000ed00 	.word	0xe000ed00

000018a4 <clocks_map_gclk_to_peripheral_clock>:
void clocks_map_gclk_to_peripheral_clock(uint32_t gclk_id, uint32_t peripheral_clk_id)
{
    GCLK_CLKCTRL_Type clkctrl;                                          // Clkctrl struct
    clkctrl.reg = 0;                                                    // Reset temp var
    clkctrl.bit.ID = peripheral_clk_id;                                 // Select TCC0 input
    clkctrl.bit.GEN = gclk_id;                                          // Select gclk
    18a4:	230f      	movs	r3, #15
    18a6:	4018      	ands	r0, r3
    18a8:	0200      	lsls	r0, r0, #8
    18aa:	3330      	adds	r3, #48	; 0x30
    18ac:	4019      	ands	r1, r3
    18ae:	4301      	orrs	r1, r0
    clkctrl.bit.CLKEN = 1;                                              // Enable generator
    18b0:	2080      	movs	r0, #128	; 0x80
    18b2:	01c0      	lsls	r0, r0, #7
    18b4:	4301      	orrs	r1, r0
    while ((GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) != 0);             // Wait for sync
    18b6:	4a04      	ldr	r2, [pc, #16]	; (18c8 <clocks_map_gclk_to_peripheral_clock+0x24>)
    18b8:	7853      	ldrb	r3, [r2, #1]
    18ba:	b25b      	sxtb	r3, r3
    18bc:	2b00      	cmp	r3, #0
    18be:	dbfb      	blt.n	18b8 <clocks_map_gclk_to_peripheral_clock+0x14>
    GCLK->CLKCTRL = clkctrl;                                            // Write register
    18c0:	4b01      	ldr	r3, [pc, #4]	; (18c8 <clocks_map_gclk_to_peripheral_clock+0x24>)
    18c2:	8059      	strh	r1, [r3, #2]
}
    18c4:	4770      	bx	lr
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	40000c00 	.word	0x40000c00

000018cc <clocks_start_48MDFLL>:
void clocks_start_48MDFLL(void)
{
    GCLK_GENCTRL_Type genctrl;                                  // Genctrl struct
    
    /* Set 1 wait states for on-board flash: from NVM characteristics */
    NVMCTRL->CTRLB.bit.RWS = 1;
    18cc:	4a25      	ldr	r2, [pc, #148]	; (1964 <clocks_start_48MDFLL+0x98>)
    18ce:	6853      	ldr	r3, [r2, #4]
    18d0:	211e      	movs	r1, #30
    18d2:	438b      	bics	r3, r1
    18d4:	391c      	subs	r1, #28
    18d6:	430b      	orrs	r3, r1
    18d8:	6053      	str	r3, [r2, #4]
    
    /* Reset GCLK module */
    while ((GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) != 0);     // Wait for sync
    18da:	4a23      	ldr	r2, [pc, #140]	; (1968 <clocks_start_48MDFLL+0x9c>)
    18dc:	7853      	ldrb	r3, [r2, #1]
    18de:	b25b      	sxtb	r3, r3
    18e0:	2b00      	cmp	r3, #0
    18e2:	dbfb      	blt.n	18dc <clocks_start_48MDFLL+0x10>
    GCLK->CTRL.reg = GCLK_CTRL_SWRST;                           // Trigger reset
    18e4:	2201      	movs	r2, #1
    18e6:	4b20      	ldr	r3, [pc, #128]	; (1968 <clocks_start_48MDFLL+0x9c>)
    18e8:	701a      	strb	r2, [r3, #0]
    while ((GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) != 0);     // Wait for sync
    18ea:	001a      	movs	r2, r3
    18ec:	7853      	ldrb	r3, [r2, #1]
    18ee:	b25b      	sxtb	r3, r3
    18f0:	2b00      	cmp	r3, #0
    18f2:	dbfb      	blt.n	18ec <clocks_start_48MDFLL+0x20>
    while ((GCLK->CTRL.reg & GCLK_CTRL_SWRST) != 0);            // Wait for end of reset
    18f4:	491c      	ldr	r1, [pc, #112]	; (1968 <clocks_start_48MDFLL+0x9c>)
    18f6:	2201      	movs	r2, #1
    18f8:	780b      	ldrb	r3, [r1, #0]
    18fa:	4213      	tst	r3, r2
    18fc:	d1fc      	bne.n	18f8 <clocks_start_48MDFLL+0x2c>
    
    /* Remove osc8m clock division */
    SYSCTRL_OSC8M_Type osc8m_register = SYSCTRL->OSC8M;         // load current osc8m register val
    18fe:	491b      	ldr	r1, [pc, #108]	; (196c <clocks_start_48MDFLL+0xa0>)
    1900:	6a0b      	ldr	r3, [r1, #32]
    osc8m_register.bit.FRANGE = SYSCTRL_OSC8M_FRANGE_2_Val;     // select 8mhz oscillation range
    osc8m_register.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val;       // set 1 prescaler
    osc8m_register.bit.RUNSTDBY = 0;                            // oscillator not running during standby
    //osc8m_register.bit.ENABLE = 1;                              // enable oscillator (not needed as already enabled)
    SYSCTRL->OSC8M = osc8m_register;                            // write register
    1902:	2240      	movs	r2, #64	; 0x40
    1904:	4393      	bics	r3, r2
    1906:	4a1a      	ldr	r2, [pc, #104]	; (1970 <clocks_start_48MDFLL+0xa4>)
    1908:	4013      	ands	r3, r2
    190a:	009b      	lsls	r3, r3, #2
    190c:	089b      	lsrs	r3, r3, #2
    190e:	2280      	movs	r2, #128	; 0x80
    1910:	0612      	lsls	r2, r2, #24
    1912:	4313      	orrs	r3, r2
    1914:	620b      	str	r3, [r1, #32]
    /************************************/
    /*  Configure DFLL48M in open loop  */
    /************************************/
    
    /* Disable ONDEMAND mode while writing configurations */
    while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY));    // Wait for sync
    1916:	2210      	movs	r2, #16
    1918:	68cb      	ldr	r3, [r1, #12]
    191a:	421a      	tst	r2, r3
    191c:	d0fc      	beq.n	1918 <clocks_start_48MDFLL+0x4c>
    SYSCTRL->DFLLCTRL.reg = 0;                                  // Disable ONDEMAND mode while writing configurations
    191e:	4913      	ldr	r1, [pc, #76]	; (196c <clocks_start_48MDFLL+0xa0>)
    1920:	2300      	movs	r3, #0
    1922:	848b      	strh	r3, [r1, #36]	; 0x24
    
    /* Load coarse and fine values from NVM and store them in DFFLVAL.COARSE & DFFLVAL.FINE */
    uint32_t coarse_val = ((*((uint32_t *)SYSCTRL_FUSES_DFLL48M_COARSE_CAL_ADDR)) & SYSCTRL_FUSES_DFLL48M_COARSE_CAL_Msk) >> SYSCTRL_FUSES_DFLL48M_COARSE_CAL_Pos;
    1924:	4b13      	ldr	r3, [pc, #76]	; (1974 <clocks_start_48MDFLL+0xa8>)
    1926:	681a      	ldr	r2, [r3, #0]
    uint32_t fine_val =  ((*((uint32_t *)FUSES_DFLL48M_FINE_CAL_ADDR)) & FUSES_DFLL48M_FINE_CAL_Msk) >> FUSES_DFLL48M_FINE_CAL_Pos;
    1928:	4b13      	ldr	r3, [pc, #76]	; (1978 <clocks_start_48MDFLL+0xac>)
    192a:	681b      	ldr	r3, [r3, #0]
    SYSCTRL_DFLLVAL_Type dfll_val;                              // DFLL value register
    dfll_val.bit.COARSE = coarse_val;                           // Store coarse value
    dfll_val.bit.FINE = fine_val;                               // Store fine value
    SYSCTRL->DFLLVAL = dfll_val;                                // Store register value, no need for sync
    192c:	059b      	lsls	r3, r3, #22
    192e:	0e92      	lsrs	r2, r2, #26
    1930:	0292      	lsls	r2, r2, #10
    1932:	0d9b      	lsrs	r3, r3, #22
    1934:	4313      	orrs	r3, r2
    1936:	628b      	str	r3, [r1, #40]	; 0x28
    dfll_ctrl.bit.ONDEMAND = 0;                                 // Oscillator always on
    dfll_ctrl.bit.RUNSTDBY = 0;                                 // Do not run in standby
    dfll_ctrl.bit.USBCRM = 0;                                   // No USB recovery mode
    dfll_ctrl.bit.STABLE = 0;                                   // FINE calibration tracks changes
    dfll_ctrl.bit.MODE = 0;                                     // Open loop operation
    while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY));    // Wait for sync
    1938:	2210      	movs	r2, #16
    193a:	68cb      	ldr	r3, [r1, #12]
    193c:	421a      	tst	r2, r3
    193e:	d0fc      	beq.n	193a <clocks_start_48MDFLL+0x6e>
    SYSCTRL->DFLLCTRL = dfll_ctrl;                              // Write register
    1940:	4b0a      	ldr	r3, [pc, #40]	; (196c <clocks_start_48MDFLL+0xa0>)
    1942:	2202      	movs	r2, #2
    1944:	849a      	strh	r2, [r3, #36]	; 0x24
    /* Wait for lock */
    while (SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC));
    1946:	0019      	movs	r1, r3
    1948:	32ce      	adds	r2, #206	; 0xce
    194a:	68cb      	ldr	r3, [r1, #12]
    194c:	421a      	tst	r2, r3
    194e:	d1fc      	bne.n	194a <clocks_start_48MDFLL+0x7e>
    genctrl.bit.ID = GCLK_CLKCTRL_GEN_GCLK0_Val;                // Select gclk0
    genctrl.bit.SRC = GCLK_GENCTRL_SRC_DFLL48M_Val;             // Assign 48M oscillator
    genctrl.bit.GENEN = 1;                                      // Enable generator
    genctrl.bit.DIVSEL = 0;                                     // Divide clock by gendiv.div
    genctrl.bit.OE = 1;                                         // Output clock
    while ((GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) != 0);     // Wait for sync
    1950:	4a05      	ldr	r2, [pc, #20]	; (1968 <clocks_start_48MDFLL+0x9c>)
    1952:	7853      	ldrb	r3, [r2, #1]
    1954:	b25b      	sxtb	r3, r3
    1956:	2b00      	cmp	r3, #0
    1958:	dbfb      	blt.n	1952 <clocks_start_48MDFLL+0x86>
    GCLK->GENCTRL = genctrl;                                    // Write register
    195a:	4b03      	ldr	r3, [pc, #12]	; (1968 <clocks_start_48MDFLL+0x9c>)
    195c:	4a07      	ldr	r2, [pc, #28]	; (197c <clocks_start_48MDFLL+0xb0>)
    195e:	605a      	str	r2, [r3, #4]
    1960:	4770      	bx	lr
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	41004000 	.word	0x41004000
    1968:	40000c00 	.word	0x40000c00
    196c:	40000800 	.word	0x40000800
    1970:	fffffcff 	.word	0xfffffcff
    1974:	00806024 	.word	0x00806024
    1978:	00806028 	.word	0x00806028
    197c:	00090700 	.word	0x00090700

00001980 <DMAC_Handler>:
        DMAC->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    }
    #endif
    
    /* RX routine for custom fs */
    DMAC->CHID.reg = DMAC_CHID_ID(DMA_DESCID_RX_FS);
    1980:	4b07      	ldr	r3, [pc, #28]	; (19a0 <DMAC_Handler+0x20>)
    1982:	2101      	movs	r1, #1
    1984:	223f      	movs	r2, #63	; 0x3f
    1986:	5499      	strb	r1, [r3, r2]
    if ((DMAC->CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) != 0)
    1988:	320f      	adds	r2, #15
    198a:	5c9b      	ldrb	r3, [r3, r2]
    198c:	079b      	lsls	r3, r3, #30
    198e:	d506      	bpl.n	199e <DMAC_Handler+0x1e>
    {
        /* Set transfer done boolean, clear interrupt */
        dma_custom_fs_transfer_done = TRUE;
    1990:	3a4d      	subs	r2, #77	; 0x4d
    1992:	4b04      	ldr	r3, [pc, #16]	; (19a4 <DMAC_Handler+0x24>)
    1994:	601a      	str	r2, [r3, #0]
        DMAC->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1996:	3101      	adds	r1, #1
    1998:	234e      	movs	r3, #78	; 0x4e
    199a:	4a01      	ldr	r2, [pc, #4]	; (19a0 <DMAC_Handler+0x20>)
    199c:	54d1      	strb	r1, [r2, r3]
        /* Set transfer done boolean, clear interrupt */
        dma_acc_transfer_done = TRUE;
        DMAC->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    }
    #endif
}
    199e:	4770      	bx	lr
    19a0:	41004800 	.word	0x41004800
    19a4:	2000003c 	.word	0x2000003c

000019a8 <dma_set_custom_fs_flag_done>:
/*! \fn     dma_set_custom_fs_flag_done(void)
*   \brief  Manually set the custom fs done flag (used to simulate DMA transfers)
*/
void dma_set_custom_fs_flag_done(void)
{
    dma_custom_fs_transfer_done = TRUE;
    19a8:	2201      	movs	r2, #1
    19aa:	4b01      	ldr	r3, [pc, #4]	; (19b0 <dma_set_custom_fs_flag_done+0x8>)
    19ac:	601a      	str	r2, [r3, #0]
}
    19ae:	4770      	bx	lr
    19b0:	2000003c 	.word	0x2000003c

000019b4 <dma_reset>:
/*! \fn     dma_reset(void)
*   \brief  Reset DMA controller
*/
void dma_reset(void)
{
    DMAC->CTRL.reg = 0;                 // Disable DMA
    19b4:	2200      	movs	r2, #0
    19b6:	4b08      	ldr	r3, [pc, #32]	; (19d8 <dma_reset+0x24>)
    19b8:	801a      	strh	r2, [r3, #0]
    while (DMAC->CTRL.reg != 0);        // Wait for DMA disabled
    19ba:	001a      	movs	r2, r3
    19bc:	8813      	ldrh	r3, [r2, #0]
    19be:	b29b      	uxth	r3, r3
    19c0:	2b00      	cmp	r3, #0
    19c2:	d1fb      	bne.n	19bc <dma_reset+0x8>
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;   // Reset DMA
    19c4:	2201      	movs	r2, #1
    19c6:	4b04      	ldr	r3, [pc, #16]	; (19d8 <dma_reset+0x24>)
    19c8:	801a      	strh	r2, [r3, #0]
    while (DMAC->CTRL.reg != 0);        // Wait for DMA reset
    19ca:	001a      	movs	r2, r3
    19cc:	8813      	ldrh	r3, [r2, #0]
    19ce:	b29b      	uxth	r3, r3
    19d0:	2b00      	cmp	r3, #0
    19d2:	d1fb      	bne.n	19cc <dma_reset+0x18>
}
    19d4:	4770      	bx	lr
    19d6:	46c0      	nop			; (mov r8, r8)
    19d8:	41004800 	.word	0x41004800

000019dc <dma_init>:

/*! \fn     dma_init(void)
*   \brief  Initialize DMA controller that will be used later
*/
void dma_init(void)
{    
    19dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    19de:	46ce      	mov	lr, r9
    19e0:	4647      	mov	r7, r8
    19e2:	b580      	push	{r7, lr}
    /* Setup DMA controller */
    DMAC_CTRL_Type dmac_ctrl_reg;
    DMAC->BASEADDR.reg = (uint32_t)&dma_descriptors[0];                                     // Base descriptor
    19e4:	4b2f      	ldr	r3, [pc, #188]	; (1aa4 <dma_init+0xc8>)
    19e6:	4a30      	ldr	r2, [pc, #192]	; (1aa8 <dma_init+0xcc>)
    19e8:	6353      	str	r3, [r2, #52]	; 0x34
    DMAC->WRBADDR.reg = (uint32_t)&dma_writeback_descriptors[0];                            // Write back descriptor
    19ea:	4930      	ldr	r1, [pc, #192]	; (1aac <dma_init+0xd0>)
    19ec:	6391      	str	r1, [r2, #56]	; 0x38
    dmac_ctrl_reg.reg = DMAC_CTRL_DMAENABLE;                                                // Enable dma
    19ee:	2402      	movs	r4, #2
    dmac_ctrl_reg.bit.LVLEN0 = 1;                                                           // Enable priority level 0
    dmac_ctrl_reg.bit.LVLEN1 = 1;                                                           // Enable priority level 1
    dmac_ctrl_reg.bit.LVLEN2 = 1;                                                           // Enable priority level 2
    dmac_ctrl_reg.bit.LVLEN3 = 1;                                                           // Enable priority level 3
    19f0:	2180      	movs	r1, #128	; 0x80
    19f2:	0109      	lsls	r1, r1, #4
    19f4:	4689      	mov	r9, r1
    19f6:	492e      	ldr	r1, [pc, #184]	; (1ab0 <dma_init+0xd4>)
    DMAC->CTRL = dmac_ctrl_reg;                                                             // Write DMA control register
    19f8:	8011      	strh	r1, [r2, #0]
    //DMAC->DBGCTRL.bit.DBGRUN = 1;                                                         // Normal operation during debugging
    
    /* DMA QOS: elevate to medium priority */
    DMAC_QOSCTRL_Type dma_qos_ctrl_reg;                                                     // Temporary register
    dma_qos_ctrl_reg.reg = 0;                                                               // Clear temp register
    19fa:	2500      	movs	r5, #0
    dma_qos_ctrl_reg.bit.DQOS = DMAC_QOSCTRL_WRBQOS_MEDIUM_Val;                             // Medium QOS for writeback
    dma_qos_ctrl_reg.bit.FQOS = DMAC_QOSCTRL_WRBQOS_MEDIUM_Val;                             // Medium QOS for fetch
    dma_qos_ctrl_reg.bit.WRBQOS = DMAC_QOSCTRL_WRBQOS_MEDIUM_Val;                           // Medium QOS for data
    19fc:	212a      	movs	r1, #42	; 0x2a
    DMAC->QOSCTRL = dma_qos_ctrl_reg;                                                       // Write register
    19fe:	7391      	strb	r1, [r2, #14]
    
    /* Enable round robin for all levels */
    DMAC_PRICTRL0_Type dmac_prictrl_reg;                                                    // Temporary register
    dmac_prictrl_reg.reg = 0;                                                               // Clear temp register
    dmac_prictrl_reg.bit.LVLPRI0 = 1;                                                       // Enable round robin for level 0
    1a00:	3929      	subs	r1, #41	; 0x29
    1a02:	468c      	mov	ip, r1
    dmac_prictrl_reg.bit.LVLPRI1 = 1;                                                       // Enable round robin for level 1
    dmac_prictrl_reg.bit.LVLPRI2 = 1;                                                       // Enable round robin for level 2
    dmac_prictrl_reg.bit.LVLPRI3 = 1;                                                       // Enable round robin for level 3
    1a04:	492b      	ldr	r1, [pc, #172]	; (1ab4 <dma_init+0xd8>)
    DMAC->PRICTRL0 = dmac_prictrl_reg;                                                      // Write register
    1a06:	6151      	str	r1, [r2, #20]

    /* Setup transfer descriptor for custom fs RX */
    dma_descriptors[DMA_DESCID_RX_FS].BTCTRL.reg = DMAC_BTCTRL_VALID;                       // Valid descriptor
    1a08:	4661      	mov	r1, ip
    1a0a:	8219      	strh	r1, [r3, #16]
    dma_descriptors[DMA_DESCID_RX_FS].BTCTRL.bit.STEPSIZE = DMAC_BTCTRL_STEPSIZE_X1_Val;    // 1 byte address increment
    1a0c:	8a19      	ldrh	r1, [r3, #16]
    1a0e:	04c9      	lsls	r1, r1, #19
    1a10:	0cc9      	lsrs	r1, r1, #19
    1a12:	8219      	strh	r1, [r3, #16]
    dma_descriptors[DMA_DESCID_RX_FS].BTCTRL.bit.STEPSEL = DMAC_BTCTRL_STEPSEL_DST_Val;     // Step selection for destination
    1a14:	8a19      	ldrh	r1, [r3, #16]
    1a16:	4e28      	ldr	r6, [pc, #160]	; (1ab8 <dma_init+0xdc>)
    1a18:	4031      	ands	r1, r6
    1a1a:	8219      	strh	r1, [r3, #16]
    dma_descriptors[DMA_DESCID_RX_FS].BTCTRL.bit.DSTINC = 1;                                // Destination Address Increment is enabled.
    1a1c:	8a19      	ldrh	r1, [r3, #16]
    1a1e:	4648      	mov	r0, r9
    1a20:	4301      	orrs	r1, r0
    1a22:	8219      	strh	r1, [r3, #16]
    dma_descriptors[DMA_DESCID_RX_FS].BTCTRL.bit.BEATSIZE = DMAC_BTCTRL_BEATSIZE_BYTE_Val;  // Byte data transfer
    1a24:	8a19      	ldrh	r1, [r3, #16]
    1a26:	4f25      	ldr	r7, [pc, #148]	; (1abc <dma_init+0xe0>)
    1a28:	4039      	ands	r1, r7
    1a2a:	8219      	strh	r1, [r3, #16]
    dma_descriptors[DMA_DESCID_RX_FS].BTCTRL.bit.BLOCKACT = DMAC_BTCTRL_BLOCKACT_INT_Val;   // Once data block is transferred, generate interrupt
    1a2c:	8a19      	ldrh	r1, [r3, #16]
    1a2e:	2618      	movs	r6, #24
    1a30:	43b1      	bics	r1, r6
    1a32:	2008      	movs	r0, #8
    1a34:	4680      	mov	r8, r0
    1a36:	4640      	mov	r0, r8
    1a38:	4301      	orrs	r1, r0
    1a3a:	8219      	strh	r1, [r3, #16]
    dma_descriptors[DMA_DESCID_RX_FS].DESCADDR.reg = 0;                                     // No next descriptor address
    1a3c:	61dd      	str	r5, [r3, #28]
    
    /* Setup DMA channel */
    DMAC->CHID.reg = DMAC_CHID_ID(DMA_DESCID_RX_FS);                                        // Select channel
    1a3e:	213f      	movs	r1, #63	; 0x3f
    1a40:	4688      	mov	r8, r1
    1a42:	2101      	movs	r1, #1
    1a44:	4640      	mov	r0, r8
    1a46:	5411      	strb	r1, [r2, r0]
    DMAC_CHCTRLB_Type dma_chctrlb_reg;                                                      // Temp register
    dma_chctrlb_reg.reg = 0;                                                                // Clear it
    dma_chctrlb_reg.bit.LVL = 0;                                                            // Priority level
    dma_chctrlb_reg.bit.TRIGACT = DMAC_CHCTRLB_TRIGACT_BEAT_Val;                            // One trigger required for each beat transfer
    dma_chctrlb_reg.bit.TRIGSRC = DATAFLASH_DMA_SERCOM_RXTRIG;                              // Select RX trigger
    1a48:	491d      	ldr	r1, [pc, #116]	; (1ac0 <dma_init+0xe4>)
    DMAC->CHCTRLB = dma_chctrlb_reg;                                                        // Write register
    1a4a:	6451      	str	r1, [r2, #68]	; 0x44
    DMAC->CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;                                           // Enable channel transfer complete interrupt
    1a4c:	214d      	movs	r1, #77	; 0x4d
    1a4e:	5454      	strb	r4, [r2, r1]

    /* Setup transfer descriptor for custom fs TX */
    dma_descriptors[DMA_DESCID_TX_FS].BTCTRL.reg = DMAC_BTCTRL_VALID;                       // Valid descriptor
    1a50:	4661      	mov	r1, ip
    1a52:	8419      	strh	r1, [r3, #32]
    dma_descriptors[DMA_DESCID_TX_FS].BTCTRL.bit.STEPSIZE = DMAC_BTCTRL_STEPSIZE_X1_Val;    // 1 byte address increment
    1a54:	8c19      	ldrh	r1, [r3, #32]
    1a56:	04c9      	lsls	r1, r1, #19
    1a58:	0cc9      	lsrs	r1, r1, #19
    1a5a:	8419      	strh	r1, [r3, #32]
    dma_descriptors[DMA_DESCID_TX_FS].BTCTRL.bit.STEPSEL = DMAC_BTCTRL_STEPSEL_SRC_Val;     // Step selection for source
    1a5c:	8c19      	ldrh	r1, [r3, #32]
    1a5e:	468c      	mov	ip, r1
    1a60:	2180      	movs	r1, #128	; 0x80
    1a62:	0149      	lsls	r1, r1, #5
    1a64:	4660      	mov	r0, ip
    1a66:	4301      	orrs	r1, r0
    1a68:	8419      	strh	r1, [r3, #32]
    dma_descriptors[DMA_DESCID_TX_FS].BTCTRL.bit.SRCINC = 1;                                // Destination Address Increment is enabled.
    1a6a:	8c19      	ldrh	r1, [r3, #32]
    1a6c:	468c      	mov	ip, r1
    1a6e:	2180      	movs	r1, #128	; 0x80
    1a70:	00c9      	lsls	r1, r1, #3
    1a72:	4660      	mov	r0, ip
    1a74:	4301      	orrs	r1, r0
    1a76:	8419      	strh	r1, [r3, #32]
    dma_descriptors[DMA_DESCID_TX_FS].BTCTRL.bit.BEATSIZE = DMAC_BTCTRL_BEATSIZE_BYTE_Val;  // Byte data transfer
    1a78:	8c19      	ldrh	r1, [r3, #32]
    1a7a:	400f      	ands	r7, r1
    1a7c:	841f      	strh	r7, [r3, #32]
    dma_descriptors[DMA_DESCID_TX_FS].BTCTRL.bit.BLOCKACT = DMAC_BTCTRL_BLOCKACT_NOACT_Val; // Once data block is transferred, do nothing
    1a7e:	8c19      	ldrh	r1, [r3, #32]
    1a80:	43b1      	bics	r1, r6
    1a82:	8419      	strh	r1, [r3, #32]
    dma_descriptors[DMA_DESCID_TX_FS].DESCADDR.reg = 0;                                     // No next descriptor address
    1a84:	62dd      	str	r5, [r3, #44]	; 0x2c
    
    /* Setup DMA channel */
    DMAC->CHID.reg = DMAC_CHID_ID(DMA_DESCID_TX_FS);                                        // Select channel
    1a86:	4643      	mov	r3, r8
    1a88:	54d4      	strb	r4, [r2, r3]
    dma_chctrlb_reg.reg = 0;                                                                // Clear it
    dma_chctrlb_reg.bit.LVL = 0;                                                            // Priority level
    dma_chctrlb_reg.bit.TRIGACT = DMAC_CHCTRLB_TRIGACT_BEAT_Val;                            // One trigger required for each beat transfer
    dma_chctrlb_reg.bit.TRIGSRC = DATAFLASH_DMA_SERCOM_TXTRIG;                              // Select RX trigger
    1a8a:	2380      	movs	r3, #128	; 0x80
    1a8c:	041b      	lsls	r3, r3, #16
    1a8e:	4648      	mov	r0, r9
    1a90:	4318      	orrs	r0, r3
    DMAC->CHCTRLB = dma_chctrlb_reg;                                                        // Write register
    1a92:	6450      	str	r0, [r2, #68]	; 0x44
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1a94:	2240      	movs	r2, #64	; 0x40
    1a96:	4b0b      	ldr	r3, [pc, #44]	; (1ac4 <dma_init+0xe8>)
    1a98:	601a      	str	r2, [r3, #0]
    DMAC->CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;                                           // Enable channel transfer complete interrupt
    #endif

    /* Enable IRQ */
    NVIC_EnableIRQ(DMAC_IRQn);
}
    1a9a:	bc0c      	pop	{r2, r3}
    1a9c:	4690      	mov	r8, r2
    1a9e:	4699      	mov	r9, r3
    1aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1aa2:	46c0      	nop			; (mov r8, r8)
    1aa4:	20000100 	.word	0x20000100
    1aa8:	41004800 	.word	0x41004800
    1aac:	20000090 	.word	0x20000090
    1ab0:	00000f02 	.word	0x00000f02
    1ab4:	01010101 	.word	0x01010101
    1ab8:	ffffefff 	.word	0xffffefff
    1abc:	fffffcff 	.word	0xfffffcff
    1ac0:	00800700 	.word	0x00800700
    1ac4:	e000e100 	.word	0xe000e100

00001ac8 <dma_custom_fs_check_and_clear_dma_transfer_flag>:
*   \return TRUE or FALSE
*/
BOOL dma_custom_fs_check_and_clear_dma_transfer_flag(void)
{
    /* flag can't be set twice, code is safe */
    if (dma_custom_fs_transfer_done != FALSE)
    1ac8:	4b04      	ldr	r3, [pc, #16]	; (1adc <dma_custom_fs_check_and_clear_dma_transfer_flag+0x14>)
    1aca:	681b      	ldr	r3, [r3, #0]
    {
        dma_custom_fs_transfer_done = FALSE;
        return TRUE;
    }
    return FALSE;
    1acc:	2000      	movs	r0, #0
    if (dma_custom_fs_transfer_done != FALSE)
    1ace:	2b00      	cmp	r3, #0
    1ad0:	d003      	beq.n	1ada <dma_custom_fs_check_and_clear_dma_transfer_flag+0x12>
        dma_custom_fs_transfer_done = FALSE;
    1ad2:	2200      	movs	r2, #0
    1ad4:	4b01      	ldr	r3, [pc, #4]	; (1adc <dma_custom_fs_check_and_clear_dma_transfer_flag+0x14>)
    1ad6:	601a      	str	r2, [r3, #0]
        return TRUE;
    1ad8:	3001      	adds	r0, #1
}
    1ada:	4770      	bx	lr
    1adc:	2000003c 	.word	0x2000003c

00001ae0 <dma_custom_fs_init_transfer>:
*   \param  sercom      Pointer to a sercom module
*   \param  datap       Pointer to where to store the data
*   \param  size        Number of bytes to transfer
*/
void dma_custom_fs_init_transfer(Sercom* sercom, void* datap, uint16_t size)
{
    1ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ae2:	0005      	movs	r5, r0
    1ae4:	000c      	movs	r4, r1
    1ae6:	0016      	movs	r6, r2
    volatile void *spi_data_p = &sercom->SPI.DATA.reg;
    cpu_irq_enter_critical();
    1ae8:	4b0b      	ldr	r3, [pc, #44]	; (1b18 <dma_custom_fs_init_transfer+0x38>)
    1aea:	4798      	blx	r3
    
    /* SPI RX DMA TRANSFER */
    /* Setup transfer size */
    dma_descriptors[DMA_DESCID_RX_FS].BTCNT.bit.BTCNT = (uint16_t)size;
    1aec:	4b0b      	ldr	r3, [pc, #44]	; (1b1c <dma_custom_fs_init_transfer+0x3c>)
    1aee:	825e      	strh	r6, [r3, #18]
    volatile void *spi_data_p = &sercom->SPI.DATA.reg;
    1af0:	0028      	movs	r0, r5
    1af2:	3028      	adds	r0, #40	; 0x28
    /* Source address: DATA register from SPI */
    dma_descriptors[DMA_DESCID_RX_FS].SRCADDR.reg = (uint32_t)spi_data_p;
    1af4:	6158      	str	r0, [r3, #20]
    /* Destination address: given value */
    dma_descriptors[DMA_DESCID_RX_FS].DSTADDR.reg = (uint32_t)datap + size;
    1af6:	19a1      	adds	r1, r4, r6
    1af8:	6199      	str	r1, [r3, #24]
    
    /* Resume DMA channel operation */
    DMAC->CHID.reg= DMAC_CHID_ID(DMA_DESCID_RX_FS);
    1afa:	4a09      	ldr	r2, [pc, #36]	; (1b20 <dma_custom_fs_init_transfer+0x40>)
    1afc:	273f      	movs	r7, #63	; 0x3f
    1afe:	2401      	movs	r4, #1
    1b00:	55d4      	strb	r4, [r2, r7]
    DMAC->CHCTRLA.reg = DMAC_CHCTRLA_ENABLE;
    1b02:	2540      	movs	r5, #64	; 0x40
    1b04:	3401      	adds	r4, #1
    1b06:	5554      	strb	r4, [r2, r5]

    /* SPI TX DMA TRANSFER */
    /* Setup transfer size */
    dma_descriptors[DMA_DESCID_TX_FS].BTCNT.bit.BTCNT = (uint16_t)size;
    1b08:	845e      	strh	r6, [r3, #34]	; 0x22
    /* Source address: DATA register from SPI */
    dma_descriptors[DMA_DESCID_TX_FS].DSTADDR.reg = (uint32_t)spi_data_p;
    1b0a:	6298      	str	r0, [r3, #40]	; 0x28
    /* Destination address: given value */
    dma_descriptors[DMA_DESCID_TX_FS].SRCADDR.reg = (uint32_t)datap + size;
    1b0c:	6259      	str	r1, [r3, #36]	; 0x24
    
    /* Resume DMA channel operation */
    DMAC->CHID.reg= DMAC_CHID_ID(DMA_DESCID_TX_FS);
    1b0e:	55d4      	strb	r4, [r2, r7]
    DMAC->CHCTRLA.reg = DMAC_CHCTRLA_ENABLE;
    1b10:	5554      	strb	r4, [r2, r5]
    
    cpu_irq_leave_critical();
    1b12:	4b04      	ldr	r3, [pc, #16]	; (1b24 <dma_custom_fs_init_transfer+0x44>)
    1b14:	4798      	blx	r3
}
    1b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b18:	000026dd 	.word	0x000026dd
    1b1c:	20000100 	.word	0x20000100
    1b20:	41004800 	.word	0x41004800
    1b24:	0000271d 	.word	0x0000271d

00001b28 <dma_compute_crc32_from_spi>:
*   \param  size        Number of bytes to transfer
*   \return the crc32
*   \note   DMA controller must be disabled and reset before calling this function!
*/
uint32_t dma_compute_crc32_from_spi(Sercom* sercom, uint32_t size)
{
    1b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b2a:	46de      	mov	lr, fp
    1b2c:	4657      	mov	r7, sl
    1b2e:	464e      	mov	r6, r9
    1b30:	4645      	mov	r5, r8
    1b32:	b5e0      	push	{r5, r6, r7, lr}
    1b34:	b085      	sub	sp, #20
    volatile void *spi_data_p = &sercom->SPI.DATA.reg;
    1b36:	2328      	movs	r3, #40	; 0x28
    1b38:	4698      	mov	r8, r3
    1b3a:	4480      	add	r8, r0
    /* The byte that will be used to read/write spi data */
    volatile uint8_t temp_src_dst_reg = 0;
    1b3c:	2400      	movs	r4, #0
    1b3e:	ab02      	add	r3, sp, #8
    1b40:	71dc      	strb	r4, [r3, #7]
    DMAC_CRCCTRL_Type crc_ctrl_reg;
    crc_ctrl_reg.reg = 0;
    crc_ctrl_reg.bit.CRCSRC = 0x20;                                                         // DMA channel 0 (SPI RX)
    crc_ctrl_reg.bit.CRCPOLY = DMAC_CRCCTRL_CRCPOLY_CRC32_Val;                              // CRC32
    crc_ctrl_reg.bit.CRCBEATSIZE = DMAC_CRCCTRL_CRCBEATSIZE_BYTE_Val;                       // Beat size is one byte
    DMAC->CRCCTRL = crc_ctrl_reg;                                                           // Store register
    1b42:	4a44      	ldr	r2, [pc, #272]	; (1c54 <dma_compute_crc32_from_spi+0x12c>)
    1b44:	4b44      	ldr	r3, [pc, #272]	; (1c58 <dma_compute_crc32_from_spi+0x130>)
    1b46:	8053      	strh	r3, [r2, #2]
    DMAC->CRCCHKSUM.reg = 0xFFFFFFFF;                                                       // Not sure why, it is needed
    1b48:	2301      	movs	r3, #1
    1b4a:	425b      	negs	r3, r3
    1b4c:	6093      	str	r3, [r2, #8]
    
    /* Setup DMA controller */
    DMAC_CTRL_Type dmac_ctrl_reg;
    DMAC->BASEADDR.reg = (uint32_t)&dma_descriptors[0];                                     // Base descriptor
    1b4e:	4b43      	ldr	r3, [pc, #268]	; (1c5c <dma_compute_crc32_from_spi+0x134>)
    1b50:	6353      	str	r3, [r2, #52]	; 0x34
    DMAC->WRBADDR.reg = (uint32_t)&dma_writeback_descriptors[0];                            // Write back descriptor
    1b52:	4843      	ldr	r0, [pc, #268]	; (1c60 <dma_compute_crc32_from_spi+0x138>)
    1b54:	6390      	str	r0, [r2, #56]	; 0x38
    dmac_ctrl_reg.reg = DMAC_CTRL_DMAENABLE;                                                // Enable dma
    dmac_ctrl_reg.bit.LVLEN0 = 1;                                                           // Enable priority level 0
    dmac_ctrl_reg.bit.LVLEN1 = 1;                                                           // Enable priority level 1
    dmac_ctrl_reg.bit.LVLEN2 = 1;                                                           // Enable priority level 2
    dmac_ctrl_reg.bit.LVLEN3 = 1;                                                           // Enable priority level 3
    dmac_ctrl_reg.bit.CRCENABLE = 1;                                                        // Enable CRC generator
    1b56:	4843      	ldr	r0, [pc, #268]	; (1c64 <dma_compute_crc32_from_spi+0x13c>)
    DMAC->CTRL = dmac_ctrl_reg;                                                             // Write DMA control register
    1b58:	8010      	strh	r0, [r2, #0]
        
    /* SPI RX routine, cf user manual 26.5.4 */
    /* Using the SERCOM DMA requests, requires the DMA controller to be configured first. */

    /* Setup transfer descriptor for custom fs RX */
    dma_descriptors[0].BTCTRL.reg = DMAC_BTCTRL_VALID;                                      // Valid descriptor
    1b5a:	2001      	movs	r0, #1
    1b5c:	4682      	mov	sl, r0
    1b5e:	8018      	strh	r0, [r3, #0]
    dma_descriptors[0].BTCTRL.bit.STEPSIZE = DMAC_BTCTRL_STEPSIZE_X1_Val;                   // 1 byte address increment
    1b60:	8818      	ldrh	r0, [r3, #0]
    1b62:	04c0      	lsls	r0, r0, #19
    1b64:	0cc0      	lsrs	r0, r0, #19
    1b66:	8018      	strh	r0, [r3, #0]
    dma_descriptors[0].BTCTRL.bit.DSTINC = 0;                                               // Destination Address Increment is not enabled.
    1b68:	8818      	ldrh	r0, [r3, #0]
    1b6a:	4d3f      	ldr	r5, [pc, #252]	; (1c68 <dma_compute_crc32_from_spi+0x140>)
    1b6c:	46a9      	mov	r9, r5
    1b6e:	4028      	ands	r0, r5
    1b70:	8018      	strh	r0, [r3, #0]
    dma_descriptors[0].BTCTRL.bit.SRCINC = 0;                                               // Source Address Increment is not enabled.
    1b72:	8818      	ldrh	r0, [r3, #0]
    1b74:	4d3d      	ldr	r5, [pc, #244]	; (1c6c <dma_compute_crc32_from_spi+0x144>)
    1b76:	46ac      	mov	ip, r5
    1b78:	4028      	ands	r0, r5
    1b7a:	8018      	strh	r0, [r3, #0]
    dma_descriptors[0].BTCTRL.bit.BEATSIZE = DMAC_BTCTRL_BEATSIZE_BYTE_Val;                 // Byte data transfer
    1b7c:	8818      	ldrh	r0, [r3, #0]
    1b7e:	4f3c      	ldr	r7, [pc, #240]	; (1c70 <dma_compute_crc32_from_spi+0x148>)
    1b80:	4038      	ands	r0, r7
    1b82:	8018      	strh	r0, [r3, #0]
    dma_descriptors[0].BTCTRL.bit.BLOCKACT = DMAC_BTCTRL_BLOCKACT_NOACT_Val;                // Once data block is transferred, do not generate interrupt
    1b84:	8818      	ldrh	r0, [r3, #0]
    1b86:	2618      	movs	r6, #24
    1b88:	43b0      	bics	r0, r6
    1b8a:	8018      	strh	r0, [r3, #0]
    dma_descriptors[0].DESCADDR.reg = 0;                                                    // No next descriptor address
    1b8c:	60dc      	str	r4, [r3, #12]
    
    /* Setup DMA channel */
    DMAC->CHID.reg = DMAC_CHID_ID(0);                                                       // Use channel 0
    1b8e:	203f      	movs	r0, #63	; 0x3f
    1b90:	4683      	mov	fp, r0
    1b92:	5414      	strb	r4, [r2, r0]
    DMAC_CHCTRLB_Type dma_chctrlb_reg;                                                      // Temp register
    dma_chctrlb_reg.reg = 0;                                                                // Clear it
    dma_chctrlb_reg.bit.TRIGACT = DMAC_CHCTRLB_TRIGACT_BEAT_Val;                            // One trigger required for each beat transfer
    dma_chctrlb_reg.bit.TRIGSRC = DATAFLASH_DMA_SERCOM_RXTRIG;                              // Select RX trigger
    1b94:	4837      	ldr	r0, [pc, #220]	; (1c74 <dma_compute_crc32_from_spi+0x14c>)
    DMAC->CHCTRLB = dma_chctrlb_reg;                                                        // Write register
    1b96:	6450      	str	r0, [r2, #68]	; 0x44

    /* SPI TX routines, cf user manual 26.5.4 */
    /* Using the SERCOM DMA requests, requires the DMA controller to be configured first. */

    /* Setup transfer descriptor for custom fs TX */
    dma_descriptors[1].BTCTRL.reg = DMAC_BTCTRL_VALID;                                      // Valid descriptor
    1b98:	4650      	mov	r0, sl
    1b9a:	8218      	strh	r0, [r3, #16]
    dma_descriptors[1].BTCTRL.bit.STEPSIZE = DMAC_BTCTRL_STEPSIZE_X1_Val;                   // 1 byte address increment
    1b9c:	8a18      	ldrh	r0, [r3, #16]
    1b9e:	04c0      	lsls	r0, r0, #19
    1ba0:	0cc0      	lsrs	r0, r0, #19
    1ba2:	8218      	strh	r0, [r3, #16]
    dma_descriptors[1].BTCTRL.bit.DSTINC = 0;                                               // Destination Address Increment is not enabled.
    1ba4:	8a18      	ldrh	r0, [r3, #16]
    1ba6:	464d      	mov	r5, r9
    1ba8:	4028      	ands	r0, r5
    1baa:	8218      	strh	r0, [r3, #16]
    dma_descriptors[1].BTCTRL.bit.SRCINC = 0;                                               // Source Address Increment is not enabled.
    1bac:	8a18      	ldrh	r0, [r3, #16]
    1bae:	4665      	mov	r5, ip
    1bb0:	4028      	ands	r0, r5
    1bb2:	8218      	strh	r0, [r3, #16]
    dma_descriptors[1].BTCTRL.bit.BEATSIZE = DMAC_BTCTRL_BEATSIZE_BYTE_Val;                 // Byte data transfer
    1bb4:	8a18      	ldrh	r0, [r3, #16]
    1bb6:	4007      	ands	r7, r0
    1bb8:	821f      	strh	r7, [r3, #16]
    dma_descriptors[1].BTCTRL.bit.BLOCKACT = DMAC_BTCTRL_BLOCKACT_NOACT_Val;                // Once data block is tranferred, do nothing
    1bba:	8a18      	ldrh	r0, [r3, #16]
    1bbc:	43b0      	bics	r0, r6
    1bbe:	8218      	strh	r0, [r3, #16]
    dma_descriptors[1].DESCADDR.reg = 0;                                                    // No next descriptor address
    1bc0:	61dc      	str	r4, [r3, #28]
    
    /* Setup DMA channel */
    DMAC->CHID.reg = DMAC_CHID_ID(1);                                                       // Use channel 1
    1bc2:	2301      	movs	r3, #1
    1bc4:	4658      	mov	r0, fp
    1bc6:	5413      	strb	r3, [r2, r0]
    dma_chctrlb_reg.reg = 0;                                                                // Clear it
    dma_chctrlb_reg.bit.TRIGACT = DMAC_CHCTRLB_TRIGACT_BEAT_Val;                            // One trigger required for each beat transfer
    dma_chctrlb_reg.bit.TRIGSRC = DATAFLASH_DMA_SERCOM_TXTRIG;                              // Select RX trigger
    1bc8:	4b2b      	ldr	r3, [pc, #172]	; (1c78 <dma_compute_crc32_from_spi+0x150>)
    DMAC->CHCTRLB = dma_chctrlb_reg;                                                        // Write register
    1bca:	6453      	str	r3, [r2, #68]	; 0x44

    uint32_t nb_bytes_to_transfer = size;
    while (size > 0)
    1bcc:	2900      	cmp	r1, #0
    1bce:	d032      	beq.n	1c36 <dma_compute_crc32_from_spi+0x10e>
        }
        
        /* Arm transfers */
        /* SPI RX DMA TRANSFER */
        /* Setup transfer size */
        dma_descriptors[0].BTCNT.bit.BTCNT = (uint16_t)nb_bytes_to_transfer;
    1bd0:	4e22      	ldr	r6, [pc, #136]	; (1c5c <dma_compute_crc32_from_spi+0x134>)
        /* Source address: DATA register from SPI */
        dma_descriptors[0].SRCADDR.reg = (uint32_t)spi_data_p;
        /* Destination address: given value */
        dma_descriptors[0].DSTADDR.reg = (uint32_t)&temp_src_dst_reg;
    1bd2:	ab02      	add	r3, sp, #8
    1bd4:	3307      	adds	r3, #7
    1bd6:	9301      	str	r3, [sp, #4]
        /* Resume DMA channel operation */
        DMAC->CHID.reg= DMAC_CHID_ID(0);
        DMAC->CHCTRLA.reg = DMAC_CHCTRLA_ENABLE;
    1bd8:	2340      	movs	r3, #64	; 0x40
    1bda:	469a      	mov	sl, r3
    1bdc:	3402      	adds	r4, #2
    1bde:	46a1      	mov	r9, r4
        DMAC->CHID.reg= DMAC_CHID_ID(1);
        DMAC->CHCTRLA.reg = DMAC_CHCTRLA_ENABLE;
        
        /* Wait for transfer to finish */
        DMAC->CHID.reg = DMAC_CHID_ID(0);
        while ((DMAC->CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) == 0);
    1be0:	254e      	movs	r5, #78	; 0x4e
    1be2:	e022      	b.n	1c2a <dma_compute_crc32_from_spi+0x102>
        dma_descriptors[0].BTCNT.bit.BTCNT = (uint16_t)nb_bytes_to_transfer;
    1be4:	b2bb      	uxth	r3, r7
    1be6:	469b      	mov	fp, r3
    1be8:	8073      	strh	r3, [r6, #2]
        dma_descriptors[0].SRCADDR.reg = (uint32_t)spi_data_p;
    1bea:	4643      	mov	r3, r8
    1bec:	6073      	str	r3, [r6, #4]
        dma_descriptors[0].DSTADDR.reg = (uint32_t)&temp_src_dst_reg;
    1bee:	9b01      	ldr	r3, [sp, #4]
    1bf0:	60b3      	str	r3, [r6, #8]
        DMAC->CHID.reg= DMAC_CHID_ID(0);
    1bf2:	2000      	movs	r0, #0
    1bf4:	4684      	mov	ip, r0
    1bf6:	233f      	movs	r3, #63	; 0x3f
    1bf8:	54d0      	strb	r0, [r2, r3]
        DMAC->CHCTRLA.reg = DMAC_CHCTRLA_ENABLE;
    1bfa:	4650      	mov	r0, sl
    1bfc:	464b      	mov	r3, r9
    1bfe:	5413      	strb	r3, [r2, r0]
        dma_descriptors[1].BTCNT.bit.BTCNT = (uint16_t)nb_bytes_to_transfer;
    1c00:	465b      	mov	r3, fp
    1c02:	8273      	strh	r3, [r6, #18]
        dma_descriptors[1].DSTADDR.reg = (uint32_t)spi_data_p;
    1c04:	4643      	mov	r3, r8
    1c06:	61b3      	str	r3, [r6, #24]
        dma_descriptors[1].SRCADDR.reg = (uint32_t)&temp_src_dst_reg;
    1c08:	9b01      	ldr	r3, [sp, #4]
    1c0a:	6173      	str	r3, [r6, #20]
        DMAC->CHID.reg= DMAC_CHID_ID(1);
    1c0c:	2301      	movs	r3, #1
    1c0e:	203f      	movs	r0, #63	; 0x3f
    1c10:	5413      	strb	r3, [r2, r0]
        DMAC->CHCTRLA.reg = DMAC_CHCTRLA_ENABLE;
    1c12:	4653      	mov	r3, sl
    1c14:	4648      	mov	r0, r9
    1c16:	54d0      	strb	r0, [r2, r3]
        DMAC->CHID.reg = DMAC_CHID_ID(0);
    1c18:	4663      	mov	r3, ip
    1c1a:	203f      	movs	r0, #63	; 0x3f
    1c1c:	5413      	strb	r3, [r2, r0]
        while ((DMAC->CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) == 0);
    1c1e:	5d53      	ldrb	r3, [r2, r5]
    1c20:	4223      	tst	r3, r4
    1c22:	d0fc      	beq.n	1c1e <dma_compute_crc32_from_spi+0xf6>
        DMAC->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1c24:	5554      	strb	r4, [r2, r5]
        
        /* Update size */
        size -= nb_bytes_to_transfer;
    1c26:	1bc9      	subs	r1, r1, r7
    while (size > 0)
    1c28:	d005      	beq.n	1c36 <dma_compute_crc32_from_spi+0x10e>
    1c2a:	000f      	movs	r7, r1
    1c2c:	4b13      	ldr	r3, [pc, #76]	; (1c7c <dma_compute_crc32_from_spi+0x154>)
    1c2e:	4299      	cmp	r1, r3
    1c30:	d9d8      	bls.n	1be4 <dma_compute_crc32_from_spi+0xbc>
    1c32:	001f      	movs	r7, r3
    1c34:	e7d6      	b.n	1be4 <dma_compute_crc32_from_spi+0xbc>
    }
    
    /* Get crc32 from dma */
    while ((DMAC->CRCSTATUS.reg & DMAC_CRCSTATUS_CRCBUSY) == DMAC_CRCSTATUS_CRCBUSY);    
    1c36:	4907      	ldr	r1, [pc, #28]	; (1c54 <dma_compute_crc32_from_spi+0x12c>)
    1c38:	2201      	movs	r2, #1
    1c3a:	7b0b      	ldrb	r3, [r1, #12]
    1c3c:	4213      	tst	r3, r2
    1c3e:	d1fc      	bne.n	1c3a <dma_compute_crc32_from_spi+0x112>
    return DMAC->CRCCHKSUM.reg;
    1c40:	4b04      	ldr	r3, [pc, #16]	; (1c54 <dma_compute_crc32_from_spi+0x12c>)
    1c42:	6898      	ldr	r0, [r3, #8]
}
    1c44:	b005      	add	sp, #20
    1c46:	bc3c      	pop	{r2, r3, r4, r5}
    1c48:	4690      	mov	r8, r2
    1c4a:	4699      	mov	r9, r3
    1c4c:	46a2      	mov	sl, r4
    1c4e:	46ab      	mov	fp, r5
    1c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c52:	46c0      	nop			; (mov r8, r8)
    1c54:	41004800 	.word	0x41004800
    1c58:	00002004 	.word	0x00002004
    1c5c:	20000100 	.word	0x20000100
    1c60:	20000090 	.word	0x20000090
    1c64:	00000f06 	.word	0x00000f06
    1c68:	fffff7ff 	.word	0xfffff7ff
    1c6c:	fffffbff 	.word	0xfffffbff
    1c70:	fffffcff 	.word	0xfffffcff
    1c74:	00800700 	.word	0x00800700
    1c78:	00800800 	.word	0x00800800
    1c7c:	0000ffff 	.word	0x0000ffff

00001c80 <custom_fs_read_from_flash>:
*   \param  address     Where to read the data
    \param  size        How many bytes to read
*   \return success status
*/
RET_TYPE custom_fs_read_from_flash(uint8_t* datap, custom_fs_address_t address, uint32_t size)
{
    1c80:	b510      	push	{r4, lr}
    1c82:	0004      	movs	r4, r0
    /* Check for emergency font file exception */
    if ((address >= CUSTOM_FS_EMERGENCY_FONT_FILE_ADDR) && (address+size <= CUSTOM_FS_EMERGENCY_FONT_FILE_ADDR + sizeof(custom_fs_emergency_font_file)))
    1c84:	2900      	cmp	r1, #0
    1c86:	db07      	blt.n	1c98 <custom_fs_read_from_flash+0x18>
    {
        memcpy(datap, &custom_fs_emergency_font_file[address-CUSTOM_FS_EMERGENCY_FONT_FILE_ADDR], size);
    } 
    else
    {
        dataflash_read_data_array(custom_fs_dataflash_desc, address, datap, size);
    1c88:	4b0a      	ldr	r3, [pc, #40]	; (1cb4 <custom_fs_read_from_flash+0x34>)
    1c8a:	6818      	ldr	r0, [r3, #0]
    1c8c:	0013      	movs	r3, r2
    1c8e:	0022      	movs	r2, r4
    1c90:	4c09      	ldr	r4, [pc, #36]	; (1cb8 <custom_fs_read_from_flash+0x38>)
    1c92:	47a0      	blx	r4
        //memcpy(datap, &mooltipass_bundle[address], size);
    }
    return RETURN_OK;
}
    1c94:	2000      	movs	r0, #0
    1c96:	bd10      	pop	{r4, pc}
    if ((address >= CUSTOM_FS_EMERGENCY_FONT_FILE_ADDR) && (address+size <= CUSTOM_FS_EMERGENCY_FONT_FILE_ADDR + sizeof(custom_fs_emergency_font_file)))
    1c98:	188b      	adds	r3, r1, r2
    1c9a:	4808      	ldr	r0, [pc, #32]	; (1cbc <custom_fs_read_from_flash+0x3c>)
    1c9c:	4283      	cmp	r3, r0
    1c9e:	d8f3      	bhi.n	1c88 <custom_fs_read_from_flash+0x8>
        memcpy(datap, &custom_fs_emergency_font_file[address-CUSTOM_FS_EMERGENCY_FONT_FILE_ADDR], size);
    1ca0:	2380      	movs	r3, #128	; 0x80
    1ca2:	061b      	lsls	r3, r3, #24
    1ca4:	469c      	mov	ip, r3
    1ca6:	4461      	add	r1, ip
    1ca8:	4b05      	ldr	r3, [pc, #20]	; (1cc0 <custom_fs_read_from_flash+0x40>)
    1caa:	18c9      	adds	r1, r1, r3
    1cac:	0020      	movs	r0, r4
    1cae:	4b05      	ldr	r3, [pc, #20]	; (1cc4 <custom_fs_read_from_flash+0x44>)
    1cb0:	4798      	blx	r3
    1cb2:	e7ef      	b.n	1c94 <custom_fs_read_from_flash+0x14>
    1cb4:	20000070 	.word	0x20000070
    1cb8:	000020bd 	.word	0x000020bd
    1cbc:	80000aa9 	.word	0x80000aa9
    1cc0:	000028cc 	.word	0x000028cc
    1cc4:	0000287d 	.word	0x0000287d

00001cc8 <custom_fs_get_other_data_from_continuous_read_from_flash>:
*   \param  datap       Pointer to where to store the data
    \param  size        How many bytes to read
    \param  use_dma     Boolean to specify if we use DMA: if set, function will return before data is transferred!
*/
void custom_fs_get_other_data_from_continuous_read_from_flash(uint8_t* datap, uint32_t size, BOOL use_dma)
{
    1cc8:	b510      	push	{r4, lr}
    1cca:	0004      	movs	r4, r0
    /* Check if we have opened the SPI bus */
    if (custom_fs_data_bus_opened == FALSE)
    1ccc:	4b0a      	ldr	r3, [pc, #40]	; (1cf8 <custom_fs_get_other_data_from_continuous_read_from_flash+0x30>)
    1cce:	681b      	ldr	r3, [r3, #0]
    1cd0:	2b00      	cmp	r3, #0
    1cd2:	d007      	beq.n	1ce4 <custom_fs_get_other_data_from_continuous_read_from_flash+0x1c>
    {
        return;
    }
    
    /* If we are using DMA */
    if (use_dma != FALSE)
    1cd4:	2a00      	cmp	r2, #0
    1cd6:	d106      	bne.n	1ce6 <custom_fs_get_other_data_from_continuous_read_from_flash+0x1e>
        dma_custom_fs_init_transfer(custom_fs_dataflash_desc->sercom_pt, (void*)datap, size);
    }
    else
    {
        /* Read data */
        dataflash_read_bytes_from_opened_transfer(custom_fs_dataflash_desc, datap, size);
    1cd8:	4b08      	ldr	r3, [pc, #32]	; (1cfc <custom_fs_get_other_data_from_continuous_read_from_flash+0x34>)
    1cda:	6818      	ldr	r0, [r3, #0]
    1cdc:	000a      	movs	r2, r1
    1cde:	0021      	movs	r1, r4
    1ce0:	4b07      	ldr	r3, [pc, #28]	; (1d00 <custom_fs_get_other_data_from_continuous_read_from_flash+0x38>)
    1ce2:	4798      	blx	r3
    }
}
    1ce4:	bd10      	pop	{r4, pc}
        dma_custom_fs_init_transfer(custom_fs_dataflash_desc->sercom_pt, (void*)datap, size);
    1ce6:	b28a      	uxth	r2, r1
    1ce8:	4b04      	ldr	r3, [pc, #16]	; (1cfc <custom_fs_get_other_data_from_continuous_read_from_flash+0x34>)
    1cea:	681b      	ldr	r3, [r3, #0]
    1cec:	6818      	ldr	r0, [r3, #0]
    1cee:	0021      	movs	r1, r4
    1cf0:	4b04      	ldr	r3, [pc, #16]	; (1d04 <custom_fs_get_other_data_from_continuous_read_from_flash+0x3c>)
    1cf2:	4798      	blx	r3
    1cf4:	e7f6      	b.n	1ce4 <custom_fs_get_other_data_from_continuous_read_from_flash+0x1c>
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	2000006c 	.word	0x2000006c
    1cfc:	20000070 	.word	0x20000070
    1d00:	00002175 	.word	0x00002175
    1d04:	00001ae1 	.word	0x00001ae1

00001d08 <custom_fs_continuous_read_from_flash>:
    \param  size        How many bytes to read
    \param  use_dma     Boolean to specify if we use DMA: if set, function will return before data is transferred!
*   \return success status
*/
RET_TYPE custom_fs_continuous_read_from_flash(uint8_t* datap, custom_fs_address_t address, uint32_t size, BOOL use_dma)
{
    1d08:	b570      	push	{r4, r5, r6, lr}
    1d0a:	0005      	movs	r5, r0
    1d0c:	0014      	movs	r4, r2
    1d0e:	001e      	movs	r6, r3
    /* Check for emergency font file exception */
    if ((address >= CUSTOM_FS_EMERGENCY_FONT_FILE_ADDR) && (address+size <= CUSTOM_FS_EMERGENCY_FONT_FILE_ADDR + sizeof(custom_fs_emergency_font_file)))
    1d10:	2900      	cmp	r1, #0
    1d12:	db0d      	blt.n	1d30 <custom_fs_continuous_read_from_flash+0x28>
        }
    }
    else
    {
        /* Check if we have opened the SPI bus */
        if (custom_fs_data_bus_opened == FALSE)
    1d14:	4b17      	ldr	r3, [pc, #92]	; (1d74 <custom_fs_continuous_read_from_flash+0x6c>)
    1d16:	681b      	ldr	r3, [r3, #0]
    1d18:	2b00      	cmp	r3, #0
    1d1a:	d01b      	beq.n	1d54 <custom_fs_continuous_read_from_flash+0x4c>
            dataflash_read_data_array_start(custom_fs_dataflash_desc, address);
            custom_fs_data_bus_opened = TRUE;
        }
        
        /* If we are using DMA */
        if (use_dma != FALSE)
    1d1c:	2e00      	cmp	r6, #0
    1d1e:	d121      	bne.n	1d64 <custom_fs_continuous_read_from_flash+0x5c>
            dma_custom_fs_init_transfer(custom_fs_dataflash_desc->sercom_pt, (void*)datap, size);
        }
        else
        {
            /* Read data */
            dataflash_read_bytes_from_opened_transfer(custom_fs_dataflash_desc, datap, size);
    1d20:	4b15      	ldr	r3, [pc, #84]	; (1d78 <custom_fs_continuous_read_from_flash+0x70>)
    1d22:	6818      	ldr	r0, [r3, #0]
    1d24:	0022      	movs	r2, r4
    1d26:	0029      	movs	r1, r5
    1d28:	4b14      	ldr	r3, [pc, #80]	; (1d7c <custom_fs_continuous_read_from_flash+0x74>)
    1d2a:	4798      	blx	r3
        }        
    }
    
    return RETURN_OK;
}
    1d2c:	2000      	movs	r0, #0
    1d2e:	bd70      	pop	{r4, r5, r6, pc}
    if ((address >= CUSTOM_FS_EMERGENCY_FONT_FILE_ADDR) && (address+size <= CUSTOM_FS_EMERGENCY_FONT_FILE_ADDR + sizeof(custom_fs_emergency_font_file)))
    1d30:	188b      	adds	r3, r1, r2
    1d32:	4a13      	ldr	r2, [pc, #76]	; (1d80 <custom_fs_continuous_read_from_flash+0x78>)
    1d34:	4293      	cmp	r3, r2
    1d36:	d8ed      	bhi.n	1d14 <custom_fs_continuous_read_from_flash+0xc>
        memcpy(datap, &custom_fs_emergency_font_file[address-CUSTOM_FS_EMERGENCY_FONT_FILE_ADDR], size);
    1d38:	2380      	movs	r3, #128	; 0x80
    1d3a:	061b      	lsls	r3, r3, #24
    1d3c:	469c      	mov	ip, r3
    1d3e:	4461      	add	r1, ip
    1d40:	4b10      	ldr	r3, [pc, #64]	; (1d84 <custom_fs_continuous_read_from_flash+0x7c>)
    1d42:	18c9      	adds	r1, r1, r3
    1d44:	0022      	movs	r2, r4
    1d46:	4b10      	ldr	r3, [pc, #64]	; (1d88 <custom_fs_continuous_read_from_flash+0x80>)
    1d48:	4798      	blx	r3
        if (use_dma != FALSE)
    1d4a:	2e00      	cmp	r6, #0
    1d4c:	d0ee      	beq.n	1d2c <custom_fs_continuous_read_from_flash+0x24>
            dma_set_custom_fs_flag_done();
    1d4e:	4b0f      	ldr	r3, [pc, #60]	; (1d8c <custom_fs_continuous_read_from_flash+0x84>)
    1d50:	4798      	blx	r3
    1d52:	e7eb      	b.n	1d2c <custom_fs_continuous_read_from_flash+0x24>
            dataflash_read_data_array_start(custom_fs_dataflash_desc, address);
    1d54:	4b08      	ldr	r3, [pc, #32]	; (1d78 <custom_fs_continuous_read_from_flash+0x70>)
    1d56:	6818      	ldr	r0, [r3, #0]
    1d58:	4b0d      	ldr	r3, [pc, #52]	; (1d90 <custom_fs_continuous_read_from_flash+0x88>)
    1d5a:	4798      	blx	r3
            custom_fs_data_bus_opened = TRUE;
    1d5c:	2201      	movs	r2, #1
    1d5e:	4b05      	ldr	r3, [pc, #20]	; (1d74 <custom_fs_continuous_read_from_flash+0x6c>)
    1d60:	601a      	str	r2, [r3, #0]
    1d62:	e7db      	b.n	1d1c <custom_fs_continuous_read_from_flash+0x14>
            dma_custom_fs_init_transfer(custom_fs_dataflash_desc->sercom_pt, (void*)datap, size);
    1d64:	b2a2      	uxth	r2, r4
    1d66:	4b04      	ldr	r3, [pc, #16]	; (1d78 <custom_fs_continuous_read_from_flash+0x70>)
    1d68:	681b      	ldr	r3, [r3, #0]
    1d6a:	6818      	ldr	r0, [r3, #0]
    1d6c:	0029      	movs	r1, r5
    1d6e:	4b09      	ldr	r3, [pc, #36]	; (1d94 <custom_fs_continuous_read_from_flash+0x8c>)
    1d70:	4798      	blx	r3
    1d72:	e7db      	b.n	1d2c <custom_fs_continuous_read_from_flash+0x24>
    1d74:	2000006c 	.word	0x2000006c
    1d78:	20000070 	.word	0x20000070
    1d7c:	00002175 	.word	0x00002175
    1d80:	80000aa9 	.word	0x80000aa9
    1d84:	000028cc 	.word	0x000028cc
    1d88:	0000287d 	.word	0x0000287d
    1d8c:	000019a9 	.word	0x000019a9
    1d90:	00002131 	.word	0x00002131
    1d94:	00001ae1 	.word	0x00001ae1

00001d98 <custom_fs_compute_and_check_external_bundle_crc32>:
/*! \fn     custom_fs_compute_and_check_external_bundle_crc32(void)
*   \brief  Compute the crc32 of our bundle
*   \return Success status
*/
RET_TYPE custom_fs_compute_and_check_external_bundle_crc32(void)
{
    1d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef EMULATOR_BUILD
    /* Start a read on external flash */
    dataflash_read_data_array_start(custom_fs_dataflash_desc, CUSTOM_FS_FILES_ADDR_OFFSET + sizeof(custom_fs_flash_header.magic_header) + sizeof(custom_fs_flash_header.total_size) + sizeof(custom_fs_flash_header.crc32));
    1d9a:	4c0c      	ldr	r4, [pc, #48]	; (1dcc <custom_fs_compute_and_check_external_bundle_crc32+0x34>)
    1d9c:	210c      	movs	r1, #12
    1d9e:	6820      	ldr	r0, [r4, #0]
    1da0:	4b0b      	ldr	r3, [pc, #44]	; (1dd0 <custom_fs_compute_and_check_external_bundle_crc32+0x38>)
    1da2:	4798      	blx	r3

    /* Reset DMA controller */
    dma_reset();
    1da4:	4e0b      	ldr	r6, [pc, #44]	; (1dd4 <custom_fs_compute_and_check_external_bundle_crc32+0x3c>)
    1da6:	47b0      	blx	r6

    /* Use the DMA controller to compute the crc32 */
    uint32_t crc32 = dma_compute_crc32_from_spi(custom_fs_dataflash_desc->sercom_pt, custom_fs_flash_header.total_size - sizeof(custom_fs_flash_header.magic_header) - sizeof(custom_fs_flash_header.total_size) - sizeof(custom_fs_flash_header.crc32));
    1da8:	4d0b      	ldr	r5, [pc, #44]	; (1dd8 <custom_fs_compute_and_check_external_bundle_crc32+0x40>)
    1daa:	6869      	ldr	r1, [r5, #4]
    1dac:	390c      	subs	r1, #12
    1dae:	6823      	ldr	r3, [r4, #0]
    1db0:	6818      	ldr	r0, [r3, #0]
    1db2:	4b0a      	ldr	r3, [pc, #40]	; (1ddc <custom_fs_compute_and_check_external_bundle_crc32+0x44>)
    1db4:	4798      	blx	r3
    1db6:	0007      	movs	r7, r0
    
    /* Stop transfer */
    dataflash_stop_ongoing_transfer(custom_fs_dataflash_desc);
    1db8:	6820      	ldr	r0, [r4, #0]
    1dba:	4b09      	ldr	r3, [pc, #36]	; (1de0 <custom_fs_compute_and_check_external_bundle_crc32+0x48>)
    1dbc:	4798      	blx	r3
    
    /* Reset DMA controller */
    dma_reset();
    1dbe:	47b0      	blx	r6
    
    /* Do the final check */
    if (custom_fs_flash_header.crc32 == crc32)
    1dc0:	68a8      	ldr	r0, [r5, #8]
    1dc2:	1bc0      	subs	r0, r0, r7
    1dc4:	1e43      	subs	r3, r0, #1
    1dc6:	4198      	sbcs	r0, r3
    1dc8:	4240      	negs	r0, r0

#else
    /* We don't emulate the DMA controller, and don't bother with reimplementing the crc32 routines */
    return RETURN_OK;
#endif
}
    1dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dcc:	20000070 	.word	0x20000070
    1dd0:	00002131 	.word	0x00002131
    1dd4:	000019b5 	.word	0x000019b5
    1dd8:	200001f4 	.word	0x200001f4
    1ddc:	00001b29 	.word	0x00001b29
    1de0:	00002199 	.word	0x00002199

00001de4 <custom_fs_stop_continuous_read_from_flash>:

/*! \fn     custom_fs_stop_continuous_read_from_flash(void)
*   \brief  Stop a continuous flash read
*/
void custom_fs_stop_continuous_read_from_flash(void)
{
    1de4:	b510      	push	{r4, lr}
    dataflash_stop_ongoing_transfer(custom_fs_dataflash_desc);
    1de6:	4b04      	ldr	r3, [pc, #16]	; (1df8 <custom_fs_stop_continuous_read_from_flash+0x14>)
    1de8:	6818      	ldr	r0, [r3, #0]
    1dea:	4b04      	ldr	r3, [pc, #16]	; (1dfc <custom_fs_stop_continuous_read_from_flash+0x18>)
    1dec:	4798      	blx	r3
    custom_fs_data_bus_opened = FALSE;
    1dee:	2200      	movs	r2, #0
    1df0:	4b03      	ldr	r3, [pc, #12]	; (1e00 <custom_fs_stop_continuous_read_from_flash+0x1c>)
    1df2:	601a      	str	r2, [r3, #0]
}
    1df4:	bd10      	pop	{r4, pc}
    1df6:	46c0      	nop			; (mov r8, r8)
    1df8:	20000070 	.word	0x20000070
    1dfc:	00002199 	.word	0x00002199
    1e00:	2000006c 	.word	0x2000006c

00001e04 <custom_fs_set_dataflash_descriptor>:
*   \param  desc    Pointer to the SPI flash port descriptor
*/
void custom_fs_set_dataflash_descriptor(spi_flash_descriptor_t* desc)
{
    /* Locally copy the flash descriptor */
    custom_fs_dataflash_desc = desc;    
    1e04:	4b01      	ldr	r3, [pc, #4]	; (1e0c <custom_fs_set_dataflash_descriptor+0x8>)
    1e06:	6018      	str	r0, [r3, #0]
}
    1e08:	4770      	bx	lr
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	20000070 	.word	0x20000070

00001e10 <custom_fs_init>:
/*! \fn     custom_fs_init(void)
*   \brief  Initialize our custom file system... system
*   \return RETURN_(N)OK
*/
ret_type_te custom_fs_init(void)
{    
    1e10:	b510      	push	{r4, lr}
    /* Initialize internal data structures responsible for "custom storage slots".
     * At the moment this doesn't do anything on the regular, non-emulator build. */
    custom_fs_init_custom_storage_slots();
    
    /* Read flash header */
    custom_fs_read_from_flash((uint8_t*)&custom_fs_flash_header, CUSTOM_FS_FILES_ADDR_OFFSET, sizeof(custom_fs_flash_header));
    1e12:	4c0a      	ldr	r4, [pc, #40]	; (1e3c <custom_fs_init+0x2c>)
    1e14:	2280      	movs	r2, #128	; 0x80
    1e16:	2100      	movs	r1, #0
    1e18:	0020      	movs	r0, r4
    1e1a:	4b09      	ldr	r3, [pc, #36]	; (1e40 <custom_fs_init+0x30>)
    1e1c:	4798      	blx	r3
    
    /* Check correct header */
    if (custom_fs_flash_header.magic_header != CUSTOM_FS_MAGIC_HEADER)
    1e1e:	4b09      	ldr	r3, [pc, #36]	; (1e44 <custom_fs_init+0x34>)
    1e20:	6822      	ldr	r2, [r4, #0]
    1e22:	429a      	cmp	r2, r3
    1e24:	d106      	bne.n	1e34 <custom_fs_init+0x24>
    {
        return RETURN_NOK;
    }
    
    /* Check correct payload length */
    if (CUSTOM_FS_FILES_ADDR_OFFSET + custom_fs_flash_header.total_size > W25Q16_FLASH_SIZE)
    1e26:	4b05      	ldr	r3, [pc, #20]	; (1e3c <custom_fs_init+0x2c>)
    1e28:	685b      	ldr	r3, [r3, #4]
    1e2a:	2080      	movs	r0, #128	; 0x80
    1e2c:	0380      	lsls	r0, r0, #14
    1e2e:	4298      	cmp	r0, r3
    1e30:	4180      	sbcs	r0, r0
        }    
    
    /* Set default language */
        return custom_fs_set_current_language(default_device_language);
    #endif
}
    1e32:	bd10      	pop	{r4, pc}
        return RETURN_NOK;
    1e34:	2001      	movs	r0, #1
    1e36:	4240      	negs	r0, r0
    1e38:	e7fb      	b.n	1e32 <custom_fs_init+0x22>
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	200001f4 	.word	0x200001f4
    1e40:	00001c81 	.word	0x00001c81
    1e44:	12345678 	.word	0x12345678

00001e48 <custom_fs_get_start_address_of_signed_data>:
*   \return The start address
*/
custom_fs_address_t custom_fs_get_start_address_of_signed_data(void)
{
    return START_OF_SIGNED_DATA_IN_DATA_FLASH;
}
    1e48:	2020      	movs	r0, #32
    1e4a:	4770      	bx	lr

00001e4c <custom_fs_get_file_address>:
*   \param  address     Pointer to where to store the address
*   \param  file_type   File type (see enum)
*   \return success status
*/
RET_TYPE custom_fs_get_file_address(uint32_t file_id, custom_fs_address_t* address, custom_fs_file_type_te file_type)
{
    1e4c:	b510      	push	{r4, lr}
    1e4e:	000c      	movs	r4, r1
    custom_fs_address_t file_table_address;
    uint32_t language_offset = 0;

    // Check for invalid file index or flash not formatted
    if (file_type == CUSTOM_FS_STRING_TYPE)
    1e50:	2a00      	cmp	r2, #0
    1e52:	d111      	bne.n	1e78 <custom_fs_get_file_address+0x2c>
    {
        if ((file_id >= custom_fs_flash_header.string_file_count) || (custom_fs_flash_header.string_file_count == CUSTOM_FS_MAX_FILE_COUNT))
    1e54:	4b36      	ldr	r3, [pc, #216]	; (1f30 <custom_fs_get_file_address+0xe4>)
    1e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    1e58:	4283      	cmp	r3, r0
    1e5a:	d947      	bls.n	1eec <custom_fs_get_file_address+0xa0>
    1e5c:	3301      	adds	r3, #1
    1e5e:	d048      	beq.n	1ef2 <custom_fs_get_file_address+0xa6>
        {
            return RETURN_NOK;
        }
        else
        {
            file_table_address = custom_fs_flash_header.string_file_offset;
    1e60:	4b33      	ldr	r3, [pc, #204]	; (1f30 <custom_fs_get_file_address+0xe4>)
    1e62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    uint32_t language_offset = 0;
    1e64:	2300      	movs	r3, #0
    {
        return RETURN_NOK;
    }

    /* Read the file address : <filecount> <fileid0><address0> <fileid1><address1> ... */
    custom_fs_read_from_flash((uint8_t*)address, CUSTOM_FS_FILES_ADDR_OFFSET + file_table_address + (file_id + language_offset) * sizeof(*address), sizeof(*address));
    1e66:	1819      	adds	r1, r3, r0
    1e68:	0089      	lsls	r1, r1, #2
    1e6a:	1889      	adds	r1, r1, r2
    1e6c:	2204      	movs	r2, #4
    1e6e:	0020      	movs	r0, r4
    1e70:	4b30      	ldr	r3, [pc, #192]	; (1f34 <custom_fs_get_file_address+0xe8>)
    1e72:	4798      	blx	r3
    
    /* Add the file address offset */
    *address += CUSTOM_FS_FILES_ADDR_OFFSET;
    
    return RETURN_OK;
    1e74:	2000      	movs	r0, #0
}
    1e76:	bd10      	pop	{r4, pc}
    else if (file_type == CUSTOM_FS_FONTS_TYPE)
    1e78:	2a01      	cmp	r2, #1
    1e7a:	d00f      	beq.n	1e9c <custom_fs_get_file_address+0x50>
    else if (file_type == CUSTOM_FS_BITMAP_TYPE)
    1e7c:	2a02      	cmp	r2, #2
    1e7e:	d019      	beq.n	1eb4 <custom_fs_get_file_address+0x68>
    else if (file_type == CUSTOM_FS_BINARY_TYPE)
    1e80:	2a03      	cmp	r2, #3
    1e82:	d029      	beq.n	1ed8 <custom_fs_get_file_address+0x8c>
    else if (file_type == CUSTOM_FS_FW_UPDATE_TYPE)
    1e84:	2a04      	cmp	r2, #4
    1e86:	d149      	bne.n	1f1c <custom_fs_get_file_address+0xd0>
        if ((file_id >= custom_fs_flash_header.update_file_count) || (custom_fs_flash_header.update_file_count == CUSTOM_FS_MAX_FILE_COUNT))
    1e88:	4b29      	ldr	r3, [pc, #164]	; (1f30 <custom_fs_get_file_address+0xe4>)
    1e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1e8c:	4298      	cmp	r0, r3
    1e8e:	d248      	bcs.n	1f22 <custom_fs_get_file_address+0xd6>
    1e90:	3301      	adds	r3, #1
    1e92:	d049      	beq.n	1f28 <custom_fs_get_file_address+0xdc>
            file_table_address = custom_fs_flash_header.update_file_offset;
    1e94:	4b26      	ldr	r3, [pc, #152]	; (1f30 <custom_fs_get_file_address+0xe4>)
    1e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    uint32_t language_offset = 0;
    1e98:	2300      	movs	r3, #0
    1e9a:	e7e4      	b.n	1e66 <custom_fs_get_file_address+0x1a>
        language_offset = custom_fs_cur_language_entry.starting_font;
    1e9c:	4b26      	ldr	r3, [pc, #152]	; (1f38 <custom_fs_get_file_address+0xec>)
    1e9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
        if (((file_id + language_offset) >= custom_fs_flash_header.fonts_file_count) || (custom_fs_flash_header.fonts_file_count == CUSTOM_FS_MAX_FILE_COUNT))
    1ea0:	4a23      	ldr	r2, [pc, #140]	; (1f30 <custom_fs_get_file_address+0xe4>)
    1ea2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    1ea4:	18c1      	adds	r1, r0, r3
    1ea6:	4291      	cmp	r1, r2
    1ea8:	d226      	bcs.n	1ef8 <custom_fs_get_file_address+0xac>
    1eaa:	3201      	adds	r2, #1
    1eac:	d027      	beq.n	1efe <custom_fs_get_file_address+0xb2>
            file_table_address = custom_fs_flash_header.fonts_file_offset;
    1eae:	4a20      	ldr	r2, [pc, #128]	; (1f30 <custom_fs_get_file_address+0xe4>)
    1eb0:	6e12      	ldr	r2, [r2, #96]	; 0x60
    1eb2:	e7d8      	b.n	1e66 <custom_fs_get_file_address+0x1a>
        if (file_id >= custom_fs_flash_header.language_bitmap_starting_id)
    1eb4:	4b1e      	ldr	r3, [pc, #120]	; (1f30 <custom_fs_get_file_address+0xe4>)
    1eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1eb8:	2200      	movs	r2, #0
    1eba:	4298      	cmp	r0, r3
    1ebc:	d301      	bcc.n	1ec2 <custom_fs_get_file_address+0x76>
            language_offset = custom_fs_cur_language_entry.starting_bitmap;
    1ebe:	4b1e      	ldr	r3, [pc, #120]	; (1f38 <custom_fs_get_file_address+0xec>)
    1ec0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    1ec2:	0013      	movs	r3, r2
        if (((file_id + language_offset) >= custom_fs_flash_header.bitmap_file_count) || (custom_fs_flash_header.bitmap_file_count == CUSTOM_FS_MAX_FILE_COUNT))
    1ec4:	491a      	ldr	r1, [pc, #104]	; (1f30 <custom_fs_get_file_address+0xe4>)
    1ec6:	6e49      	ldr	r1, [r1, #100]	; 0x64
    1ec8:	1812      	adds	r2, r2, r0
    1eca:	428a      	cmp	r2, r1
    1ecc:	d21a      	bcs.n	1f04 <custom_fs_get_file_address+0xb8>
    1ece:	1c4a      	adds	r2, r1, #1
    1ed0:	d01b      	beq.n	1f0a <custom_fs_get_file_address+0xbe>
            file_table_address = custom_fs_flash_header.bitmap_file_offset;
    1ed2:	4a17      	ldr	r2, [pc, #92]	; (1f30 <custom_fs_get_file_address+0xe4>)
    1ed4:	6e92      	ldr	r2, [r2, #104]	; 0x68
    1ed6:	e7c6      	b.n	1e66 <custom_fs_get_file_address+0x1a>
        if ((file_id >= custom_fs_flash_header.binary_img_file_count) || (custom_fs_flash_header.binary_img_file_count == CUSTOM_FS_MAX_FILE_COUNT))
    1ed8:	4b15      	ldr	r3, [pc, #84]	; (1f30 <custom_fs_get_file_address+0xe4>)
    1eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1edc:	4298      	cmp	r0, r3
    1ede:	d217      	bcs.n	1f10 <custom_fs_get_file_address+0xc4>
    1ee0:	3301      	adds	r3, #1
    1ee2:	d018      	beq.n	1f16 <custom_fs_get_file_address+0xca>
            file_table_address = custom_fs_flash_header.binary_img_file_offset;
    1ee4:	4b12      	ldr	r3, [pc, #72]	; (1f30 <custom_fs_get_file_address+0xe4>)
    1ee6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    uint32_t language_offset = 0;
    1ee8:	2300      	movs	r3, #0
    1eea:	e7bc      	b.n	1e66 <custom_fs_get_file_address+0x1a>
            return RETURN_NOK;
    1eec:	2001      	movs	r0, #1
    1eee:	4240      	negs	r0, r0
    1ef0:	e7c1      	b.n	1e76 <custom_fs_get_file_address+0x2a>
    1ef2:	2001      	movs	r0, #1
    1ef4:	4240      	negs	r0, r0
    1ef6:	e7be      	b.n	1e76 <custom_fs_get_file_address+0x2a>
            return RETURN_NOK;
    1ef8:	2001      	movs	r0, #1
    1efa:	4240      	negs	r0, r0
    1efc:	e7bb      	b.n	1e76 <custom_fs_get_file_address+0x2a>
    1efe:	2001      	movs	r0, #1
    1f00:	4240      	negs	r0, r0
    1f02:	e7b8      	b.n	1e76 <custom_fs_get_file_address+0x2a>
            return RETURN_NOK;
    1f04:	2001      	movs	r0, #1
    1f06:	4240      	negs	r0, r0
    1f08:	e7b5      	b.n	1e76 <custom_fs_get_file_address+0x2a>
    1f0a:	2001      	movs	r0, #1
    1f0c:	4240      	negs	r0, r0
    1f0e:	e7b2      	b.n	1e76 <custom_fs_get_file_address+0x2a>
            return RETURN_NOK;
    1f10:	2001      	movs	r0, #1
    1f12:	4240      	negs	r0, r0
    1f14:	e7af      	b.n	1e76 <custom_fs_get_file_address+0x2a>
    1f16:	2001      	movs	r0, #1
    1f18:	4240      	negs	r0, r0
    1f1a:	e7ac      	b.n	1e76 <custom_fs_get_file_address+0x2a>
        return RETURN_NOK;
    1f1c:	2001      	movs	r0, #1
    1f1e:	4240      	negs	r0, r0
    1f20:	e7a9      	b.n	1e76 <custom_fs_get_file_address+0x2a>
            return RETURN_NOK;
    1f22:	2001      	movs	r0, #1
    1f24:	4240      	negs	r0, r0
    1f26:	e7a6      	b.n	1e76 <custom_fs_get_file_address+0x2a>
    1f28:	2001      	movs	r0, #1
    1f2a:	4240      	negs	r0, r0
    1f2c:	e7a3      	b.n	1e76 <custom_fs_get_file_address+0x2a>
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	200001f4 	.word	0x200001f4
    1f34:	00001c81 	.word	0x00001c81
    1f38:	20000040 	.word	0x20000040

00001f3c <custom_fs_get_custom_storage_slot_ptr>:
    #if 256 != NVMCTRL_ROW_SIZE
        #error "NVM ROW SIZE ERROR"
    #endif
    
    /* Get RWWEEE memory settings */
    uint32_t fuse = ((*((uint32_t *)NVMCTRL_AUX0_ADDRESS)) & NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> 4;
    1f3c:	4b0c      	ldr	r3, [pc, #48]	; (1f70 <custom_fs_get_custom_storage_slot_ptr+0x34>)
    1f3e:	681b      	ldr	r3, [r3, #0]
    1f40:	065b      	lsls	r3, r3, #25
    1f42:	0f5b      	lsrs	r3, r3, #29
    
    if (fuse == 7)
    1f44:	2b07      	cmp	r3, #7
    1f46:	d00e      	beq.n	1f66 <custom_fs_get_custom_storage_slot_ptr+0x2a>
        return 0;
    }
    else
    {
        /* Compute amount of simulated EEPROM */
        emulated_eeprom_size = NVMCTRL_ROW_SIZE << (6 - fuse);
    1f48:	2206      	movs	r2, #6
    1f4a:	1ad2      	subs	r2, r2, r3
    1f4c:	2380      	movs	r3, #128	; 0x80
    1f4e:	005b      	lsls	r3, r3, #1
    1f50:	4093      	lsls	r3, r2
    }
    
    /* Check slot_id */
    if (slot_id >= emulated_eeprom_size/NVMCTRL_ROW_SIZE)
    1f52:	0a1a      	lsrs	r2, r3, #8
    1f54:	4282      	cmp	r2, r0
    1f56:	d908      	bls.n	1f6a <custom_fs_get_custom_storage_slot_ptr+0x2e>
    {
        return 0;
    }
    
    /* Compute address of where we want to write data */
    return (void*)(FLASH_ADDR + FLASH_SIZE - emulated_eeprom_size + slot_id*NVMCTRL_ROW_SIZE);
    1f58:	0200      	lsls	r0, r0, #8
    1f5a:	2280      	movs	r2, #128	; 0x80
    1f5c:	02d2      	lsls	r2, r2, #11
    1f5e:	4694      	mov	ip, r2
    1f60:	4460      	add	r0, ip
    1f62:	1ac0      	subs	r0, r0, r3
}
    1f64:	4770      	bx	lr
        return 0;
    1f66:	2000      	movs	r0, #0
    1f68:	e7fc      	b.n	1f64 <custom_fs_get_custom_storage_slot_ptr+0x28>
        return 0;
    1f6a:	2000      	movs	r0, #0
    1f6c:	e7fa      	b.n	1f64 <custom_fs_get_custom_storage_slot_ptr+0x28>
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	00804000 	.word	0x00804000

00001f74 <custom_fs_settings_init>:
{        
    1f74:	b570      	push	{r4, r5, r6, lr}
    void* flash_ptr = custom_fs_get_custom_storage_slot_ptr(SETTINGS_STORAGE_SLOT);
    1f76:	2000      	movs	r0, #0
    1f78:	4b0e      	ldr	r3, [pc, #56]	; (1fb4 <custom_fs_settings_init+0x40>)
    1f7a:	4798      	blx	r3
    if (flash_ptr != 0)
    1f7c:	2800      	cmp	r0, #0
    1f7e:	d016      	beq.n	1fae <custom_fs_settings_init+0x3a>
        custom_fs_platform_settings_p = (custom_platform_settings_t*)flash_ptr;
    1f80:	4b0d      	ldr	r3, [pc, #52]	; (1fb8 <custom_fs_settings_init+0x44>)
    1f82:	6018      	str	r0, [r3, #0]
        flash_ptr = custom_fs_get_custom_storage_slot_ptr(FIRST_CPZ_LUT_ENTRY_STORAGE_SLOT);
    1f84:	2004      	movs	r0, #4
    1f86:	4d0b      	ldr	r5, [pc, #44]	; (1fb4 <custom_fs_settings_init+0x40>)
    1f88:	47a8      	blx	r5
    1f8a:	0004      	movs	r4, r0
        custom_fs_cpz_lut = (cpz_lut_entry_t*)flash_ptr;
    1f8c:	4b0b      	ldr	r3, [pc, #44]	; (1fbc <custom_fs_settings_init+0x48>)
    1f8e:	6018      	str	r0, [r3, #0]
        flash_ptr = custom_fs_get_custom_storage_slot_ptr(FLAGS_STORAGE_SLOT);
    1f90:	2001      	movs	r0, #1
    1f92:	47a8      	blx	r5
        if ((uintptr_t)&custom_fs_cpz_lut[MAX_NUMBER_OF_USERS] != FLASH_ADDR + FLASH_SIZE)
    1f94:	23e0      	movs	r3, #224	; 0xe0
    1f96:	015b      	lsls	r3, r3, #5
    1f98:	469c      	mov	ip, r3
    1f9a:	4464      	add	r4, ip
    1f9c:	2380      	movs	r3, #128	; 0x80
    1f9e:	02db      	lsls	r3, r3, #11
    1fa0:	429c      	cmp	r4, r3
    1fa2:	d000      	beq.n	1fa6 <custom_fs_settings_init+0x32>
    1fa4:	e7fe      	b.n	1fa4 <custom_fs_settings_init+0x30>
        custom_fs_platform_flags_p = (custom_platform_flags_t*)flash_ptr;
    1fa6:	4b06      	ldr	r3, [pc, #24]	; (1fc0 <custom_fs_settings_init+0x4c>)
    1fa8:	6018      	str	r0, [r3, #0]
        return CUSTOM_FS_INIT_OK;
    1faa:	2000      	movs	r0, #0
}
    1fac:	bd70      	pop	{r4, r5, r6, pc}
        return CUSTOM_FS_INIT_NO_RWEE;
    1fae:	2001      	movs	r0, #1
    1fb0:	e7fc      	b.n	1fac <custom_fs_settings_init+0x38>
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	00001f3d 	.word	0x00001f3d
    1fb8:	20000078 	.word	0x20000078
    1fbc:	200001f0 	.word	0x200001f0
    1fc0:	20000074 	.word	0x20000074

00001fc4 <custom_fs_write_256B_at_internal_custom_storage_slot>:
*   \param  array       256 bytes array (matches NVMCTRL_ROW_SIZE)
*   \note   Please make sure the fuses are correctly configured
*   \note   NVM configured as EEPROM allows access to NVM when EEPROM is being written or erased (convenient when interrupts occur)
*/
void custom_fs_write_256B_at_internal_custom_storage_slot(uint32_t slot_id, void* array)
{
    1fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fc6:	000c      	movs	r4, r1
#ifndef FEATURE_NVM_RWWEE    
    /* Compute address of where we want to write data */
    void *flash_ptr = custom_fs_get_custom_storage_slot_ptr(slot_id);
    1fc8:	4b1b      	ldr	r3, [pc, #108]	; (2038 <STACK_SIZE+0x38>)
    1fca:	4798      	blx	r3
    uint32_t flash_addr = (uint32_t)flash_ptr;
    1fcc:	1e06      	subs	r6, r0, #0
    
    /* Check if we were successful */
    if (flash_addr == 0)
    1fce:	d032      	beq.n	2036 <STACK_SIZE+0x36>
    {
        return;
    }
    
    /* Automatic write, disable caching */
    NVMCTRL->CTRLB.bit.MANW = 0;
    1fd0:	4b1a      	ldr	r3, [pc, #104]	; (203c <STACK_SIZE+0x3c>)
    1fd2:	685a      	ldr	r2, [r3, #4]
    1fd4:	2180      	movs	r1, #128	; 0x80
    1fd6:	438a      	bics	r2, r1
    1fd8:	605a      	str	r2, [r3, #4]
    NVMCTRL->CTRLB.bit.CACHEDIS = 1;
    1fda:	6859      	ldr	r1, [r3, #4]
    1fdc:	2280      	movs	r2, #128	; 0x80
    1fde:	02d2      	lsls	r2, r2, #11
    1fe0:	430a      	orrs	r2, r1
    1fe2:	605a      	str	r2, [r3, #4]
    
    /* Erase complete row */
    while ((NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY) == 0);
    1fe4:	0019      	movs	r1, r3
    1fe6:	2201      	movs	r2, #1
    1fe8:	7d0b      	ldrb	r3, [r1, #20]
    1fea:	4213      	tst	r3, r2
    1fec:	d0fc      	beq.n	1fe8 <custom_fs_write_256B_at_internal_custom_storage_slot+0x24>
    NVMCTRL->ADDR.reg  = flash_addr/2;
    1fee:	0842      	lsrs	r2, r0, #1
    1ff0:	4b12      	ldr	r3, [pc, #72]	; (203c <STACK_SIZE+0x3c>)
    1ff2:	61da      	str	r2, [r3, #28]
    NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    1ff4:	4a12      	ldr	r2, [pc, #72]	; (2040 <STACK_SIZE+0x40>)
    1ff6:	801a      	strh	r2, [r3, #0]
    1ff8:	1c43      	adds	r3, r0, #1
    1ffa:	33ff      	adds	r3, #255	; 0xff
    1ffc:	469c      	mov	ip, r3
        
    /* Flash bytes */
    for (uint32_t j = 0; j < 4; j++)
    {
        /* Flash 4 consecutive pages */
        while ((NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY) == 0);
    1ffe:	4f0f      	ldr	r7, [pc, #60]	; (203c <STACK_SIZE+0x3c>)
    2000:	2201      	movs	r2, #1
    2002:	7d3b      	ldrb	r3, [r7, #20]
    2004:	4213      	tst	r3, r2
    2006:	d0fc      	beq.n	2002 <STACK_SIZE+0x2>
    2008:	0005      	movs	r5, r0
    200a:	3540      	adds	r5, #64	; 0x40
        for(uint32_t i = 0; i < NVMCTRL_ROW_SIZE/4; i+=2)
        {
            NVM_MEMORY[(flash_addr+j*(NVMCTRL_ROW_SIZE/4)+i)/2] = ((uint16_t*)array)[(j*(NVMCTRL_ROW_SIZE/4)+i)/2];
    200c:	0001      	movs	r1, r0
    200e:	4391      	bics	r1, r2
    2010:	1b83      	subs	r3, r0, r6
    2012:	4393      	bics	r3, r2
    2014:	5ae3      	ldrh	r3, [r4, r3]
    2016:	800b      	strh	r3, [r1, #0]
    2018:	3002      	adds	r0, #2
        for(uint32_t i = 0; i < NVMCTRL_ROW_SIZE/4; i+=2)
    201a:	42a8      	cmp	r0, r5
    201c:	d1f6      	bne.n	200c <STACK_SIZE+0xc>
    201e:	0028      	movs	r0, r5
    for (uint32_t j = 0; j < 4; j++)
    2020:	45ac      	cmp	ip, r5
    2022:	d1ee      	bne.n	2002 <STACK_SIZE+0x2>
        }
    }

    /* Disable automatic write, enable caching */
    NVMCTRL->CTRLB.bit.MANW = 1;
    2024:	4b05      	ldr	r3, [pc, #20]	; (203c <STACK_SIZE+0x3c>)
    2026:	685a      	ldr	r2, [r3, #4]
    2028:	2180      	movs	r1, #128	; 0x80
    202a:	430a      	orrs	r2, r1
    202c:	605a      	str	r2, [r3, #4]
    NVMCTRL->CTRLB.bit.CACHEDIS = 0;
    202e:	685a      	ldr	r2, [r3, #4]
    2030:	4904      	ldr	r1, [pc, #16]	; (2044 <STACK_SIZE+0x44>)
    2032:	400a      	ands	r2, r1
    2034:	605a      	str	r2, [r3, #4]
#endif
}
    2036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2038:	00001f3d 	.word	0x00001f3d
    203c:	41004000 	.word	0x41004000
    2040:	ffffa502 	.word	0xffffa502
    2044:	fffbffff 	.word	0xfffbffff

00002048 <custom_fs_read_256B_at_internal_custom_storage_slot>:
*   \param  array       256 bytes array (matches NVMCTRL_ROW_SIZE)
*   \note   Please make sure the fuses are correctly configured
*   \note   NVM configured as EEPROM allows access to NVM when EEPROM is being written or erased (convenient when interrupts occur)
*/
void custom_fs_read_256B_at_internal_custom_storage_slot(uint32_t slot_id, void* array)
{
    2048:	b510      	push	{r4, lr}
    204a:	000c      	movs	r4, r1
#ifndef FEATURE_NVM_RWWEE
    /* Compute address of where we want to read data */
    void* flash_addr = custom_fs_get_custom_storage_slot_ptr(slot_id);
    204c:	4b05      	ldr	r3, [pc, #20]	; (2064 <custom_fs_read_256B_at_internal_custom_storage_slot+0x1c>)
    204e:	4798      	blx	r3
    
    /* Check if we were successful */
    if (flash_addr == 0)
    2050:	2800      	cmp	r0, #0
    2052:	d005      	beq.n	2060 <custom_fs_read_256B_at_internal_custom_storage_slot+0x18>
    {
        return;
    }
    
    /* Perform the copy */
    memcpy(array, (const void*)flash_addr, NVMCTRL_ROW_SIZE);
    2054:	2280      	movs	r2, #128	; 0x80
    2056:	0052      	lsls	r2, r2, #1
    2058:	0001      	movs	r1, r0
    205a:	0020      	movs	r0, r4
    205c:	4b02      	ldr	r3, [pc, #8]	; (2068 <custom_fs_read_256B_at_internal_custom_storage_slot+0x20>)
    205e:	4798      	blx	r3
#endif
}
    2060:	bd10      	pop	{r4, pc}
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	00001f3d 	.word	0x00001f3d
    2068:	0000287d 	.word	0x0000287d

0000206c <custom_fs_settings_clear_fw_upgrade_flag>:

/*! \fn     custom_fs_settings_clear_fw_upgrade_flag(void)
*   \brief  Clear the fw upgrade flag inside our settings
*/
void custom_fs_settings_clear_fw_upgrade_flag(void)
{
    206c:	b500      	push	{lr}
    206e:	b0c1      	sub	sp, #260	; 0x104
    volatile custom_platform_settings_t temp_settings;
    custom_fs_read_256B_at_internal_custom_storage_slot(SETTINGS_STORAGE_SLOT, (void*)&temp_settings);
    2070:	4669      	mov	r1, sp
    2072:	2000      	movs	r0, #0
    2074:	4b05      	ldr	r3, [pc, #20]	; (208c <custom_fs_settings_clear_fw_upgrade_flag+0x20>)
    2076:	4798      	blx	r3
    temp_settings.start_upgrade_flag = 0;
    2078:	2200      	movs	r2, #0
    207a:	23fc      	movs	r3, #252	; 0xfc
    207c:	4669      	mov	r1, sp
    207e:	50ca      	str	r2, [r1, r3]
    custom_fs_write_256B_at_internal_custom_storage_slot(SETTINGS_STORAGE_SLOT, (void*)&temp_settings);
    2080:	2000      	movs	r0, #0
    2082:	4b03      	ldr	r3, [pc, #12]	; (2090 <custom_fs_settings_clear_fw_upgrade_flag+0x24>)
    2084:	4798      	blx	r3
}
    2086:	b041      	add	sp, #260	; 0x104
    2088:	bd00      	pop	{pc}
    208a:	46c0      	nop			; (mov r8, r8)
    208c:	00002049 	.word	0x00002049
    2090:	00001fc5 	.word	0x00001fc5

00002094 <custom_fs_settings_check_fw_upgrade_flag>:
*   \brief  Check for fw upgrade flag inside our settings
*   \return The boolean
*/
BOOL custom_fs_settings_check_fw_upgrade_flag(void)
{
    if ((custom_fs_platform_settings_p != 0) && (custom_fs_platform_settings_p->start_upgrade_flag == FIRMWARE_UPGRADE_FLAG))
    2094:	4b07      	ldr	r3, [pc, #28]	; (20b4 <custom_fs_settings_check_fw_upgrade_flag+0x20>)
    2096:	681b      	ldr	r3, [r3, #0]
    2098:	2b00      	cmp	r3, #0
    209a:	d008      	beq.n	20ae <custom_fs_settings_check_fw_upgrade_flag+0x1a>
    209c:	22fc      	movs	r2, #252	; 0xfc
    209e:	5898      	ldr	r0, [r3, r2]
    20a0:	4b05      	ldr	r3, [pc, #20]	; (20b8 <custom_fs_settings_check_fw_upgrade_flag+0x24>)
    20a2:	469c      	mov	ip, r3
    20a4:	4460      	add	r0, ip
    20a6:	4243      	negs	r3, r0
    20a8:	4158      	adcs	r0, r3
    20aa:	b2c0      	uxtb	r0, r0
    }
    else
    {
        return FALSE;
    }
}
    20ac:	4770      	bx	lr
    20ae:	2000      	movs	r0, #0
    20b0:	e7fc      	b.n	20ac <custom_fs_settings_check_fw_upgrade_flag+0x18>
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	20000078 	.word	0x20000078
    20b8:	ab875456 	.word	0xab875456

000020bc <dataflash_read_data_array>:
*   \param  address         Address at which we should read data
*   \param  data            Pointer to the buffer to store the data to
*   \param  length          Length of data to read
*/
void dataflash_read_data_array(spi_flash_descriptor_t* descriptor_pt, uint32_t address, uint8_t* data, uint32_t length)
{
    20bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20be:	b083      	sub	sp, #12
    20c0:	0005      	movs	r5, r0
    20c2:	000f      	movs	r7, r1
    20c4:	9201      	str	r2, [sp, #4]
    20c6:	001e      	movs	r6, r3
    /* SS low */
    PORT->Group[descriptor_pt->cs_pin_group].OUTCLR.reg = descriptor_pt->cs_pin_mask;
    20c8:	7903      	ldrb	r3, [r0, #4]
    20ca:	01db      	lsls	r3, r3, #7
    20cc:	4916      	ldr	r1, [pc, #88]	; (2128 <dataflash_read_data_array+0x6c>)
    20ce:	468c      	mov	ip, r1
    20d0:	4463      	add	r3, ip
    20d2:	6881      	ldr	r1, [r0, #8]
    20d4:	6159      	str	r1, [r3, #20]
    
    /* Send write command */
    sercom_spi_send_single_byte(descriptor_pt->sercom_pt, 0x0B);
    20d6:	210b      	movs	r1, #11
    20d8:	6800      	ldr	r0, [r0, #0]
    20da:	4c14      	ldr	r4, [pc, #80]	; (212c <dataflash_read_data_array+0x70>)
    20dc:	47a0      	blx	r4
    sercom_spi_send_single_byte(descriptor_pt->sercom_pt, (uint8_t)((address >> 16) & 0x0FF));
    20de:	0c39      	lsrs	r1, r7, #16
    20e0:	b2c9      	uxtb	r1, r1
    20e2:	6828      	ldr	r0, [r5, #0]
    20e4:	47a0      	blx	r4
    sercom_spi_send_single_byte(descriptor_pt->sercom_pt, (uint8_t)((address >> 8) & 0x0FF));
    20e6:	0a39      	lsrs	r1, r7, #8
    20e8:	b2c9      	uxtb	r1, r1
    20ea:	6828      	ldr	r0, [r5, #0]
    20ec:	47a0      	blx	r4
    sercom_spi_send_single_byte(descriptor_pt->sercom_pt, (uint8_t)((address >> 0) & 0x0FF));
    20ee:	b2f9      	uxtb	r1, r7
    20f0:	6828      	ldr	r0, [r5, #0]
    20f2:	47a0      	blx	r4
    sercom_spi_send_single_byte(descriptor_pt->sercom_pt, 0);
    20f4:	2100      	movs	r1, #0
    20f6:	6828      	ldr	r0, [r5, #0]
    20f8:	47a0      	blx	r4
    
    /* Send data */
    for (uint32_t i = 0; i < length; i++)
    20fa:	2e00      	cmp	r6, #0
    20fc:	d00b      	beq.n	2116 <dataflash_read_data_array+0x5a>
    20fe:	9b01      	ldr	r3, [sp, #4]
    2100:	001c      	movs	r4, r3
    2102:	469c      	mov	ip, r3
    2104:	4466      	add	r6, ip
    {
        *data++ = sercom_spi_send_single_byte(descriptor_pt->sercom_pt, 0);
    2106:	4f09      	ldr	r7, [pc, #36]	; (212c <dataflash_read_data_array+0x70>)
    2108:	2100      	movs	r1, #0
    210a:	6828      	ldr	r0, [r5, #0]
    210c:	47b8      	blx	r7
    210e:	7020      	strb	r0, [r4, #0]
    2110:	3401      	adds	r4, #1
    for (uint32_t i = 0; i < length; i++)
    2112:	42b4      	cmp	r4, r6
    2114:	d1f8      	bne.n	2108 <dataflash_read_data_array+0x4c>
    }
    
    /* SS high */
    PORT->Group[descriptor_pt->cs_pin_group].OUTSET.reg = descriptor_pt->cs_pin_mask;    
    2116:	792b      	ldrb	r3, [r5, #4]
    2118:	68aa      	ldr	r2, [r5, #8]
    211a:	01db      	lsls	r3, r3, #7
    211c:	4902      	ldr	r1, [pc, #8]	; (2128 <dataflash_read_data_array+0x6c>)
    211e:	468c      	mov	ip, r1
    2120:	4463      	add	r3, ip
    2122:	619a      	str	r2, [r3, #24]
}
    2124:	b003      	add	sp, #12
    2126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2128:	41004400 	.word	0x41004400
    212c:	0000267d 	.word	0x0000267d

00002130 <dataflash_read_data_array_start>:
*   \brief  Function to start a read process on the flash
*   \param  descriptor_pt   Pointer to dataflash descriptor
*   \param  address         Address at which we should read data
*/
void dataflash_read_data_array_start(spi_flash_descriptor_t* descriptor_pt, uint32_t address)
{
    2130:	b570      	push	{r4, r5, r6, lr}
    2132:	0004      	movs	r4, r0
    2134:	000e      	movs	r6, r1
    /* SS low */
    PORT->Group[descriptor_pt->cs_pin_group].OUTCLR.reg = descriptor_pt->cs_pin_mask;
    2136:	7903      	ldrb	r3, [r0, #4]
    2138:	01db      	lsls	r3, r3, #7
    213a:	4a0c      	ldr	r2, [pc, #48]	; (216c <dataflash_read_data_array_start+0x3c>)
    213c:	4694      	mov	ip, r2
    213e:	4463      	add	r3, ip
    2140:	6882      	ldr	r2, [r0, #8]
    2142:	615a      	str	r2, [r3, #20]
    
    /* Send write command */
    sercom_spi_send_single_byte(descriptor_pt->sercom_pt, 0x0B);
    2144:	210b      	movs	r1, #11
    2146:	6800      	ldr	r0, [r0, #0]
    2148:	4d09      	ldr	r5, [pc, #36]	; (2170 <dataflash_read_data_array_start+0x40>)
    214a:	47a8      	blx	r5
    sercom_spi_send_single_byte(descriptor_pt->sercom_pt, (uint8_t)((address >> 16) & 0x0FF));
    214c:	0c31      	lsrs	r1, r6, #16
    214e:	b2c9      	uxtb	r1, r1
    2150:	6820      	ldr	r0, [r4, #0]
    2152:	47a8      	blx	r5
    sercom_spi_send_single_byte(descriptor_pt->sercom_pt, (uint8_t)((address >> 8) & 0x0FF));
    2154:	0a31      	lsrs	r1, r6, #8
    2156:	b2c9      	uxtb	r1, r1
    2158:	6820      	ldr	r0, [r4, #0]
    215a:	47a8      	blx	r5
    sercom_spi_send_single_byte(descriptor_pt->sercom_pt, (uint8_t)((address >> 0) & 0x0FF));
    215c:	b2f1      	uxtb	r1, r6
    215e:	6820      	ldr	r0, [r4, #0]
    2160:	47a8      	blx	r5
    sercom_spi_send_single_byte(descriptor_pt->sercom_pt, 0);
    2162:	6820      	ldr	r0, [r4, #0]
    2164:	2100      	movs	r1, #0
    2166:	47a8      	blx	r5
}
    2168:	bd70      	pop	{r4, r5, r6, pc}
    216a:	46c0      	nop			; (mov r8, r8)
    216c:	41004400 	.word	0x41004400
    2170:	0000267d 	.word	0x0000267d

00002174 <dataflash_read_bytes_from_opened_transfer>:
*   \param  descriptor_pt   Pointer to dataflash descriptor
*   \param  data            Pointer to the buffer to store the data to
*   \param  length          Length of data to read
*/
void dataflash_read_bytes_from_opened_transfer(spi_flash_descriptor_t* descriptor_pt, uint8_t* data, uint32_t length)
{    
    2174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2176:	0006      	movs	r6, r0
    /* Send data */
    for (uint32_t i = 0; i < length; i++)
    2178:	2a00      	cmp	r2, #0
    217a:	d009      	beq.n	2190 <dataflash_read_bytes_from_opened_transfer+0x1c>
    217c:	000c      	movs	r4, r1
    217e:	188d      	adds	r5, r1, r2
    {
        *data++ = sercom_spi_send_single_byte(descriptor_pt->sercom_pt, 0);
    2180:	4f04      	ldr	r7, [pc, #16]	; (2194 <dataflash_read_bytes_from_opened_transfer+0x20>)
    2182:	2100      	movs	r1, #0
    2184:	6830      	ldr	r0, [r6, #0]
    2186:	47b8      	blx	r7
    2188:	7020      	strb	r0, [r4, #0]
    218a:	3401      	adds	r4, #1
    for (uint32_t i = 0; i < length; i++)
    218c:	42ac      	cmp	r4, r5
    218e:	d1f8      	bne.n	2182 <dataflash_read_bytes_from_opened_transfer+0xe>
    }    
}
    2190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2192:	46c0      	nop			; (mov r8, r8)
    2194:	0000267d 	.word	0x0000267d

00002198 <dataflash_stop_ongoing_transfer>:
*   \param  descriptor_pt   Pointer to dataflash descriptor
*/
void dataflash_stop_ongoing_transfer(spi_flash_descriptor_t* descriptor_pt)
{
    /* SS high */
    PORT->Group[descriptor_pt->cs_pin_group].OUTSET.reg = descriptor_pt->cs_pin_mask;    
    2198:	7903      	ldrb	r3, [r0, #4]
    219a:	6882      	ldr	r2, [r0, #8]
    219c:	01db      	lsls	r3, r3, #7
    219e:	4902      	ldr	r1, [pc, #8]	; (21a8 <dataflash_stop_ongoing_transfer+0x10>)
    21a0:	468c      	mov	ip, r1
    21a2:	4463      	add	r3, ip
    21a4:	619a      	str	r2, [r3, #24]
}
    21a6:	4770      	bx	lr
    21a8:	41004400 	.word	0x41004400

000021ac <dataflash_send_command>:
*   \param  descriptor_pt   Pointer to dataflash descriptor
*   \param  data            Pointer to the buffer containing the data
*   \param  length          Length of data to send
*/
void dataflash_send_command(spi_flash_descriptor_t* descriptor_pt, uint8_t* data, uint32_t length)
{
    21ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ae:	0005      	movs	r5, r0
    21b0:	000c      	movs	r4, r1
    /* SS low */
    PORT->Group[descriptor_pt->cs_pin_group].OUTCLR.reg = descriptor_pt->cs_pin_mask;
    21b2:	7903      	ldrb	r3, [r0, #4]
    21b4:	01db      	lsls	r3, r3, #7
    21b6:	490c      	ldr	r1, [pc, #48]	; (21e8 <dataflash_send_command+0x3c>)
    21b8:	468c      	mov	ip, r1
    21ba:	4463      	add	r3, ip
    21bc:	6881      	ldr	r1, [r0, #8]
    21be:	6159      	str	r1, [r3, #20]
    
    for(uint32_t i = 0; i < length; i++)
    21c0:	2a00      	cmp	r2, #0
    21c2:	d008      	beq.n	21d6 <dataflash_send_command+0x2a>
    21c4:	18a6      	adds	r6, r4, r2
    {
        *data = sercom_spi_send_single_byte(descriptor_pt->sercom_pt, *data);
    21c6:	4f09      	ldr	r7, [pc, #36]	; (21ec <dataflash_send_command+0x40>)
    21c8:	7821      	ldrb	r1, [r4, #0]
    21ca:	6828      	ldr	r0, [r5, #0]
    21cc:	47b8      	blx	r7
    21ce:	7020      	strb	r0, [r4, #0]
        data++;
    21d0:	3401      	adds	r4, #1
    for(uint32_t i = 0; i < length; i++)
    21d2:	42a6      	cmp	r6, r4
    21d4:	d1f8      	bne.n	21c8 <dataflash_send_command+0x1c>
    }
    
    /* SS high */
    PORT->Group[descriptor_pt->cs_pin_group].OUTSET.reg = descriptor_pt->cs_pin_mask;
    21d6:	792b      	ldrb	r3, [r5, #4]
    21d8:	68aa      	ldr	r2, [r5, #8]
    21da:	01db      	lsls	r3, r3, #7
    21dc:	4902      	ldr	r1, [pc, #8]	; (21e8 <dataflash_send_command+0x3c>)
    21de:	468c      	mov	ip, r1
    21e0:	4463      	add	r3, ip
    21e2:	619a      	str	r2, [r3, #24]
}
    21e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21e6:	46c0      	nop			; (mov r8, r8)
    21e8:	41004400 	.word	0x41004400
    21ec:	0000267d 	.word	0x0000267d

000021f0 <dataflash_exit_power_down>:
/*! \fn     dataflash_exit_power_down(spi_flash_descriptor_t* descriptor_pt)
*   \brief  Exit power down
*   \param  descriptor_pt   Pointer to dataflash descriptor
*/
void dataflash_exit_power_down(spi_flash_descriptor_t* descriptor_pt)
{
    21f0:	b500      	push	{lr}
    21f2:	b083      	sub	sp, #12
    /* Send command and wait for tres1 */
    uint8_t exit_power_down[] = {0xAB};
    21f4:	a901      	add	r1, sp, #4
    21f6:	23ab      	movs	r3, #171	; 0xab
    21f8:	700b      	strb	r3, [r1, #0]
    dataflash_send_command(descriptor_pt, exit_power_down, sizeof(exit_power_down));    
    21fa:	2201      	movs	r2, #1
    21fc:	4b05      	ldr	r3, [pc, #20]	; (2214 <dataflash_exit_power_down+0x24>)
    21fe:	4798      	blx	r3
    DELAYUS(3);
    2200:	2312      	movs	r3, #18
    2202:	9300      	str	r3, [sp, #0]
    2204:	9b00      	ldr	r3, [sp, #0]
    2206:	1e5a      	subs	r2, r3, #1
    2208:	9200      	str	r2, [sp, #0]
    220a:	2b00      	cmp	r3, #0
    220c:	d1fa      	bne.n	2204 <dataflash_exit_power_down+0x14>
}
    220e:	b003      	add	sp, #12
    2210:	bd00      	pop	{pc}
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	000021ad 	.word	0x000021ad

00002218 <dataflash_check_presence>:
{
    2218:	b530      	push	{r4, r5, lr}
    221a:	b083      	sub	sp, #12
    221c:	0005      	movs	r5, r0
    dataflash_exit_power_down(descriptor_pt);    
    221e:	4b11      	ldr	r3, [pc, #68]	; (2264 <dataflash_check_presence+0x4c>)
    2220:	4798      	blx	r3
    uint8_t jedec_query_command[] = {0x9F, 0x00, 0x00, 0x00};
    2222:	ac01      	add	r4, sp, #4
    2224:	239f      	movs	r3, #159	; 0x9f
    2226:	7023      	strb	r3, [r4, #0]
    2228:	2300      	movs	r3, #0
    222a:	7063      	strb	r3, [r4, #1]
    222c:	70a3      	strb	r3, [r4, #2]
    222e:	70e3      	strb	r3, [r4, #3]
    dataflash_send_command(descriptor_pt, jedec_query_command, sizeof(jedec_query_command));
    2230:	2204      	movs	r2, #4
    2232:	0021      	movs	r1, r4
    2234:	0028      	movs	r0, r5
    2236:	4b0c      	ldr	r3, [pc, #48]	; (2268 <dataflash_check_presence+0x50>)
    2238:	4798      	blx	r3
    if((jedec_query_command[1] != 0xEF) || (jedec_query_command[2] != 0x40) || (jedec_query_command[3] != 0x15))
    223a:	7863      	ldrb	r3, [r4, #1]
    223c:	2bef      	cmp	r3, #239	; 0xef
    223e:	d10b      	bne.n	2258 <dataflash_check_presence+0x40>
    2240:	ab01      	add	r3, sp, #4
    2242:	789b      	ldrb	r3, [r3, #2]
    2244:	2b40      	cmp	r3, #64	; 0x40
    2246:	d10a      	bne.n	225e <dataflash_check_presence+0x46>
    2248:	ab01      	add	r3, sp, #4
    224a:	78d8      	ldrb	r0, [r3, #3]
    224c:	3815      	subs	r0, #21
    224e:	1e43      	subs	r3, r0, #1
    2250:	4198      	sbcs	r0, r3
    2252:	4240      	negs	r0, r0
}
    2254:	b003      	add	sp, #12
    2256:	bd30      	pop	{r4, r5, pc}
        return RETURN_NOK;
    2258:	2001      	movs	r0, #1
    225a:	4240      	negs	r0, r0
    225c:	e7fa      	b.n	2254 <dataflash_check_presence+0x3c>
    225e:	2001      	movs	r0, #1
    2260:	4240      	negs	r0, r0
    2262:	e7f7      	b.n	2254 <dataflash_check_presence+0x3c>
    2264:	000021f1 	.word	0x000021f1
    2268:	000021ad 	.word	0x000021ad

0000226c <logic_device_set_wakeup_reason>:
*   \brief  Set device wakeup reason
*   \param  reason  wakeup reason
*/
void logic_device_set_wakeup_reason(platform_wakeup_reason_te reason)
{
    if (logic_device_wakeup_reason == WAKEUP_REASON_NONE)
    226c:	4b03      	ldr	r3, [pc, #12]	; (227c <logic_device_set_wakeup_reason+0x10>)
    226e:	781b      	ldrb	r3, [r3, #0]
    2270:	2b00      	cmp	r3, #0
    2272:	d101      	bne.n	2278 <logic_device_set_wakeup_reason+0xc>
    {
        logic_device_wakeup_reason = reason;
    2274:	4b01      	ldr	r3, [pc, #4]	; (227c <logic_device_set_wakeup_reason+0x10>)
    2276:	7018      	strb	r0, [r3, #0]
    }
}
    2278:	4770      	bx	lr
    227a:	46c0      	nop			; (mov r8, r8)
    227c:	2000000c 	.word	0x2000000c

00002280 <EIC_Handler>:

/*! \fn     EIC_Handler(void)
*   \brief  Routine called for an extint
*/
void EIC_Handler(void)
{
    2280:	b510      	push	{r4, lr}
    /* Identify wakeup reason */
    if ((EIC->INTFLAG.reg & (1 << AUX_MCU_NO_COMMS_EXTINT_NUM)) != 0)
    2282:	4b18      	ldr	r3, [pc, #96]	; (22e4 <EIC_Handler+0x64>)
    2284:	691b      	ldr	r3, [r3, #16]
    2286:	055b      	lsls	r3, r3, #21
    2288:	d528      	bpl.n	22dc <EIC_Handler+0x5c>
    {
        logic_device_set_wakeup_reason(WAKEUP_REASON_AUX_MCU);
    228a:	2001      	movs	r0, #1
    228c:	4b16      	ldr	r3, [pc, #88]	; (22e8 <EIC_Handler+0x68>)
    228e:	4798      	blx	r3
    {
        logic_device_set_wakeup_reason(WAKEUP_REASON_OTHER);
    }
    
    /* All the interrupts below are used to wake up the platform from sleep. If we detect any of them, we disable all of them */
    if (((EIC->INTFLAG.reg & (1 << WHEEL_TICKB_EXTINT_NUM)) != 0) || ((EIC->INTFLAG.reg & (1 << WHEEL_CLICK_EXTINT_NUM)) != 0) || ((EIC->INTFLAG.reg & (1 << USB_3V3_EXTINT_NUM)) != 0) || ((EIC->INTFLAG.reg & (1 << AUX_MCU_NO_COMMS_EXTINT_NUM)) != 0) || ((EIC->INTFLAG.reg & (1 << SMC_DET_EXTINT_NUM)) != 0))
    2290:	4b14      	ldr	r3, [pc, #80]	; (22e4 <EIC_Handler+0x64>)
    2292:	691b      	ldr	r3, [r3, #16]
    2294:	075b      	lsls	r3, r3, #29
    2296:	d40f      	bmi.n	22b8 <EIC_Handler+0x38>
    2298:	4b12      	ldr	r3, [pc, #72]	; (22e4 <EIC_Handler+0x64>)
    229a:	691b      	ldr	r3, [r3, #16]
    229c:	05db      	lsls	r3, r3, #23
    229e:	d40b      	bmi.n	22b8 <EIC_Handler+0x38>
    22a0:	4b10      	ldr	r3, [pc, #64]	; (22e4 <EIC_Handler+0x64>)
    22a2:	691b      	ldr	r3, [r3, #16]
    22a4:	079b      	lsls	r3, r3, #30
    22a6:	d407      	bmi.n	22b8 <EIC_Handler+0x38>
    22a8:	4b0e      	ldr	r3, [pc, #56]	; (22e4 <EIC_Handler+0x64>)
    22aa:	691b      	ldr	r3, [r3, #16]
    22ac:	055b      	lsls	r3, r3, #21
    22ae:	d403      	bmi.n	22b8 <EIC_Handler+0x38>
    22b0:	4b0c      	ldr	r3, [pc, #48]	; (22e4 <EIC_Handler+0x64>)
    22b2:	691b      	ldr	r3, [r3, #16]
    22b4:	071b      	lsls	r3, r3, #28
    22b6:	d510      	bpl.n	22da <EIC_Handler+0x5a>
    {
        EIC->INTFLAG.reg = (1 << WHEEL_TICKB_EXTINT_NUM);
    22b8:	4b0a      	ldr	r3, [pc, #40]	; (22e4 <EIC_Handler+0x64>)
    22ba:	2204      	movs	r2, #4
    22bc:	611a      	str	r2, [r3, #16]
        EIC->INTENCLR.reg = (1 << WHEEL_TICKB_EXTINT_NUM);
    22be:	609a      	str	r2, [r3, #8]
        EIC->INTFLAG.reg = (1 << WHEEL_CLICK_EXTINT_NUM);
    22c0:	32fc      	adds	r2, #252	; 0xfc
    22c2:	611a      	str	r2, [r3, #16]
        EIC->INTENCLR.reg = (1 << WHEEL_CLICK_EXTINT_NUM);
    22c4:	609a      	str	r2, [r3, #8]
        EIC->INTFLAG.reg = (1 << USB_3V3_EXTINT_NUM);
    22c6:	3afe      	subs	r2, #254	; 0xfe
    22c8:	611a      	str	r2, [r3, #16]
        EIC->INTENCLR.reg = (1 << USB_3V3_EXTINT_NUM);
    22ca:	609a      	str	r2, [r3, #8]
        EIC->INTFLAG.reg = (1 << AUX_MCU_NO_COMMS_EXTINT_NUM);
    22cc:	2280      	movs	r2, #128	; 0x80
    22ce:	00d2      	lsls	r2, r2, #3
    22d0:	611a      	str	r2, [r3, #16]
        EIC->INTENCLR.reg = (1 << AUX_MCU_NO_COMMS_EXTINT_NUM);
    22d2:	609a      	str	r2, [r3, #8]
        EIC->INTFLAG.reg = (1 << SMC_DET_EXTINT_NUM);
    22d4:	2208      	movs	r2, #8
    22d6:	611a      	str	r2, [r3, #16]
        EIC->INTENCLR.reg = (1 << SMC_DET_EXTINT_NUM);
    22d8:	609a      	str	r2, [r3, #8]
    }
}
    22da:	bd10      	pop	{r4, pc}
        logic_device_set_wakeup_reason(WAKEUP_REASON_OTHER);
    22dc:	2003      	movs	r0, #3
    22de:	4b02      	ldr	r3, [pc, #8]	; (22e8 <EIC_Handler+0x68>)
    22e0:	4798      	blx	r3
    22e2:	e7d5      	b.n	2290 <EIC_Handler+0x10>
    22e4:	40001800 	.word	0x40001800
    22e8:	0000226d 	.word	0x0000226d

000022ec <platform_io_enable_switch>:
/*! \fn     platform_io_enable_switch(void)
*   \brief  Enable switch (and 3v3 stepup)
*/
void platform_io_enable_switch(void)
{
    PORT->Group[SWDET_EN_GROUP].DIRSET.reg = SWDET_EN_MASK;
    22ec:	4b02      	ldr	r3, [pc, #8]	; (22f8 <platform_io_enable_switch+0xc>)
    22ee:	2280      	movs	r2, #128	; 0x80
    22f0:	0212      	lsls	r2, r2, #8
    22f2:	609a      	str	r2, [r3, #8]
    PORT->Group[SWDET_EN_GROUP].OUTSET.reg = SWDET_EN_MASK;
    22f4:	619a      	str	r2, [r3, #24]
}
    22f6:	4770      	bx	lr
    22f8:	41004400 	.word	0x41004400

000022fc <platform_io_disable_switch_and_die>:

/*! \fn     platform_io_disable_switch_and_die(void)
*   \brief  Disable switch and 3v3 (die)
*/
void platform_io_disable_switch_and_die(void)
{
    22fc:	b082      	sub	sp, #8
    /* Charge capacitor: pull down for slow ramp down */
    PORT->Group[WHEEL_SW_GROUP].OUTCLR.reg = WHEEL_SW_MASK;
    22fe:	2280      	movs	r2, #128	; 0x80
    2300:	0552      	lsls	r2, r2, #21
    2302:	4b0d      	ldr	r3, [pc, #52]	; (2338 <platform_io_disable_switch_and_die+0x3c>)
    2304:	615a      	str	r2, [r3, #20]
    DELAYMS_8M(10);
    2306:	4b0d      	ldr	r3, [pc, #52]	; (233c <platform_io_disable_switch_and_die+0x40>)
    2308:	9300      	str	r3, [sp, #0]
    230a:	9b00      	ldr	r3, [sp, #0]
    230c:	1e5a      	subs	r2, r3, #1
    230e:	9200      	str	r2, [sp, #0]
    2310:	2b00      	cmp	r3, #0
    2312:	d1fa      	bne.n	230a <platform_io_disable_switch_and_die+0xe>
    
    /* Charge capacitor: strong pull to ground */
    PORT->Group[WHEEL_SW_GROUP].DIRSET.reg = WHEEL_SW_MASK;
    2314:	2280      	movs	r2, #128	; 0x80
    2316:	0552      	lsls	r2, r2, #21
    2318:	4b07      	ldr	r3, [pc, #28]	; (2338 <platform_io_disable_switch_and_die+0x3c>)
    231a:	609a      	str	r2, [r3, #8]
    DELAYMS_8M(10);
    231c:	4b07      	ldr	r3, [pc, #28]	; (233c <platform_io_disable_switch_and_die+0x40>)
    231e:	9301      	str	r3, [sp, #4]
    2320:	9b01      	ldr	r3, [sp, #4]
    2322:	1e5a      	subs	r2, r3, #1
    2324:	9201      	str	r2, [sp, #4]
    2326:	2b00      	cmp	r3, #0
    2328:	d1fa      	bne.n	2320 <platform_io_disable_switch_and_die+0x24>
    
    /* Disable 3V3 stepup */
    PORT->Group[SWDET_EN_GROUP].OUTCLR.reg = SWDET_EN_MASK;
    232a:	2280      	movs	r2, #128	; 0x80
    232c:	0212      	lsls	r2, r2, #8
    232e:	4b02      	ldr	r3, [pc, #8]	; (2338 <platform_io_disable_switch_and_die+0x3c>)
    2330:	615a      	str	r2, [r3, #20]
}
    2332:	b002      	add	sp, #8
    2334:	4770      	bx	lr
    2336:	46c0      	nop			; (mov r8, r8)
    2338:	41004400 	.word	0x41004400
    233c:	00002710 	.word	0x00002710

00002340 <ADC_Handler>:
*   \brief  Called once a conversion result is ready
*/
void ADC_Handler(void)
{
    /* Set conv ready bool and clear interrupt */
    platform_io_voledin_conv_ready = TRUE;
    2340:	2301      	movs	r3, #1
    2342:	4a02      	ldr	r2, [pc, #8]	; (234c <ADC_Handler+0xc>)
    2344:	6013      	str	r3, [r2, #0]
    ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    2346:	4a02      	ldr	r2, [pc, #8]	; (2350 <ADC_Handler+0x10>)
    2348:	7613      	strb	r3, [r2, #24]
}
    234a:	4770      	bx	lr
    234c:	2000007c 	.word	0x2000007c
    2350:	42004000 	.word	0x42004000

00002354 <platform_io_init_flash_ports>:

/*! \fn     platform_io_init_flash_ports(void)
*   \brief  Initialize the platform flash IO ports
*/
void platform_io_init_flash_ports(void)
{    
    2354:	b5f0      	push	{r4, r5, r6, r7, lr}
    2356:	46de      	mov	lr, fp
    2358:	4657      	mov	r7, sl
    235a:	464e      	mov	r6, r9
    235c:	4645      	mov	r5, r8
    235e:	b5e0      	push	{r5, r6, r7, lr}
    2360:	b085      	sub	sp, #20
    /* DATAFLASH */
    PORT->Group[DATAFLASH_nCS_GROUP].DIRSET.reg = DATAFLASH_nCS_MASK;                                                       // DATAFLASH nCS, OUTPUT high by default
    2362:	4c4a      	ldr	r4, [pc, #296]	; (248c <platform_io_init_flash_ports+0x138>)
    2364:	2380      	movs	r3, #128	; 0x80
    2366:	041b      	lsls	r3, r3, #16
    2368:	60a3      	str	r3, [r4, #8]
    PORT->Group[DATAFLASH_nCS_GROUP].OUTSET.reg = DATAFLASH_nCS_MASK;                                                       // DATAFLASH nCS, OUTPUT high by default
    236a:	61a3      	str	r3, [r4, #24]
    PORT->Group[DATAFLASH_SCK_GROUP].DIRSET.reg = DATAFLASH_SCK_MASK;                                                       // DATAFLASH SCK, OUTPUT
    236c:	2380      	movs	r3, #128	; 0x80
    236e:	039b      	lsls	r3, r3, #14
    2370:	60a3      	str	r3, [r4, #8]
    PORT->Group[DATAFLASH_SCK_GROUP].PINCFG[DATAFLASH_SCK_PINID].bit.PMUXEN = 1;                                            // Enable peripheral multiplexer
    2372:	2255      	movs	r2, #85	; 0x55
    2374:	5ca3      	ldrb	r3, [r4, r2]
    2376:	2101      	movs	r1, #1
    2378:	4688      	mov	r8, r1
    237a:	2601      	movs	r6, #1
    237c:	4333      	orrs	r3, r6
    237e:	54a3      	strb	r3, [r4, r2]
    PORT->Group[DATAFLASH_SCK_GROUP].PMUX[DATAFLASH_SCK_PINID/2].bit.DATAFLASH_SCK_PMUXREGID = DATAFLASH_SCK_PMUX_ID;       // DATAFLASH SCK, OUTPUT
    2380:	3a1b      	subs	r2, #27
    2382:	5ca3      	ldrb	r3, [r4, r2]
    2384:	310e      	adds	r1, #14
    2386:	4689      	mov	r9, r1
    2388:	400b      	ands	r3, r1
    238a:	2130      	movs	r1, #48	; 0x30
    238c:	430b      	orrs	r3, r1
    238e:	54a3      	strb	r3, [r4, r2]
    PORT->Group[DATAFLASH_MOSI_GROUP].DIRSET.reg = DATAFLASH_MOSI_MASK;                                                     // DATAFLASH MOSI, OUTPUT
    2390:	2380      	movs	r3, #128	; 0x80
    2392:	035b      	lsls	r3, r3, #13
    2394:	60a3      	str	r3, [r4, #8]
    PORT->Group[DATAFLASH_MOSI_GROUP].PINCFG[DATAFLASH_MOSI_PINID].bit.PMUXEN = 1;                                          // Enable peripheral multiplexer
    2396:	2154      	movs	r1, #84	; 0x54
    2398:	5c63      	ldrb	r3, [r4, r1]
    239a:	4333      	orrs	r3, r6
    239c:	5463      	strb	r3, [r4, r1]
    PORT->Group[DATAFLASH_MOSI_GROUP].PMUX[DATAFLASH_MOSI_PINID/2].bit.DATAFLASH_MOSI_PMUXREGID = DATAFLASH_MOSI_PMUX_ID;   // DATAFLASH MOSI, OUTPUT
    239e:	5ca3      	ldrb	r3, [r4, r2]
    23a0:	4649      	mov	r1, r9
    23a2:	438b      	bics	r3, r1
    23a4:	2103      	movs	r1, #3
    23a6:	430b      	orrs	r3, r1
    23a8:	54a3      	strb	r3, [r4, r2]
    PORT->Group[DATAFLASH_MISO_GROUP].DIRCLR.reg = DATAFLASH_MISO_MASK;                                                     // DATAFLASH MISO, INPUT with pull-down
    23aa:	2380      	movs	r3, #128	; 0x80
    23ac:	03db      	lsls	r3, r3, #15
    23ae:	6063      	str	r3, [r4, #4]
    PORT->Group[DATAFLASH_MISO_GROUP].OUTCLR.reg = DATAFLASH_MISO_MASK;                                                     // DATAFLASH MISO, INPUT with pull-down
    23b0:	6163      	str	r3, [r4, #20]
    PORT->Group[DATAFLASH_MISO_GROUP].PINCFG[DATAFLASH_MISO_PINID].bit.PULLEN = 1;                                          // DATAFLASH MISO, INPUT with pull-down
    23b2:	2356      	movs	r3, #86	; 0x56
    23b4:	5ce2      	ldrb	r2, [r4, r3]
    23b6:	2104      	movs	r1, #4
    23b8:	430a      	orrs	r2, r1
    23ba:	54e2      	strb	r2, [r4, r3]
    PORT->Group[DATAFLASH_MISO_GROUP].PINCFG[DATAFLASH_MISO_PINID].bit.PMUXEN = 1;                                          // Enable peripheral multiplexer
    23bc:	5ce2      	ldrb	r2, [r4, r3]
    23be:	4332      	orrs	r2, r6
    23c0:	54e2      	strb	r2, [r4, r3]
    PORT->Group[DATAFLASH_MISO_GROUP].PMUX[DATAFLASH_MISO_PINID/2].bit.DATAFLASH_MISO_PMUXREGID = DATAFLASH_MISO_PMUX_ID;   // DATAFLASH MOSI, OUTPUT 
    23c2:	223b      	movs	r2, #59	; 0x3b
    23c4:	5ca3      	ldrb	r3, [r4, r2]
    23c6:	4649      	mov	r1, r9
    23c8:	438b      	bics	r3, r1
    23ca:	390d      	subs	r1, #13
    23cc:	430b      	orrs	r3, r1
    23ce:	54a3      	strb	r3, [r4, r2]
    PM->APBCMASK.bit.DATAFLASH_APB_SERCOM_BIT = 1;                                                                          // APB Clock Enable
    23d0:	4f2f      	ldr	r7, [pc, #188]	; (2490 <platform_io_init_flash_ports+0x13c>)
    23d2:	6a3b      	ldr	r3, [r7, #32]
    23d4:	3a1b      	subs	r2, #27
    23d6:	4313      	orrs	r3, r2
    23d8:	623b      	str	r3, [r7, #32]
    clocks_map_gclk_to_peripheral_clock(GCLK_ID_48M, DATAFLASH_GCLK_SERCOM_ID);                                             // Map 48MHz to SERCOM unit
    23da:	3115      	adds	r1, #21
    23dc:	2000      	movs	r0, #0
    23de:	4b2d      	ldr	r3, [pc, #180]	; (2494 <platform_io_init_flash_ports+0x140>)
    23e0:	469b      	mov	fp, r3
    23e2:	4798      	blx	r3
    sercom_spi_init(DATAFLASH_SERCOM, DATAFLASH_BAUD_DIVIDER, SPI_MODE0, SPI_HSS_DISABLE, DATAFLASH_MISO_PAD, DATAFLASH_MOSI_SCK_PADS, TRUE);    
    23e4:	4643      	mov	r3, r8
    23e6:	9302      	str	r3, [sp, #8]
    23e8:	9301      	str	r3, [sp, #4]
    23ea:	2300      	movs	r3, #0
    23ec:	9300      	str	r3, [sp, #0]
    23ee:	2200      	movs	r2, #0
    23f0:	2101      	movs	r1, #1
    23f2:	4829      	ldr	r0, [pc, #164]	; (2498 <platform_io_init_flash_ports+0x144>)
    23f4:	4d29      	ldr	r5, [pc, #164]	; (249c <platform_io_init_flash_ports+0x148>)
    23f6:	46aa      	mov	sl, r5
    23f8:	47a8      	blx	r5

    /* DBFLASH */
    PORT->Group[DBFLASH_nCS_GROUP].DIRSET.reg = DBFLASH_nCS_MASK;                                                           // DBFLASH nCS, OUTPUT high by default
    23fa:	2380      	movs	r3, #128	; 0x80
    23fc:	025b      	lsls	r3, r3, #9
    23fe:	60a3      	str	r3, [r4, #8]
    PORT->Group[DBFLASH_nCS_GROUP].OUTSET.reg = DBFLASH_nCS_MASK;                                                           // DBFLASH nCS, OUTPUT high by default
    2400:	61a3      	str	r3, [r4, #24]
    PORT->Group[DBFLASH_SCK_GROUP].DIRSET.reg = DBFLASH_SCK_MASK;                                                           // DBFLASH SCK, OUTPUT
    2402:	2380      	movs	r3, #128	; 0x80
    2404:	029b      	lsls	r3, r3, #10
    2406:	60a3      	str	r3, [r4, #8]
    PORT->Group[DBFLASH_SCK_GROUP].PINCFG[DBFLASH_SCK_PINID].bit.PMUXEN = 1;                                                // Enable peripheral multiplexer
    2408:	2251      	movs	r2, #81	; 0x51
    240a:	5ca3      	ldrb	r3, [r4, r2]
    240c:	4333      	orrs	r3, r6
    240e:	54a3      	strb	r3, [r4, r2]
    PORT->Group[DBFLASH_SCK_GROUP].PMUX[DBFLASH_SCK_PINID/2].bit.DBFLASH_SCK_PMUXREGID = DBFLASH_SCK_PMUX_ID;               // DBFLASH SCK, OUTPUT
    2410:	3a19      	subs	r2, #25
    2412:	5ca3      	ldrb	r3, [r4, r2]
    2414:	210f      	movs	r1, #15
    2416:	400b      	ands	r3, r1
    2418:	2120      	movs	r1, #32
    241a:	430b      	orrs	r3, r1
    241c:	54a3      	strb	r3, [r4, r2]
    PORT->Group[DBFLASH_MOSI_GROUP].DIRSET.reg = DBFLASH_MOSI_MASK;                                                         // DBFLASH MOSI, OUTPUT
    241e:	2380      	movs	r3, #128	; 0x80
    2420:	031b      	lsls	r3, r3, #12
    2422:	60a3      	str	r3, [r4, #8]
    PORT->Group[DBFLASH_MOSI_GROUP].PINCFG[DBFLASH_MOSI_PINID].bit.PMUXEN = 1;                                              // Enable peripheral multiplexer
    2424:	321b      	adds	r2, #27
    2426:	5ca3      	ldrb	r3, [r4, r2]
    2428:	4333      	orrs	r3, r6
    242a:	54a3      	strb	r3, [r4, r2]
    PORT->Group[DBFLASH_MOSI_GROUP].PMUX[DBFLASH_MOSI_PINID/2].bit.DBFLASH_MOSI_PMUXREGID = DBFLASH_MOSI_PMUX_ID;           // DBFLASH MOSI, OUTPUT
    242c:	3a1a      	subs	r2, #26
    242e:	5ca3      	ldrb	r3, [r4, r2]
    2430:	250f      	movs	r5, #15
    2432:	401d      	ands	r5, r3
    2434:	430d      	orrs	r5, r1
    2436:	54a5      	strb	r5, [r4, r2]
    PORT->Group[DBFLASH_MISO_GROUP].DIRCLR.reg = DBFLASH_MISO_MASK;                                                         // DBFLASH MISO, INPUT
    2438:	2380      	movs	r3, #128	; 0x80
    243a:	02db      	lsls	r3, r3, #11
    243c:	6063      	str	r3, [r4, #4]
    PORT->Group[DBFLASH_MISO_GROUP].OUTCLR.reg = DBFLASH_MISO_MASK;                                                         // DBFLASH MISO, INPUT with pull-down
    243e:	6163      	str	r3, [r4, #20]
    PORT->Group[DBFLASH_MISO_GROUP].PINCFG[DBFLASH_MISO_PINID].bit.PULLEN = 1;                                              // DBFLASH MISO, INPUT with pull-down
    2440:	2352      	movs	r3, #82	; 0x52
    2442:	5ce1      	ldrb	r1, [r4, r3]
    2444:	2004      	movs	r0, #4
    2446:	4301      	orrs	r1, r0
    2448:	54e1      	strb	r1, [r4, r3]
    PORT->Group[DBFLASH_MISO_GROUP].PINCFG[DBFLASH_MISO_PINID].bit.PMUXEN = 1;                                              // Enable peripheral multiplexer
    244a:	5ce1      	ldrb	r1, [r4, r3]
    244c:	430e      	orrs	r6, r1
    244e:	54e6      	strb	r6, [r4, r3]
    PORT->Group[DBFLASH_MISO_GROUP].PMUX[DBFLASH_MISO_PINID/2].bit.DBFLASH_MISO_PMUXREGID = DBFLASH_MISO_PMUX_ID;           // DBFLASH MOSI, OUTPUT
    2450:	5ca3      	ldrb	r3, [r4, r2]
    2452:	4649      	mov	r1, r9
    2454:	438b      	bics	r3, r1
    2456:	390d      	subs	r1, #13
    2458:	430b      	orrs	r3, r1
    245a:	54a3      	strb	r3, [r4, r2]
    PM->APBCMASK.bit.DBFLASH_APB_SERCOM_BIT = 1;                                                                            // APB Clock Enable
    245c:	6a3b      	ldr	r3, [r7, #32]
    245e:	3a31      	subs	r2, #49	; 0x31
    2460:	4313      	orrs	r3, r2
    2462:	623b      	str	r3, [r7, #32]
    clocks_map_gclk_to_peripheral_clock(GCLK_ID_48M, DBFLASH_GCLK_SERCOM_ID);                                               // Map 48MHz to SERCOM unit
    2464:	3113      	adds	r1, #19
    2466:	2000      	movs	r0, #0
    2468:	47d8      	blx	fp
    sercom_spi_init(DBFLASH_SERCOM, DBFLASH_BAUD_DIVIDER, SPI_MODE0, SPI_HSS_DISABLE, DBFLASH_MISO_PAD, DBFLASH_MOSI_SCK_PADS, TRUE);
    246a:	4643      	mov	r3, r8
    246c:	9302      	str	r3, [sp, #8]
    246e:	3301      	adds	r3, #1
    2470:	9301      	str	r3, [sp, #4]
    2472:	9300      	str	r3, [sp, #0]
    2474:	2300      	movs	r3, #0
    2476:	2200      	movs	r2, #0
    2478:	2101      	movs	r1, #1
    247a:	4809      	ldr	r0, [pc, #36]	; (24a0 <platform_io_init_flash_ports+0x14c>)
    247c:	47d0      	blx	sl
}
    247e:	b005      	add	sp, #20
    2480:	bc3c      	pop	{r2, r3, r4, r5}
    2482:	4690      	mov	r8, r2
    2484:	4699      	mov	r9, r3
    2486:	46a2      	mov	sl, r4
    2488:	46ab      	mov	fp, r5
    248a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    248c:	41004400 	.word	0x41004400
    2490:	40000400 	.word	0x40000400
    2494:	000018a5 	.word	0x000018a5
    2498:	42001400 	.word	0x42001400
    249c:	000025ed 	.word	0x000025ed
    24a0:	42000c00 	.word	0x42000c00

000024a4 <platform_io_disable_rx_usart_rx_interrupt>:
*   \brief  Disable USART RX interrupt, used to assert no comms
*/
void platform_io_disable_rx_usart_rx_interrupt(void)
{    
    /* Disable RX interrupt */
    AUXMCU_SERCOM->USART.INTENCLR.bit.RXC = 1;
    24a4:	4a05      	ldr	r2, [pc, #20]	; (24bc <platform_io_disable_rx_usart_rx_interrupt+0x18>)
    24a6:	7d13      	ldrb	r3, [r2, #20]
    24a8:	2104      	movs	r1, #4
    24aa:	430b      	orrs	r3, r1
    24ac:	7513      	strb	r3, [r2, #20]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    24ae:	2180      	movs	r1, #128	; 0x80
    24b0:	01c9      	lsls	r1, r1, #7
    24b2:	2380      	movs	r3, #128	; 0x80
    24b4:	4a02      	ldr	r2, [pc, #8]	; (24c0 <platform_io_disable_rx_usart_rx_interrupt+0x1c>)
    24b6:	50d1      	str	r1, [r2, r3]
    
    /* Enable interrupt line that may be enabled later */
    NVIC_DisableIRQ(AUXMCU_SERCOM_INTERUPT);
}
    24b8:	4770      	bx	lr
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	42001c00 	.word	0x42001c00
    24c0:	e000e100 	.word	0xe000e100

000024c4 <SERCOM5_Handler>:
{
    24c4:	b510      	push	{r4, lr}
        PORT->Group[AUX_MCU_NOCOMMS_GROUP].DIRCLR.reg = AUX_MCU_NOCOMMS_MASK;               // NO COMMS as an input as it'll be pulled-up by aux MCU
    24c6:	2280      	movs	r2, #128	; 0x80
    24c8:	05d2      	lsls	r2, r2, #23
    24ca:	4b02      	ldr	r3, [pc, #8]	; (24d4 <SERCOM5_Handler+0x10>)
    24cc:	605a      	str	r2, [r3, #4]
    platform_io_disable_rx_usart_rx_interrupt();
    24ce:	4b02      	ldr	r3, [pc, #8]	; (24d8 <SERCOM5_Handler+0x14>)
    24d0:	4798      	blx	r3
}
    24d2:	bd10      	pop	{r4, pc}
    24d4:	41004400 	.word	0x41004400
    24d8:	000024a5 	.word	0x000024a5

000024dc <platform_io_init_no_comms_signal>:
*/
void platform_io_init_no_comms_signal(void)
{    
    /* Platform v3 */
    #if defined(PLAT_V3_SETUP) || defined(PLAT_V4_SETUP) || defined(PLAT_V5_SETUP) || defined(PLAT_V6_SETUP) || defined(PLAT_V7_SETUP)
        PORT->Group[AUX_MCU_NOCOMMS_GROUP].PINCFG[AUX_MCU_NOCOMMS_PINID].bit.PMUXEN = 0;    // Setup NO COMMS, enabled by default (pulled-up by aux mcu)
    24dc:	4b07      	ldr	r3, [pc, #28]	; (24fc <platform_io_init_no_comms_signal+0x20>)
    24de:	225e      	movs	r2, #94	; 0x5e
    24e0:	5c99      	ldrb	r1, [r3, r2]
    24e2:	2001      	movs	r0, #1
    24e4:	4381      	bics	r1, r0
    24e6:	5499      	strb	r1, [r3, r2]
        PORT->Group[AUX_MCU_NOCOMMS_GROUP].PINCFG[AUX_MCU_NOCOMMS_PINID].bit.INEN = 1;      // Setup NO COMMS, enabled by default (pulled-up by aux mcu)
    24e8:	5c99      	ldrb	r1, [r3, r2]
    24ea:	2002      	movs	r0, #2
    24ec:	4301      	orrs	r1, r0
    24ee:	5499      	strb	r1, [r3, r2]
        PORT->Group[AUX_MCU_NOCOMMS_GROUP].DIRCLR.reg = AUX_MCU_NOCOMMS_MASK;               // Setup NO COMMS, enabled by default (pulled-up by aux mcu)
    24f0:	2280      	movs	r2, #128	; 0x80
    24f2:	05d2      	lsls	r2, r2, #23
    24f4:	605a      	str	r2, [r3, #4]
        PORT->Group[AUX_MCU_NOCOMMS_GROUP].OUTCLR.reg = AUX_MCU_NOCOMMS_MASK;               // We enable no comms by simply changing the DIR register...
    24f6:	615a      	str	r2, [r3, #20]
    #endif    
}
    24f8:	4770      	bx	lr
    24fa:	46c0      	nop			; (mov r8, r8)
    24fc:	41004400 	.word	0x41004400

00002500 <fuses_check_program>:
*   \brief  Check for correct fuse settings (and flash)
*   \param  flash_fuses Set to TRUE to allow fuse programming
*   \return If the check / flash was correctly performed
*/
RET_TYPE fuses_check_program(BOOL flash_fuses)
{
    2500:	b530      	push	{r4, r5, lr}
    /* Get current words */
    uint32_t userWord0 = *((uint32_t *)NVMCTRL_AUX0_ADDRESS);
    2502:	4b2d      	ldr	r3, [pc, #180]	; (25b8 <fuses_check_program+0xb8>)
    2504:	681a      	ldr	r2, [r3, #0]
    uint32_t userWord1 = *(((uint32_t *)NVMCTRL_AUX0_ADDRESS) + 1);
    2506:	4b2d      	ldr	r3, [pc, #180]	; (25bc <fuses_check_program+0xbc>)
    2508:	681c      	ldr	r4, [r3, #0]
    
    /* Check current words and security bit */
    #ifdef NO_SECURITY_BIT_CHECK
    if (((userWord0 & ~USER_MASK_0) == USER_WORD_0) && ((userWord1 & ~USER_MASK_1) == USER_WORD_1))
    250a:	4b2d      	ldr	r3, [pc, #180]	; (25c0 <fuses_check_program+0xc0>)
    250c:	4013      	ands	r3, r2
    250e:	492d      	ldr	r1, [pc, #180]	; (25c4 <fuses_check_program+0xc4>)
    2510:	428b      	cmp	r3, r1
    2512:	d008      	beq.n	2526 <fuses_check_program+0x26>
        /* Conf words & security bit ok */
        return RETURN_OK;
    }
    
    /* Incorrect words, check if we are allowed to flash them */
    if (flash_fuses == FALSE)
    2514:	2800      	cmp	r0, #0
    2516:	d04c      	beq.n	25b2 <fuses_check_program+0xb2>
    {
        return RETURN_NOK;
    }
    
    /* We are allowed to program, check for security bit */
    if (NVMCTRL->STATUS.reg & NVMCTRL_STATUS_SB)
    2518:	4b2b      	ldr	r3, [pc, #172]	; (25c8 <fuses_check_program+0xc8>)
    251a:	8b1b      	ldrh	r3, [r3, #24]
    {
        return RETURN_NOK;
    251c:	2001      	movs	r0, #1
    251e:	4240      	negs	r0, r0
    if (NVMCTRL->STATUS.reg & NVMCTRL_STATUS_SB)
    2520:	05db      	lsls	r3, r3, #23
    2522:	d507      	bpl.n	2534 <fuses_check_program+0x34>
    NVIC_SystemReset();
    while(1);
    
    /* To avoid warnings */
    return RETURN_NOK;
}
    2524:	bd30      	pop	{r4, r5, pc}
    if (((userWord0 & ~USER_MASK_0) == USER_WORD_0) && ((userWord1 & ~USER_MASK_1) == USER_WORD_1))
    2526:	4b29      	ldr	r3, [pc, #164]	; (25cc <fuses_check_program+0xcc>)
    2528:	4023      	ands	r3, r4
    252a:	4929      	ldr	r1, [pc, #164]	; (25d0 <fuses_check_program+0xd0>)
    252c:	428b      	cmp	r3, r1
    252e:	d1f1      	bne.n	2514 <fuses_check_program+0x14>
        return RETURN_OK;
    2530:	2000      	movs	r0, #0
    2532:	e7f7      	b.n	2524 <fuses_check_program+0x24>
    uint32_t temp = NVMCTRL->CTRLB.reg;
    2534:	4b24      	ldr	r3, [pc, #144]	; (25c8 <fuses_check_program+0xc8>)
    2536:	6858      	ldr	r0, [r3, #4]
    NVMCTRL->CTRLB.bit.MANW = 0;
    2538:	6859      	ldr	r1, [r3, #4]
    253a:	2580      	movs	r5, #128	; 0x80
    253c:	43a9      	bics	r1, r5
    253e:	6059      	str	r1, [r3, #4]
    NVMCTRL->CTRLB.bit.CACHEDIS = 1;
    2540:	685d      	ldr	r5, [r3, #4]
    2542:	2180      	movs	r1, #128	; 0x80
    2544:	02c9      	lsls	r1, r1, #11
    2546:	4329      	orrs	r1, r5
    2548:	6059      	str	r1, [r3, #4]
    NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    254a:	8b19      	ldrh	r1, [r3, #24]
    254c:	2520      	movs	r5, #32
    254e:	35ff      	adds	r5, #255	; 0xff
    2550:	4329      	orrs	r1, r5
    2552:	8319      	strh	r1, [r3, #24]
    NVMCTRL->ADDR.reg = NVMCTRL_AUX0_ADDRESS / 2;
    2554:	491f      	ldr	r1, [pc, #124]	; (25d4 <fuses_check_program+0xd4>)
    2556:	61d9      	str	r1, [r3, #28]
    NVMCTRL->CTRLA.reg = NVM_COMMAND_ERASE_AUX_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    2558:	491f      	ldr	r1, [pc, #124]	; (25d8 <fuses_check_program+0xd8>)
    255a:	8019      	strh	r1, [r3, #0]
    while (!(NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY));
    255c:	0019      	movs	r1, r3
    255e:	2301      	movs	r3, #1
    2560:	7d0d      	ldrb	r5, [r1, #20]
    2562:	421d      	tst	r5, r3
    2564:	d0fc      	beq.n	2560 <fuses_check_program+0x60>
    NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    2566:	4b18      	ldr	r3, [pc, #96]	; (25c8 <fuses_check_program+0xc8>)
    2568:	8b19      	ldrh	r1, [r3, #24]
    256a:	2520      	movs	r5, #32
    256c:	35ff      	adds	r5, #255	; 0xff
    256e:	4329      	orrs	r1, r5
    2570:	8319      	strh	r1, [r3, #24]
    NVMCTRL->ADDR.reg = NVMCTRL_AUX0_ADDRESS / 2;
    2572:	4918      	ldr	r1, [pc, #96]	; (25d4 <fuses_check_program+0xd4>)
    2574:	61d9      	str	r1, [r3, #28]
    userWord0 &= USER_MASK_0;
    2576:	4919      	ldr	r1, [pc, #100]	; (25dc <fuses_check_program+0xdc>)
    2578:	400a      	ands	r2, r1
    userWord1 &= USER_MASK_1;
    257a:	21fe      	movs	r1, #254	; 0xfe
    257c:	0209      	lsls	r1, r1, #8
    257e:	400c      	ands	r4, r1
    userWord0 |= USER_WORD_0;
    2580:	4910      	ldr	r1, [pc, #64]	; (25c4 <fuses_check_program+0xc4>)
    2582:	430a      	orrs	r2, r1
    *((uint32_t *)NVMCTRL_AUX0_ADDRESS) = userWord0;
    2584:	490c      	ldr	r1, [pc, #48]	; (25b8 <fuses_check_program+0xb8>)
    2586:	600a      	str	r2, [r1, #0]
    userWord1 |= USER_WORD_1;
    2588:	4a11      	ldr	r2, [pc, #68]	; (25d0 <fuses_check_program+0xd0>)
    258a:	4314      	orrs	r4, r2
    *(((uint32_t *)NVMCTRL_AUX0_ADDRESS) + 1) = userWord1;
    258c:	4a0b      	ldr	r2, [pc, #44]	; (25bc <fuses_check_program+0xbc>)
    258e:	6014      	str	r4, [r2, #0]
    NVMCTRL->CTRLA.reg = NVM_COMMAND_WRITE_AUX_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    2590:	4a13      	ldr	r2, [pc, #76]	; (25e0 <fuses_check_program+0xe0>)
    2592:	801a      	strh	r2, [r3, #0]
    while (!(NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY));
    2594:	001a      	movs	r2, r3
    2596:	2301      	movs	r3, #1
    2598:	7d11      	ldrb	r1, [r2, #20]
    259a:	4219      	tst	r1, r3
    259c:	d0fc      	beq.n	2598 <fuses_check_program+0x98>
    NVMCTRL->CTRLB.reg = temp;
    259e:	4b0a      	ldr	r3, [pc, #40]	; (25c8 <fuses_check_program+0xc8>)
    25a0:	6058      	str	r0, [r3, #4]
    25a2:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    25a6:	4a0f      	ldr	r2, [pc, #60]	; (25e4 <fuses_check_program+0xe4>)
    25a8:	4b0f      	ldr	r3, [pc, #60]	; (25e8 <fuses_check_program+0xe8>)
    25aa:	60da      	str	r2, [r3, #12]
    25ac:	f3bf 8f4f 	dsb	sy
    25b0:	e7fe      	b.n	25b0 <fuses_check_program+0xb0>
        return RETURN_NOK;
    25b2:	2001      	movs	r0, #1
    25b4:	4240      	negs	r0, r0
    25b6:	e7b5      	b.n	2524 <fuses_check_program+0x24>
    25b8:	00804000 	.word	0x00804000
    25bc:	00804004 	.word	0x00804004
    25c0:	fe01ff77 	.word	0xfe01ff77
    25c4:	d800a717 	.word	0xd800a717
    25c8:	41004000 	.word	0x41004000
    25cc:	ffff01ff 	.word	0xffff01ff
    25d0:	ffff005a 	.word	0xffff005a
    25d4:	00402000 	.word	0x00402000
    25d8:	ffffa505 	.word	0xffffa505
    25dc:	01fe0088 	.word	0x01fe0088
    25e0:	ffffa506 	.word	0xffffa506
    25e4:	05fa0004 	.word	0x05fa0004
    25e8:	e000ed00 	.word	0xe000ed00

000025ec <sercom_spi_init>:
*   \param  hss             Hardware SS disable/enable (see enum)
*   \param  miso_pad        MISO pad (see enum)
*   \param  mosi_sck_ss_pad MOSI/SCK/PAD (see enum)
*/
void sercom_spi_init(Sercom* sercom_pt, uint32_t sercom_baud_div, spi_mode_te mode, spi_hss_te hss, spi_miso_pad_te miso_pad, spi_mosi_sck_ss_pad_te mosi_sck_ss_pad, BOOL receiver_enabled)
{
    25ec:	b570      	push	{r4, r5, r6, lr}
    25ee:	0016      	movs	r6, r2
    25f0:	aa04      	add	r2, sp, #16
    25f2:	7812      	ldrb	r2, [r2, #0]
    25f4:	ac05      	add	r4, sp, #20
    25f6:	7825      	ldrb	r5, [r4, #0]
    sercom_pt->SPI.BAUD.reg = sercom_baud_div;                              // Write baud divider
    25f8:	b2c9      	uxtb	r1, r1
    25fa:	7301      	strb	r1, [r0, #12]
    
    SERCOM_SPI_CTRLB_Type spi_ctrlb_reg;                                    // SPI CTRLB register
    if (receiver_enabled == FALSE)
    {
        spi_ctrlb_reg.reg = 0;                                              // Disable RX
    25fc:	9906      	ldr	r1, [sp, #24]
    25fe:	1e4c      	subs	r4, r1, #1
    2600:	41a1      	sbcs	r1, r4
    } 
    else
    {
        spi_ctrlb_reg.reg = SERCOM_SPI_CTRLB_RXEN;                          // Enable RX
    }
    spi_ctrlb_reg.bit.MSSEN = hss;                                          // Hardware SS control
    2602:	2401      	movs	r4, #1
    2604:	401c      	ands	r4, r3
    2606:	0364      	lsls	r4, r4, #13
    2608:	044b      	lsls	r3, r1, #17
    spi_ctrlb_reg.bit.CHSIZE = 0;                                           // 8 bits character size
    260a:	4323      	orrs	r3, r4
    while ((sercom_pt->SPI.SYNCBUSY.reg & SERCOM_SPI_SYNCBUSY_CTRLB) != 0); // Wait for sync
    260c:	2404      	movs	r4, #4
    260e:	69c1      	ldr	r1, [r0, #28]
    2610:	420c      	tst	r4, r1
    2612:	d1fc      	bne.n	260e <sercom_spi_init+0x22>
    sercom_pt->SPI.CTRLB = spi_ctrlb_reg;                                   // Write register
    2614:	6043      	str	r3, [r0, #4]
    
    SERCOM_SPI_CTRLA_Type spi_ctrla_reg;                                    // SPI CTRLA register
    spi_ctrla_reg.reg = SERCOM_SPI_CTRLA_ENABLE;                            // Enable SPI module
    spi_ctrla_reg.bit.DORD = 0;                                             // MSB transferred first
    2616:	2102      	movs	r1, #2
    if ((mode == SPI_MODE0) || (mode == SPI_MODE1))                         // CPOL depending on SPI mode
    2618:	2e01      	cmp	r6, #1
    261a:	d902      	bls.n	2622 <sercom_spi_init+0x36>
    {
        spi_ctrla_reg.bit.CPOL = 0;
    } 
    else
    {
        spi_ctrla_reg.bit.CPOL = 1;
    261c:	2380      	movs	r3, #128	; 0x80
    261e:	059b      	lsls	r3, r3, #22
    2620:	4319      	orrs	r1, r3
    }
    if ((mode == SPI_MODE0) || (mode == SPI_MODE2))                         // CPHA depending on SPI mode
    2622:	2302      	movs	r3, #2
    2624:	439e      	bics	r6, r3
    2626:	d11c      	bne.n	2662 <sercom_spi_init+0x76>
    {
        spi_ctrla_reg.bit.CPHA = 0;
    2628:	4b10      	ldr	r3, [pc, #64]	; (266c <sercom_spi_init+0x80>)
    262a:	4019      	ands	r1, r3
    } 
    else
    {
        spi_ctrla_reg.bit.CPHA = 1;
    }
    spi_ctrla_reg.bit.FORM = 0;                                             // SPI frame format
    262c:	4b10      	ldr	r3, [pc, #64]	; (2670 <sercom_spi_init+0x84>)
    262e:	4019      	ands	r1, r3
    spi_ctrla_reg.bit.DIPO = miso_pad;                                      // Select MISO pad
    2630:	2303      	movs	r3, #3
    2632:	401a      	ands	r2, r3
    2634:	0512      	lsls	r2, r2, #20
    2636:	4c0f      	ldr	r4, [pc, #60]	; (2674 <sercom_spi_init+0x88>)
    2638:	4021      	ands	r1, r4
    263a:	4311      	orrs	r1, r2
    spi_ctrla_reg.bit.DOPO = mosi_sck_ss_pad;                               // MOSI SCK SS pads
    263c:	402b      	ands	r3, r5
    263e:	041b      	lsls	r3, r3, #16
    2640:	4a0d      	ldr	r2, [pc, #52]	; (2678 <sercom_spi_init+0x8c>)
    2642:	4011      	ands	r1, r2
    2644:	4319      	orrs	r1, r3
    spi_ctrla_reg.bit.RUNSTDBY = 0;                                         // Do not run during standby
    2646:	2380      	movs	r3, #128	; 0x80
    2648:	4399      	bics	r1, r3
    spi_ctrla_reg.bit.IBON = 1;                                             // Immediate buffer overflow notification
    264a:	3380      	adds	r3, #128	; 0x80
    264c:	4319      	orrs	r1, r3
    spi_ctrla_reg.bit.MODE = SERCOM_SPI_CTRLA_MODE_SPI_MASTER_Val;          // SPI Master
    264e:	3be4      	subs	r3, #228	; 0xe4
    2650:	4399      	bics	r1, r3
    2652:	3b10      	subs	r3, #16
    2654:	4319      	orrs	r1, r3
    while ((sercom_pt->SPI.SYNCBUSY.reg & SERCOM_SPI_SYNCBUSY_ENABLE) != 0);// Wait for sync
    2656:	2202      	movs	r2, #2
    2658:	69c3      	ldr	r3, [r0, #28]
    265a:	421a      	tst	r2, r3
    265c:	d1fc      	bne.n	2658 <sercom_spi_init+0x6c>
    sercom_pt->SPI.CTRLA = spi_ctrla_reg;                                   // Write register
    265e:	6001      	str	r1, [r0, #0]
}
    2660:	bd70      	pop	{r4, r5, r6, pc}
        spi_ctrla_reg.bit.CPHA = 1;
    2662:	2380      	movs	r3, #128	; 0x80
    2664:	055b      	lsls	r3, r3, #21
    2666:	4319      	orrs	r1, r3
    2668:	e7e0      	b.n	262c <sercom_spi_init+0x40>
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	efffffff 	.word	0xefffffff
    2670:	f0ffffff 	.word	0xf0ffffff
    2674:	ffcfffff 	.word	0xffcfffff
    2678:	fffcffff 	.word	0xfffcffff

0000267c <sercom_spi_send_single_byte>:
*   \param  data            Byte to send
*   \return received data
*/
uint8_t sercom_spi_send_single_byte(Sercom* sercom_pt, uint8_t data)
{
    sercom_pt->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_TXC;                    // Clear transmit complete flag
    267c:	2302      	movs	r3, #2
    267e:	7603      	strb	r3, [r0, #24]
    sercom_pt->SPI.DATA.reg = data;                                         // Write data byte to transmit
    2680:	6281      	str	r1, [r0, #40]	; 0x28
    while ((sercom_pt->SPI.INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC) == 0);     // Wait for received data
    2682:	2202      	movs	r2, #2
    2684:	7e03      	ldrb	r3, [r0, #24]
    2686:	4213      	tst	r3, r2
    2688:	d0fc      	beq.n	2684 <sercom_spi_send_single_byte+0x8>
    return sercom_pt->SPI.DATA.reg;
    268a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    268c:	b2c0      	uxtb	r0, r0
}
    268e:	4770      	bx	lr

00002690 <TCC0_Handler>:
            
            /* Power logic */
            logic_power_ms_tick();
        }
    #endif
}
    2690:	4770      	bx	lr

00002692 <TCC2_Handler>:
                logic_user_set_user_to_be_logged_off_flag();
            }
        }
    }
    #endif    
}
    2692:	4770      	bx	lr

00002694 <SysTick_Handler>:
*	\brief	Called by MCU systick at timeout
*/
void SysTick_Handler(void)
{
    /* Disable systick */
    SysTick->CTRL = 0;
    2694:	2200      	movs	r2, #0
    2696:	4b03      	ldr	r3, [pc, #12]	; (26a4 <SysTick_Handler+0x10>)
    2698:	601a      	str	r2, [r3, #0]
    timer_systick_expired = TRUE;
    269a:	3201      	adds	r2, #1
    269c:	4b02      	ldr	r3, [pc, #8]	; (26a8 <SysTick_Handler+0x14>)
    269e:	601a      	str	r2, [r3, #0]
}
    26a0:	4770      	bx	lr
    26a2:	46c0      	nop			; (mov r8, r8)
    26a4:	e000e010 	.word	0xe000e010
    26a8:	20000010 	.word	0x20000010

000026ac <utils_side_channel_safe_memcmp>:
*   \param  dataB   Second array
*   \param  size    Arrays length
*   \return 0 for match
*/
uint8_t utils_side_channel_safe_memcmp(uint8_t* dataA, uint8_t* dataB, uint32_t size)
{
    26ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    26ae:	b083      	sub	sp, #12
    volatile uint8_t return_value = 0x00;
    26b0:	2400      	movs	r4, #0
    26b2:	466b      	mov	r3, sp
    26b4:	71dc      	strb	r4, [r3, #7]

    for (uint32_t i = 0; i < size; i++)
    26b6:	2a00      	cmp	r2, #0
    26b8:	d00b      	beq.n	26d2 <utils_side_channel_safe_memcmp+0x26>
    26ba:	2300      	movs	r3, #0
    {
        return_value |= dataA[i] ^ dataB[i];
    26bc:	466c      	mov	r4, sp
    26be:	1de6      	adds	r6, r4, #7
    26c0:	7834      	ldrb	r4, [r6, #0]
    26c2:	5cc5      	ldrb	r5, [r0, r3]
    26c4:	5ccf      	ldrb	r7, [r1, r3]
    26c6:	407d      	eors	r5, r7
    26c8:	432c      	orrs	r4, r5
    26ca:	7034      	strb	r4, [r6, #0]
    for (uint32_t i = 0; i < size; i++)
    26cc:	3301      	adds	r3, #1
    26ce:	429a      	cmp	r2, r3
    26d0:	d1f6      	bne.n	26c0 <utils_side_channel_safe_memcmp+0x14>
    }

    return return_value;
    26d2:	466b      	mov	r3, sp
    26d4:	79d8      	ldrb	r0, [r3, #7]
    26d6:	b2c0      	uxtb	r0, r0
}
    26d8:	b003      	add	sp, #12
    26da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000026dc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    26dc:	4b0c      	ldr	r3, [pc, #48]	; (2710 <cpu_irq_enter_critical+0x34>)
    26de:	681b      	ldr	r3, [r3, #0]
    26e0:	2b00      	cmp	r3, #0
    26e2:	d106      	bne.n	26f2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    26e4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    26e8:	2b00      	cmp	r3, #0
    26ea:	d007      	beq.n	26fc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    26ec:	2200      	movs	r2, #0
    26ee:	4b09      	ldr	r3, [pc, #36]	; (2714 <cpu_irq_enter_critical+0x38>)
    26f0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    26f2:	4a07      	ldr	r2, [pc, #28]	; (2710 <cpu_irq_enter_critical+0x34>)
    26f4:	6813      	ldr	r3, [r2, #0]
    26f6:	3301      	adds	r3, #1
    26f8:	6013      	str	r3, [r2, #0]
}
    26fa:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    26fc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    26fe:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2702:	2200      	movs	r2, #0
    2704:	4b04      	ldr	r3, [pc, #16]	; (2718 <cpu_irq_enter_critical+0x3c>)
    2706:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2708:	3201      	adds	r2, #1
    270a:	4b02      	ldr	r3, [pc, #8]	; (2714 <cpu_irq_enter_critical+0x38>)
    270c:	701a      	strb	r2, [r3, #0]
    270e:	e7f0      	b.n	26f2 <cpu_irq_enter_critical+0x16>
    2710:	20000080 	.word	0x20000080
    2714:	20000084 	.word	0x20000084
    2718:	20000014 	.word	0x20000014

0000271c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    271c:	4b08      	ldr	r3, [pc, #32]	; (2740 <cpu_irq_leave_critical+0x24>)
    271e:	681a      	ldr	r2, [r3, #0]
    2720:	3a01      	subs	r2, #1
    2722:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2724:	681b      	ldr	r3, [r3, #0]
    2726:	2b00      	cmp	r3, #0
    2728:	d109      	bne.n	273e <cpu_irq_leave_critical+0x22>
    272a:	4b06      	ldr	r3, [pc, #24]	; (2744 <cpu_irq_leave_critical+0x28>)
    272c:	781b      	ldrb	r3, [r3, #0]
    272e:	2b00      	cmp	r3, #0
    2730:	d005      	beq.n	273e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2732:	2201      	movs	r2, #1
    2734:	4b04      	ldr	r3, [pc, #16]	; (2748 <cpu_irq_leave_critical+0x2c>)
    2736:	701a      	strb	r2, [r3, #0]
    2738:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    273c:	b662      	cpsie	i
	}
}
    273e:	4770      	bx	lr
    2740:	20000080 	.word	0x20000080
    2744:	20000084 	.word	0x20000084
    2748:	20000014 	.word	0x20000014

0000274c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    274c:	e7fe      	b.n	274c <Dummy_Handler>
	...

00002750 <Reset_Handler>:
{
    2750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2752:	4a2a      	ldr	r2, [pc, #168]	; (27fc <Reset_Handler+0xac>)
    2754:	4b2a      	ldr	r3, [pc, #168]	; (2800 <Reset_Handler+0xb0>)
    2756:	429a      	cmp	r2, r3
    2758:	d011      	beq.n	277e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    275a:	001a      	movs	r2, r3
    275c:	4b29      	ldr	r3, [pc, #164]	; (2804 <Reset_Handler+0xb4>)
    275e:	429a      	cmp	r2, r3
    2760:	d20d      	bcs.n	277e <Reset_Handler+0x2e>
    2762:	4a29      	ldr	r2, [pc, #164]	; (2808 <Reset_Handler+0xb8>)
    2764:	3303      	adds	r3, #3
    2766:	1a9b      	subs	r3, r3, r2
    2768:	089b      	lsrs	r3, r3, #2
    276a:	3301      	adds	r3, #1
    276c:	009b      	lsls	r3, r3, #2
    276e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2770:	4823      	ldr	r0, [pc, #140]	; (2800 <Reset_Handler+0xb0>)
    2772:	4922      	ldr	r1, [pc, #136]	; (27fc <Reset_Handler+0xac>)
    2774:	588c      	ldr	r4, [r1, r2]
    2776:	5084      	str	r4, [r0, r2]
    2778:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    277a:	429a      	cmp	r2, r3
    277c:	d1fa      	bne.n	2774 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    277e:	4a23      	ldr	r2, [pc, #140]	; (280c <Reset_Handler+0xbc>)
    2780:	4b23      	ldr	r3, [pc, #140]	; (2810 <Reset_Handler+0xc0>)
    2782:	429a      	cmp	r2, r3
    2784:	d20a      	bcs.n	279c <Reset_Handler+0x4c>
    2786:	43d3      	mvns	r3, r2
    2788:	4921      	ldr	r1, [pc, #132]	; (2810 <Reset_Handler+0xc0>)
    278a:	185b      	adds	r3, r3, r1
    278c:	2103      	movs	r1, #3
    278e:	438b      	bics	r3, r1
    2790:	3304      	adds	r3, #4
    2792:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2794:	2100      	movs	r1, #0
    2796:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2798:	4293      	cmp	r3, r2
    279a:	d1fc      	bne.n	2796 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    279c:	4a1d      	ldr	r2, [pc, #116]	; (2814 <Reset_Handler+0xc4>)
    279e:	21ff      	movs	r1, #255	; 0xff
    27a0:	4b1d      	ldr	r3, [pc, #116]	; (2818 <Reset_Handler+0xc8>)
    27a2:	438b      	bics	r3, r1
    27a4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    27a6:	39fd      	subs	r1, #253	; 0xfd
    27a8:	2390      	movs	r3, #144	; 0x90
    27aa:	005b      	lsls	r3, r3, #1
    27ac:	4a1b      	ldr	r2, [pc, #108]	; (281c <Reset_Handler+0xcc>)
    27ae:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    27b0:	4a1b      	ldr	r2, [pc, #108]	; (2820 <Reset_Handler+0xd0>)
    27b2:	78d3      	ldrb	r3, [r2, #3]
    27b4:	2503      	movs	r5, #3
    27b6:	43ab      	bics	r3, r5
    27b8:	2402      	movs	r4, #2
    27ba:	4323      	orrs	r3, r4
    27bc:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    27be:	78d3      	ldrb	r3, [r2, #3]
    27c0:	270c      	movs	r7, #12
    27c2:	43bb      	bics	r3, r7
    27c4:	2608      	movs	r6, #8
    27c6:	4333      	orrs	r3, r6
    27c8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    27ca:	4b16      	ldr	r3, [pc, #88]	; (2824 <Reset_Handler+0xd4>)
    27cc:	7b98      	ldrb	r0, [r3, #14]
    27ce:	2230      	movs	r2, #48	; 0x30
    27d0:	4390      	bics	r0, r2
    27d2:	2220      	movs	r2, #32
    27d4:	4310      	orrs	r0, r2
    27d6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    27d8:	7b99      	ldrb	r1, [r3, #14]
    27da:	43b9      	bics	r1, r7
    27dc:	4331      	orrs	r1, r6
    27de:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    27e0:	7b9a      	ldrb	r2, [r3, #14]
    27e2:	43aa      	bics	r2, r5
    27e4:	4322      	orrs	r2, r4
    27e6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    27e8:	4a0f      	ldr	r2, [pc, #60]	; (2828 <Reset_Handler+0xd8>)
    27ea:	6853      	ldr	r3, [r2, #4]
    27ec:	2180      	movs	r1, #128	; 0x80
    27ee:	430b      	orrs	r3, r1
    27f0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    27f2:	4b0e      	ldr	r3, [pc, #56]	; (282c <Reset_Handler+0xdc>)
    27f4:	4798      	blx	r3
        main();
    27f6:	4b0e      	ldr	r3, [pc, #56]	; (2830 <Reset_Handler+0xe0>)
    27f8:	4798      	blx	r3
    27fa:	e7fe      	b.n	27fa <Reset_Handler+0xaa>
    27fc:	00003398 	.word	0x00003398
    2800:	20000000 	.word	0x20000000
    2804:	20000018 	.word	0x20000018
    2808:	20000004 	.word	0x20000004
    280c:	20000020 	.word	0x20000020
    2810:	20000274 	.word	0x20000274
    2814:	e000ed00 	.word	0xe000ed00
    2818:	00000000 	.word	0x00000000
    281c:	41007000 	.word	0x41007000
    2820:	41005000 	.word	0x41005000
    2824:	41004800 	.word	0x41004800
    2828:	41004000 	.word	0x41004000
    282c:	00002835 	.word	0x00002835
    2830:	000014dd 	.word	0x000014dd

00002834 <__libc_init_array>:
    2834:	b570      	push	{r4, r5, r6, lr}
    2836:	2600      	movs	r6, #0
    2838:	4d0c      	ldr	r5, [pc, #48]	; (286c <__libc_init_array+0x38>)
    283a:	4c0d      	ldr	r4, [pc, #52]	; (2870 <__libc_init_array+0x3c>)
    283c:	1b64      	subs	r4, r4, r5
    283e:	10a4      	asrs	r4, r4, #2
    2840:	42a6      	cmp	r6, r4
    2842:	d109      	bne.n	2858 <__libc_init_array+0x24>
    2844:	2600      	movs	r6, #0
    2846:	f000 fd97 	bl	3378 <_init>
    284a:	4d0a      	ldr	r5, [pc, #40]	; (2874 <__libc_init_array+0x40>)
    284c:	4c0a      	ldr	r4, [pc, #40]	; (2878 <__libc_init_array+0x44>)
    284e:	1b64      	subs	r4, r4, r5
    2850:	10a4      	asrs	r4, r4, #2
    2852:	42a6      	cmp	r6, r4
    2854:	d105      	bne.n	2862 <__libc_init_array+0x2e>
    2856:	bd70      	pop	{r4, r5, r6, pc}
    2858:	00b3      	lsls	r3, r6, #2
    285a:	58eb      	ldr	r3, [r5, r3]
    285c:	4798      	blx	r3
    285e:	3601      	adds	r6, #1
    2860:	e7ee      	b.n	2840 <__libc_init_array+0xc>
    2862:	00b3      	lsls	r3, r6, #2
    2864:	58eb      	ldr	r3, [r5, r3]
    2866:	4798      	blx	r3
    2868:	3601      	adds	r6, #1
    286a:	e7f2      	b.n	2852 <__libc_init_array+0x1e>
    286c:	00003384 	.word	0x00003384
    2870:	00003384 	.word	0x00003384
    2874:	00003384 	.word	0x00003384
    2878:	00003388 	.word	0x00003388

0000287c <memcpy>:
    287c:	2300      	movs	r3, #0
    287e:	b510      	push	{r4, lr}
    2880:	429a      	cmp	r2, r3
    2882:	d100      	bne.n	2886 <memcpy+0xa>
    2884:	bd10      	pop	{r4, pc}
    2886:	5ccc      	ldrb	r4, [r1, r3]
    2888:	54c4      	strb	r4, [r0, r3]
    288a:	3301      	adds	r3, #1
    288c:	e7f8      	b.n	2880 <memcpy+0x4>

0000288e <memset>:
    288e:	0003      	movs	r3, r0
    2890:	1882      	adds	r2, r0, r2
    2892:	4293      	cmp	r3, r2
    2894:	d100      	bne.n	2898 <memset+0xa>
    2896:	4770      	bx	lr
    2898:	7019      	strb	r1, [r3, #0]
    289a:	3301      	adds	r3, #1
    289c:	e7f9      	b.n	2892 <memset+0x4>
	...

000028a0 <Rcon>:
    28a0:	0201 0804 2010 8040 361b 0000               ..... @..6..

000028ac <br_aes_ct_ctrcbc_vtable>:
    28ac:	00f8 0000 0010 0000 0004 0000 06e5 0000     ................
    28bc:	0b21 0000 0e99 0000 0701 0000 09a9 0000     !...............

000028cc <custom_fs_emergency_font_file>:
    28cc:	010d 00c2 00b3 0020 007e 00a1 00ff 0131     ...... .~.....1.
    28dc:	0131 0152 0153 0178 0178 ffff ffff ffff     1.R.S.x.x.......
    28ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    28fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    290c:	ffff 0000 0001 0002 0003 0004 0005 0006     ................
    291c:	0007 0008 0009 000a 000b 000c 000d 000e     ................
    292c:	000f 0010 0011 0012 0013 0014 0015 0016     ................
    293c:	0017 0018 0019 001a 001b 001c 001d 001e     ................
    294c:	001f 0020 0021 0022 0023 0024 0025 0026     .. .!.".#.$.%.&.
    295c:	0027 0028 0029 002a 002b 002c 002d 002e     '.(.).*.+.,.-...
    296c:	002f 0030 0031 0032 0033 0034 0035 0036     /.0.1.2.3.4.5.6.
    297c:	0037 0038 0039 003a 003b 003c 003d 003e     7.8.9.:.;.<.=.>.
    298c:	003f 0040 0041 0042 0043 0044 0045 0046     ?.@.A.B.C.D.E.F.
    299c:	0047 0048 0049 004a 004b 004c 004d 004e     G.H.I.J.K.L.M.N.
    29ac:	004f 0050 0051 0052 0053 0054 0055 0056     O.P.Q.R.S.T.U.V.
    29bc:	0057 0058 0059 005a 005b 005c 005d 005e     W.X.Y.Z.[.\.].^.
    29cc:	005f 0060 0061 0062 0063 ffff 0064 0065     _.`.a.b.c...d.e.
    29dc:	0066 0067 0068 0069 ffff 006a 006b 006c     f.g.h.i...j.k.l.
    29ec:	006d ffff ffff 006e 006f 0070 0071 0072     m.....n.o.p.q.r.
    29fc:	ffff 0073 0074 ffff ffff ffff 0075 0076     ..s.t.......u.v.
    2a0c:	0077 0078 0079 007a 007b 007c 007d 007e     w.x.y.z.{.|.}.~.
    2a1c:	007f 0080 0081 0082 0083 0084 0085 ffff     ................
    2a2c:	0086 0087 0088 0089 008a 008b ffff 008c     ................
    2a3c:	008d 008e 008f 0090 ffff ffff 0091 0092     ................
    2a4c:	0093 0094 0095 0096 0097 0098 0099 009a     ................
    2a5c:	009b 009c 009d 009e 009f 00a0 00a1 ffff     ................
    2a6c:	00a2 00a3 00a4 00a5 00a6 00a7 00a8 00a9     ................
    2a7c:	00aa 00ab 00ac 00ad ffff ffff 00ae 00af     ................
    2a8c:	00b0 00b1 00b2 0007 0000 ffff ffff 0801     ................
    2a9c:	0302 0000 0000 0303 0201 0001 0000 0505     ................
    2aac:	0300 0003 0000 0a05 0200 0007 0000 0805     ................
    2abc:	0300 000e 0000 0805 0300 0013 0000 0301     ................
    2acc:	0202 0018 0000 0a03 0201 0019 0000 0a03     ................
    2adc:	0201 001d 0000 0505 0300 0021 0000 0505     ..........!.....
    2aec:	0500 0025 0000 0402 0901 0029 0000 0105     ..%.......).....
    2afc:	0700 002a 0000 0202 0902 002b 0000 0a05     ..*.......+.....
    2b0c:	0300 002c 0000 0805 0300 0033 0000 0805     ..,.......3.....
    2b1c:	0300 0038 0000 0805 0300 003d 0000 0805     ..8.......=.....
    2b2c:	0300 0042 0000 0805 0300 0047 0000 0805     ..B.......G.....
    2b3c:	0300 004c 0000 0805 0300 0051 0000 0805     ..L.......Q.....
    2b4c:	0300 0056 0000 0805 0300 005b 0000 0805     ..V.......[.....
    2b5c:	0300 0060 0000 0602 0502 0065 0000 0802     ..`.......e.....
    2b6c:	0501 0067 0000 0704 0301 0069 0000 0305     ..g.......i.....
    2b7c:	0500 006d 0000 0704 0301 006f 0000 0805     ..m.......o.....
    2b8c:	0300 0073 0000 0805 0300 0078 0000 0805     ..s.......x.....
    2b9c:	0300 007d 0000 0805 0300 0082 0000 0805     ..}.............
    2bac:	0300 0087 0000 0805 0300 008c 0000 0805     ................
    2bbc:	0300 0091 0000 0805 0300 0096 0000 0805     ................
    2bcc:	0300 009b 0000 0805 0300 00a0 0000 0805     ................
    2bdc:	0300 00a5 0000 0805 0300 00aa 0000 0805     ................
    2bec:	0300 00af 0000 0805 0300 00b4 0000 0805     ................
    2bfc:	0300 00b9 0000 0805 0300 00be 0000 0805     ................
    2c0c:	0300 00c3 0000 0805 0300 00c8 0000 0905     ................
    2c1c:	0300 00cd 0000 0805 0300 00d3 0000 0805     ................
    2c2c:	0300 00d8 0000 0805 0300 00dd 0000 0805     ................
    2c3c:	0300 00e2 0000 0805 0300 00e7 0000 0805     ................
    2c4c:	0300 00ec 0000 0805 0300 00f1 0000 0805     ................
    2c5c:	0300 00f6 0000 0805 0300 00fb 0000 0a02     ................
    2c6c:	0202 0100 0000 0a05 0301 0103 0000 0a02     ................
    2c7c:	0201 010a 0000 0305 0300 010d 0000 0106     ................
    2c8c:	0c00 010f 0000 0303 0201 0110 0000 0505     ................
    2c9c:	0600 0112 0000 0805 0300 0116 0000 0505     ................
    2cac:	0600 011b 0000 0805 0300 011f 0000 0505     ................
    2cbc:	0600 0124 0000 0804 0301 0128 0000 0705     ..$.......(.....
    2ccc:	0600 012c 0000 0805 0300 0131 0000 0803     ..,.......1.....
    2cdc:	0301 0136 0000 0a03 0300 0139 0000 0805     ..6.......9.....
    2cec:	0300 013d 0000 0803 0301 0142 0000 0505     ..=.......B.....
    2cfc:	0600 0145 0000 0505 0600 0149 0000 0505     ..E.......I.....
    2d0c:	0600 014d 0000 0705 0600 0151 0000 0705     ..M.......Q.....
    2d1c:	0600 0156 0000 0505 0600 015b 0000 0505     ..V.......[.....
    2d2c:	0600 015f 0000 0804 0301 0163 0000 0505     .._.......c.....
    2d3c:	0600 0167 0000 0505 0600 016b 0000 0505     ..g.......k.....
    2d4c:	0600 016f 0000 0505 0600 0173 0000 0705     ..o.......s.....
    2d5c:	0600 0177 0000 0505 0600 017c 0000 0b03     ..w.......|.....
    2d6c:	0201 0180 0000 0a01 0202 0185 0000 0b03     ................
    2d7c:	0201 0187 0000 0205 0500 018c 0000 0801     ................
    2d8c:	0303 018e 0000 0705 0500 018f 0000 0905     ................
    2d9c:	0200 0194 0000 0505 0500 019a 0000 0805     ................
    2dac:	0300 019e 0000 0b05 0100 01a3 0000 0103     ................
    2dbc:	0301 01aa 0000 0805 0300 01ab 0000 0704     ................
    2dcc:	0101 01b0 0000 0405 0700 01b4 0000 0305     ................
    2ddc:	0600 01b7 0000 0705 0300 01b9 0000 0103     ................
    2dec:	0301 01be 0000 0404 0201 01bf 0000 0605     ................
    2dfc:	0400 01c1 0000 0202 0302 01c5 0000 0705     ................
    2e0c:	0600 01c6 0000 0905 0200 01cb 0000 0202     ................
    2e1c:	0602 01d1 0000 0302 0a01 01d2 0000 0604     ................
    2e2c:	0101 01d3 0000 0405 0700 01d6 0000 0805     ................
    2e3c:	0300 01d9 0000 0a05 0100 01de 0000 0a05     ................
    2e4c:	0100 01e5 0000 0a05 0100 01ec 0000 0a05     ................
    2e5c:	0100 01f3 0000 0a05 0100 01fa 0000 0a05     ................
    2e6c:	0100 0201 0000 0805 0300 0208 0000 0a05     ................
    2e7c:	0300 020d 0000 0a05 0100 0214 0000 0a05     ................
    2e8c:	0100 021b 0000 0a05 0100 0222 0000 0a05     ..........".....
    2e9c:	0100 0229 0000 0a05 0100 0230 0000 0a05     ..).......0.....
    2eac:	0100 0237 0000 0a05 0100 023e 0000 0a05     ..7.......>.....
    2ebc:	0100 0245 0000 0a05 0100 024c 0000 0a05     ..E.......L.....
    2ecc:	0100 0253 0000 0a05 0100 025a 0000 0a05     ..S.......Z.....
    2edc:	0100 0261 0000 0a05 0100 0268 0000 0a05     ..a.......h.....
    2eec:	0100 026f 0000 0805 0300 0276 0000 0a05     ..o.......v.....
    2efc:	0100 027b 0000 0a05 0100 0282 0000 0a05     ..{.............
    2f0c:	0100 0289 0000 0a05 0100 0290 0000 0a05     ................
    2f1c:	0200 0297 0000 0905 0200 029e 0000 0905     ................
    2f2c:	0200 02a4 0000 0905 0200 02aa 0000 0905     ................
    2f3c:	0200 02b0 0000 0805 0300 02b6 0000 0905     ................
    2f4c:	0200 02bb 0000 0505 0600 02c1 0000 0705     ................
    2f5c:	0600 02c5 0000 0905 0200 02ca 0000 0905     ................
    2f6c:	0200 02d0 0000 0905 0200 02d6 0000 0805     ................
    2f7c:	0300 02dc 0000 0903 0201 02e1 0000 0903     ................
    2f8c:	0201 02e5 0000 0903 0201 02e9 0000 0803     ................
    2f9c:	0301 02ed 0000 0905 0200 02f0 0000 0905     ................
    2fac:	0200 02f6 0000 0905 0200 02fc 0000 0905     ................
    2fbc:	0200 0302 0000 0905 0200 0308 0000 0805     ................
    2fcc:	0300 030e 0000 0505 0500 0313 0000 0505     ................
    2fdc:	0600 0317 0000 0905 0200 031b 0000 0905     ................
    2fec:	0200 0321 0000 0905 0200 0327 0000 0805     ..!.......'.....
    2ffc:	0300 032d 0000 0a05 0300 0332 0000 0503     ..-.......2.....
    300c:	0601 0339 0000 0805 0300 033b 0000 0505     ..9.......;.....
    301c:	0600 0340 0000 0a05 0100 0344 0000 b6fd     ..@.......D.....
    302c:	5780 f5d5 2300 47ab b514 0071 6a7d 36a3     .W...#.G..q.}j.6
    303c:	64b2 8aa8 4d56 2ae0 2449 8844 4992 2550     .d..VM.*I$D..IP%
    304c:	525d 2100 423e f600 f0f8 4408 1122 8408     ]R.!>B.....D"...
    305c:	7400 5c67 2ec6 0827 1042 749f 2242 1f22     .tg\..'.B..tB"".
    306c:	4274 8660 112e 2f95 4788 21fc 86e0 742e     tB`..../.G.!...t
    307c:	e821 2ec6 42f8 1022 7484 e862 2ec6 6374     !....B"..tb...tc
    308c:	8417 f02e f0f0 12f6 4248 f810 843e 2421     ........HB..>.!$
    309c:	7480 1142 0410 6f74 c25b 220f 1895 31fe     .tB...to[.."...1
    30ac:	63f4 c6e8 743e 0861 2e42 63f4 c618 fc3e     .c..>ta.B..c..>.
    30bc:	e821 1f42 21fc 42e8 7410 0961 2ec6 638c     !.B..!.B.ta....c
    30cc:	c6f8 f931 4208 9f10 4208 c610 8c2e 8ca9     ..1..B...B......
    30dc:	5152 2184 4208 8e1f 58eb 31c6 6b8e c638     RQ.!.B...X.1.k8.
    30ec:	7431 1863 2ec6 63f4 42e8 7410 1863 aec6     1tc....c.B.tc...
    30fc:	f408 e863 31c6 6074 86e0 f92e 4208 8410     ..c..1t`.....B..
    310c:	638c c618 8c2e 1563 8428 638c d71a 8c71     .c....c.(..c..q.
    311c:	a262 312a 638c 1015 f884 4444 1f42 aaea     b.*1.c....DDB...
    312c:	84b0 8210 4210 4008 55d5 2270 fca2 8088     .....B.@.Up"....
    313c:	637c 8036 2184 c6e8 743e 0761 0880 f842     |c6..!..>ta...B.
    314c:	2fc6 7f74 8007 4e34 4444 637c 8517 84c0     ./t...4NDD|c....
    315c:	e821 31c6 6440 2097 4932 8438 2a21 5172     !..1@d. 2I8.!*rQ
    316c:	24c9 f597 5a6b b680 1863 7480 1763 f400     .$..kZ..c..tc...
    317c:	1f63 0042 637c 8417 b620 0861 7c00 1f1c     c.B.|c.. .a..|..
    318c:	4400 444e 8c43 3663 8c80 a254 ad00 556b     .DNDC.c6..T...kU
    319c:	8a00 a888 8c80 1763 c085 88f8 808f 2529     ......c.......)%
    31ac:	4812 ff80 89c0 5224 004a 806d 23bf 4aab     .H....$RJ.m..#.J
    31bc:	803c a164 42c8 f011 948b 80e8 be8a 904f     <.d..B........O.
    31cc:	7484 4953 2545 5c94 e0a0 189b 5cb4 9779     .tSIE%.\.....\y.
    31dc:	f000 a44c f890 e042 5ab3 c0e6 69e0 2196     ..L...B..Z...i.!
    31ec:	423e 607c a594 c22e 7d00 576b a594 f028     >B|`.....}kW..(.
    31fc:	69d8 0f96 5392 2020 8808 2e42 0841 46a5     .i...S  ..B.A..F
    320c:	8c3f 1140 a508 3f46 408c 8022 2a45 8c3f     ?.@...F?.@".E*?.
    321c:	6d40 a588 3f46 408c 0850 46a5 8c3f 2240     @m..F?.@P..F?.@"
    322c:	a588 3f46 408c 297d 52ea 7497 0861 2e42     ..F?.@}).R.ta.B.
    323c:	0022 3f41 7a08 8710 11c0 083f 107a c087     ".A?.z....?.z...
    324c:	bf22 7a08 8710 50c0 083f 107a c087 3e41     "..z...P?.z...A>
    325c:	1042 2784 11c0 423e 8410 c027 8122 10f2     B..'..>B..'."...
    326c:	2784 50c0 423e 8410 c027 a36d ce9a 8c31     .'.P>B..'.m...1.
    327c:	4140 181d 31c6 808b 1d11 c618 8b31 2280     @A...1......1.."
    328c:	e880 31c6 808b 9d6d c618 8b31 5080 181d     ...1..m...1..P..
    329c:	31c6 808b 6774 c65c 412e 1823 31c6 808b     .1..tg\..A#..1..
    32ac:	2311 c618 8b31 2280 1881 31c6 808b 2350     .#..1.."...1..P#
    32bc:	c618 8b31 3280 2963 3146 00b4 8020 c607     ..1..2c)F1.. ...
    32cc:	6833 0011 c607 6833 8022 c607 6833 806d     3h....3h"...3hm.
    32dc:	c607 6833 0050 c6f8 226d 0788 33c6 7568     ..3hP...m"...3hu
    32ec:	476f 7480 0761 0091 0041 4707 78f0 0011     oG.ta...A..G.x..
    32fc:	4707 78f0 8022 4707 78f0 0050 fee8 880f     .G.x"..G.xP.....
    330c:	920c 28e0 920c 54e0 920c a0e0 9764 806d     ...(...T....d.m.
    331c:	660b 8831 0041 4607 7031 0011 4607 7031     .f1.A..F1p...F1p
    332c:	8022 4607 7031 806d 4607 7031 0050 c6e8     "..F1pm..F1pP...
    333c:	202e 023e 7400 97eb 4100 0800 33c6 1168     . >..t...A...3h.
    334c:	0800 33c6 2268 0880 33c6 5068 1801 6dc6     ...3h"...3hP...m
    335c:	0150 c618 0b2f c980 7d2e 6a29 8f52 6f55     P.../....})jR.Uo
    336c:	8045 0150 c518 2144 0000 0000               E.P...D!....

00003378 <_init>:
    3378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    337a:	46c0      	nop			; (mov r8, r8)
    337c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    337e:	bc08      	pop	{r3}
    3380:	469e      	mov	lr, r3
    3382:	4770      	bx	lr

00003384 <__init_array_start>:
    3384:	000000dd 	.word	0x000000dd

00003388 <_fini>:
    3388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    338a:	46c0      	nop			; (mov r8, r8)
    338c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    338e:	bc08      	pop	{r3}
    3390:	469e      	mov	lr, r3
    3392:	4770      	bx	lr

00003394 <__fini_array_start>:
    3394:	000000b5 	.word	0x000000b5
