ifeq ($(OS),Windows_NT)
SHELL := cmd.exe
MKDIR := mkdir

define create_dir
	@if not exist "$(1)" $(MKDIR) "$(1)"
endef

SHELL := sh

else

MKDIR := mkdir -p

define create_dir
	@$(MKDIR) $(1)
endef
endif

RM := rm -rf

CC    := gcc
CPP   := g++
ASM   := as
LINK  := gcc

INC_DIRS := \
-I"src/EMU" \
-I"src" \
-I"src/config" \
-I"src/PLATFORM" \
-I"src/CLOCKS" \
-I"src/SERCOM" \
-I"src/FLASH" \
-I"src/FILESYSTEM" \
-I"src/DMA" \
-I"src/TIMER" \
-I"src/SMARTCARD" \
-I"src/OLED" \
-I"src/ACCELEROMETER" \
-I"src/INPUTS" \
-I"src/COMMS" \
-I"src/LOGIC" \
-I"src/SECURITY" \
-I"src/GUI" \
-I"src/NODEMGMT" \
-I"src/RNG" \
-I"src/BearSSL/src" \
-I"src/BearSSL/inc"

LIB_DIRS := 


ifeq ($(OS),Windows_NT)
INC_DIRS +=
else
INC_DIRS +=
endif

C_SRCS +=  \
src/EMU/lis2hh12.c \
src/BearSSL/src/symcipher/aes_ct.c \
src/BearSSL/src/symcipher/aes_ct_ctr.c \
src/BearSSL/src/symcipher/aes_ct_ctrcbc.c \
src/BearSSL/src/symcipher/aes_ct_enc.c \
src/EMU/comms_aux_mcu.c \
src/COMMS/comms_hid_msgs.c \
src/COMMS/comms_hid_msgs_debug.c \
src/EMU/dma.c \
src/FILESYSTEM/custom_bitstream.c \
src/FILESYSTEM/custom_fs.c \
src/FILESYSTEM/custom_fs_emergency_font.c \
src/EMU/dataflash.c \
src/EMU/dbflash.c \
src/GUI/gui_carousel.c \
src/GUI/gui_dispatcher.c \
src/GUI/gui_menu.c \
src/GUI/gui_prompts.c \
src/EMU/inputs.c \
src/LOGIC/logic_aux_mcu.c \
src/LOGIC/logic_bluetooth.c \
src/LOGIC/logic_database.c \
src/LOGIC/logic_device.c \
src/LOGIC/logic_encryption.c \
src/LOGIC/logic_gui.c \
src/LOGIC/logic_power.c \
src/LOGIC/logic_security.c \
src/LOGIC/logic_smartcard.c \
src/LOGIC/logic_user.c \
src/NODEMGMT/nodemgmt.c \
src/OLED/mooltipass_graphics_bundle.c \
src/OLED/sh1122.c \
src/EMU/platform_io.c \
src/RNG/rng.c \
src/EMU/fuses.c \
src/EMU/driver_sercom.c \
src/EMU/smartcard_highlevel.c \
src/EMU/smartcard_lowlevel.c \
src/EMU/driver_timer.c \
src/utils.c \
src/main.c \
src/EMU/emulator.c

ifeq ($(DEBUG), 1)
    C_FLAGS += -DDEBUG -g3 -O1
    OUTPUT_DIR := Debug-emu
else
    C_FLAGS += -DNDEBUG -Os
    OUTPUT_DIR := Release-emu
endif

C_FLAGS += -fdata-sections -ffunction-sections -Wall -c -pipe -fno-strict-aliasing -Wall -Wstrict-prototypes -Wmissing-prototypes -Werror-implicit-function-declaration -Wpointer-arith -std=gnu99 -ffunction-sections -fdata-sections -Wchar-subscripts -Wcomment -Wformat=2 -Wimplicit-int -Wmain -Wparentheses -Wsequence-point -Wreturn-type -Wswitch -Wtrigraphs -Wunused -Wuninitialized -Wunknown-pragmas -Wfloat-equal -Wundef -Wshadow -Wbad-function-cast -Wwrite-strings -Wsign-compare -Waggregate-return  -Wmissing-declarations -Wformat -Wmissing-format-attribute -Wno-deprecated-declarations -Wpacked -Wredundant-decls -Wnested-externs -Wlong-long -Wunreachable-code -Wcast-align -Wlogical-op -Wjump-misses-init

C_DEFINES := -DBR_BE_UNALIGNED=0 -DBR_CT_MUL15=0 -DBR_ENABLE_INTRINSICS=0 -DBR_CT_MUL31=0 -DBR_LE_UNALIGNED=0 -DBR_NO_ARITH_SHIFT=0 -DBR_POWER_ASM_MACROS=0 -D_ARCH_PWR8=0 -D_MSC_VER=0 -D__clang__=0 -DBR_POWER8=0

C_DEFINES += -DEMULATOR_BUILD

OBJS := $(C_SRCS:.c=.o)
OBJS :=  $(addprefix $(OUTPUT_DIR)/,$(OBJS))
OBJ_DIRS := $(sort $(dir $(OBJS)))

C_DEPS := $(C_SRCS:%.c=$(OUTPUT_DIR)/%.d)

TARGET := $(OUTPUT_DIR)/mini_ble.elf
TARGET_BIN := $(TARGET:.elf=.bin)
TARGET_HEX := $(TARGET:.elf=.hex)
TARGET_LSS := $(TARGET:.elf=.lss)
TARGET_MAP := $(TARGET:.elf=.map)
TARGET_SREC := $(TARGET:.elf=.srec)
TARGET_EEP := $(TARGET:.elf=.eep)

#OUTPUT_FILE_DEP:= ../makedep.mk

#$(OUTPUT_DIR):
#	$(MKDIR) $(OBJ_DIRS)

#.PHONY: $(OBJ_DIRS)

# All Target
all: $(TARGET)

$(OUTPUT_DIR)/%.o: %.c $(OUTPUT_DIR)/%.d
	@echo Building file: $@
	@echo Invoking: GNU C Compiler
	@$(call create_dir,$(dir $@))
	$(CC) $(C_FLAGS) $(C_DEFINES) $(INC_DIRS) -MD -MP -MF "$(@:%.o=%.d)" -MT "$@" -o "$@" "$<"
	@echo Finished building: $@

$(TARGET): $(OBJS) $(LIB_DEP)
	@echo Building target: $@
	@echo Invoking: GNU Linker
	$(CC) -o$(TARGET) $(OBJS) $(LIBS) -lm $(LIB_DIRS) -Wl,--gc-sections
	@echo Finished building target: $@

# Other Targets
clean:
	$(RM) $(OBJS)
	$(RM) $(C_DEPS)
	rm -rf $(TARGET) $(TARGET_BIN) $(TARGET_HEX) $(TARGET_LSS) $(TARGET_EEP) $(TARGET_MAP) $(TARGET_SREC)
wipe:
	$(RM) $(OUTPUT_DIR)

$(C_DEPS):

ifneq ($(MAKECMDGOALS),clean)
-include $(C_DEPS)
endif
